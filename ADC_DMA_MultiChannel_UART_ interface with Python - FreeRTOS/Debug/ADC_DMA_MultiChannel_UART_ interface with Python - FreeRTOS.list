
ADC_DMA_MultiChannel_UART_ interface with Python - FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a470  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  0800a620  0800a620  0001a620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7f0  0800a7f0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7f0  0800a7f0  0001a7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7f8  0800a7f8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7f8  0800a7f8  0001a7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7fc  0800a7fc  0001a7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800a800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          00004d4c  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004dec  20004dec  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d0a5  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004126  00000000  00000000  0003d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017e8  00000000  00000000  000412e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001287  00000000  00000000  00042ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005420  00000000  00000000  00043d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b705  00000000  00000000  0004916f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f40e1  00000000  00000000  00064874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006c24  00000000  00000000  00158958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a7  00000000  00000000  0015f57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a608 	.word	0x0800a608

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	0800a608 	.word	0x0800a608

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d013      	beq.n	80005cc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005ac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00b      	beq.n	80005cc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	e000      	b.n	80005b8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f9      	beq.n	80005b6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005c2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 80005da:	b580      	push	{r7, lr}
 80005dc:	b086      	sub	sp, #24
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
	  int i = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
	  for (i=0; i<len; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e009      	b.n	8000604 <_write+0x2a>
		  ITM_SendChar((*ptr++));
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	60ba      	str	r2, [r7, #8]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffc7 	bl	800058c <ITM_SendChar>
	  for (i=0; i<len; i++)
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	3301      	adds	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	429a      	cmp	r2, r3
 800060a:	dbf1      	blt.n	80005f0 <_write+0x16>
	  return len;
 800060c:	687b      	ldr	r3, [r7, #4]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fe6a 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f86c 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 f9e2 	bl	80009ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000628:	f000 f9c0 	bl	80009ac <MX_DMA_Init>
  MX_USART1_UART_Init();
 800062c:	f000 f994 	bl	8000958 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000630:	f000 f8d4 	bl	80007dc <MX_ADC1_Init>
  MX_TIM8_Init();
 8000634:	f000 f940 	bl	80008b8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  printf("PROGRAM START \n\r");
 8000638:	481f      	ldr	r0, [pc, #124]	; (80006b8 <main+0xa0>)
 800063a:	f009 f8b1 	bl	80097a0 <iprintf>
  // Clear timer update flag in case it is set at start
  if (__HAL_TIM_GET_FLAG(&htim8 , TIM_FLAG_UPDATE) != RESET)
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <main+0xa4>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	691b      	ldr	r3, [r3, #16]
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	2b01      	cmp	r3, #1
 800064a:	d104      	bne.n	8000656 <main+0x3e>
  __HAL_TIM_CLEAR_FLAG(&htim8 , TIM_FLAG_UPDATE);
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <main+0xa4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f06f 0201 	mvn.w	r2, #1
 8000654:	611a      	str	r2, [r3, #16]

  /*Start UART in interrupt mode, to waiting for message from Python client */
  HAL_UART_Receive_IT(&huart1, &recData, 1);
 8000656:	2201      	movs	r2, #1
 8000658:	4919      	ldr	r1, [pc, #100]	; (80006c0 <main+0xa8>)
 800065a:	481a      	ldr	r0, [pc, #104]	; (80006c4 <main+0xac>)
 800065c:	f003 fdab 	bl	80041b6 <HAL_UART_Receive_IT>
  //HAL_ADC_Start_DMA(&hadc1, (uint32_t *) pData, length);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000660:	f004 fd68 	bl	8005134 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  Queue1Handle =  osMessageQueueNew(1, sizeof(ADC_CONV), &Queue1_attributes);
 8000664:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <main+0xb0>)
 8000666:	210c      	movs	r1, #12
 8000668:	2001      	movs	r0, #1
 800066a:	f005 f851 	bl	8005710 <osMessageQueueNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a16      	ldr	r2, [pc, #88]	; (80006cc <main+0xb4>)
 8000672:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <main+0xb8>)
 8000676:	2100      	movs	r1, #0
 8000678:	4816      	ldr	r0, [pc, #88]	; (80006d4 <main+0xbc>)
 800067a:	f004 fda5 	bl	80051c8 <osThreadNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <main+0xc0>)
 8000682:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000684:	4a15      	ldr	r2, [pc, #84]	; (80006dc <main+0xc4>)
 8000686:	2100      	movs	r1, #0
 8000688:	4815      	ldr	r0, [pc, #84]	; (80006e0 <main+0xc8>)
 800068a:	f004 fd9d 	bl	80051c8 <osThreadNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <main+0xcc>)
 8000692:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000694:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <main+0xd0>)
 8000696:	2100      	movs	r1, #0
 8000698:	4814      	ldr	r0, [pc, #80]	; (80006ec <main+0xd4>)
 800069a:	f004 fd95 	bl	80051c8 <osThreadNew>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <main+0xd8>)
 80006a2:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of Event */
  EventHandle = osEventFlagsNew(&Event_attributes);
 80006a4:	4813      	ldr	r0, [pc, #76]	; (80006f4 <main+0xdc>)
 80006a6:	f004 fe3c 	bl	8005322 <osEventFlagsNew>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <main+0xe0>)
 80006ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006b0:	f004 fd64 	bl	800517c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <main+0x9c>
 80006b6:	bf00      	nop
 80006b8:	0800a664 	.word	0x0800a664
 80006bc:	20000164 	.word	0x20000164
 80006c0:	20000264 	.word	0x20000264
 80006c4:	200001ac 	.word	0x200001ac
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20000208 	.word	0x20000208
 80006d0:	0800a710 	.word	0x0800a710
 80006d4:	08000a91 	.word	0x08000a91
 80006d8:	200001f4 	.word	0x200001f4
 80006dc:	0800a734 	.word	0x0800a734
 80006e0:	08000b09 	.word	0x08000b09
 80006e4:	200001f8 	.word	0x200001f8
 80006e8:	0800a758 	.word	0x0800a758
 80006ec:	08000c39 	.word	0x08000c39
 80006f0:	200001fc 	.word	0x200001fc
 80006f4:	0800a78c 	.word	0x0800a78c
 80006f8:	20000204 	.word	0x20000204

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	; 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f009 f98e 	bl	8009a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <SystemClock_Config+0xd8>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <SystemClock_Config+0xd8>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <SystemClock_Config+0xd8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <SystemClock_Config+0xdc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a24      	ldr	r2, [pc, #144]	; (80007d8 <SystemClock_Config+0xdc>)
 8000746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <SystemClock_Config+0xdc>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	2310      	movs	r3, #16
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000768:	2300      	movs	r3, #0
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800076c:	2308      	movs	r3, #8
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000770:	23b4      	movs	r3, #180	; 0xb4
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000778:	2307      	movs	r3, #7
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4618      	mov	r0, r3
 8000782:	f002 fa6d 	bl	8002c60 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800078c:	f000 faf4 	bl	8000d78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000790:	f002 fa16 	bl	8002bc0 <HAL_PWREx_EnableOverDrive>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800079a:	f000 faed 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2105      	movs	r1, #5
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 fcc7 	bl	8003150 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007c8:	f000 fad6 	bl	8000d78 <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3750      	adds	r7, #80	; 0x50
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	463b      	mov	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <MX_ADC1_Init+0xd4>)
 80007f0:	4a30      	ldr	r2, [pc, #192]	; (80008b4 <MX_ADC1_Init+0xd8>)
 80007f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <MX_ADC1_Init+0xd4>)
 80007f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007fc:	4b2c      	ldr	r3, [pc, #176]	; (80008b0 <MX_ADC1_Init+0xd4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000802:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <MX_ADC1_Init+0xd4>)
 8000804:	2201      	movs	r2, #1
 8000806:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <MX_ADC1_Init+0xd4>)
 800080a:	2200      	movs	r2, #0
 800080c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <MX_ADC1_Init+0xd4>)
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <MX_ADC1_Init+0xd4>)
 8000818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800081c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_ADC1_Init+0xd4>)
 8000820:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <MX_ADC1_Init+0xd4>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800082c:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_ADC1_Init+0xd4>)
 800082e:	2203      	movs	r2, #3
 8000830:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <MX_ADC1_Init+0xd4>)
 8000834:	2201      	movs	r2, #1
 8000836:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_ADC1_Init+0xd4>)
 800083c:	2201      	movs	r2, #1
 800083e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000840:	481b      	ldr	r0, [pc, #108]	; (80008b0 <MX_ADC1_Init+0xd4>)
 8000842:	f000 fdbd 	bl	80013c0 <HAL_ADC_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800084c:	f000 fa94 	bl	8000d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000850:	230b      	movs	r3, #11
 8000852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000854:	2301      	movs	r3, #1
 8000856:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	4619      	mov	r1, r3
 8000860:	4813      	ldr	r0, [pc, #76]	; (80008b0 <MX_ADC1_Init+0xd4>)
 8000862:	f001 f82f 	bl	80018c4 <HAL_ADC_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800086c:	f000 fa84 	bl	8000d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000870:	230d      	movs	r3, #13
 8000872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <MX_ADC1_Init+0xd4>)
 800087e:	f001 f821 	bl	80018c4 <HAL_ADC_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000888:	f000 fa76 	bl	8000d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800088c:	2305      	movs	r3, #5
 800088e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000890:	2303      	movs	r3, #3
 8000892:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_ADC1_Init+0xd4>)
 800089a:	f001 f813 	bl	80018c4 <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80008a4:	f000 fa68 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000bc 	.word	0x200000bc
 80008b4:	40012000 	.word	0x40012000

080008b8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80008d4:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <MX_TIM8_Init+0x98>)
 80008d6:	4a1f      	ldr	r2, [pc, #124]	; (8000954 <MX_TIM8_Init+0x9c>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 18000-1;
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_TIM8_Init+0x98>)
 80008dc:	f244 624f 	movw	r2, #17999	; 0x464f
 80008e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_TIM8_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80008e8:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_TIM8_Init+0x98>)
 80008ea:	2263      	movs	r2, #99	; 0x63
 80008ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_TIM8_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_TIM8_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_TIM8_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000900:	4813      	ldr	r0, [pc, #76]	; (8000950 <MX_TIM8_Init+0x98>)
 8000902:	f002 fe77 	bl	80035f4 <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800090c:	f000 fa34 	bl	8000d78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	4619      	mov	r1, r3
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_TIM8_Init+0x98>)
 800091e:	f003 f8a9 	bl	8003a74 <HAL_TIM_ConfigClockSource>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8000928:	f000 fa26 	bl	8000d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800092c:	2320      	movs	r3, #32
 800092e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_TIM8_Init+0x98>)
 800093a:	f003 fad1 	bl	8003ee0 <HAL_TIMEx_MasterConfigSynchronization>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000944:	f000 fa18 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000164 	.word	0x20000164
 8000954:	40010400 	.word	0x40010400

08000958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <MX_USART1_UART_Init+0x50>)
 8000960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 800098a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800098e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000992:	f003 fb35 	bl	8004000 <HAL_UART_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 800099c:	f000 f9ec 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200001ac 	.word	0x200001ac
 80009a8:	40011000 	.word	0x40011000

080009ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_DMA_Init+0x3c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a0b      	ldr	r2, [pc, #44]	; (80009e8 <MX_DMA_Init+0x3c>)
 80009bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_DMA_Init+0x3c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2105      	movs	r1, #5
 80009d2:	2038      	movs	r0, #56	; 0x38
 80009d4:	f001 fae8 	bl	8001fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009d8:	2038      	movs	r0, #56	; 0x38
 80009da:	f001 fb01 	bl	8001fe0 <HAL_NVIC_EnableIRQ>

}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <MX_GPIO_Init+0x9c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <MX_GPIO_Init+0x9c>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_GPIO_Init+0x9c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_GPIO_Init+0x9c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a18      	ldr	r2, [pc, #96]	; (8000a88 <MX_GPIO_Init+0x9c>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_GPIO_Init+0x9c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_GPIO_Init+0x9c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a11      	ldr	r2, [pc, #68]	; (8000a88 <MX_GPIO_Init+0x9c>)
 8000a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_GPIO_Init+0x9c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000a5c:	480b      	ldr	r0, [pc, #44]	; (8000a8c <MX_GPIO_Init+0xa0>)
 8000a5e:	f002 f87b 	bl	8002b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000a62:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_GPIO_Init+0xa0>)
 8000a7c:	f001 fec0 	bl	8002800 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a80:	bf00      	nop
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40021800 	.word	0x40021800

08000a90 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]


	// Infinite loop
  for(;;)
  {
	osSemaphoreAcquire(CountingSem1Handle, osWaitForever);
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <StartTask1+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f004 fde3 	bl	800566c <osSemaphoreAcquire>



	ret = osMessageQueueGet(Queue1Handle, ADC_CONV , (uint8_t*) osPriorityNormal, osWaitForever);
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <StartTask1+0x68>)
 8000aa8:	6818      	ldr	r0, [r3, #0]
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	2218      	movs	r2, #24
 8000ab0:	4912      	ldr	r1, [pc, #72]	; (8000afc <StartTask1+0x6c>)
 8000ab2:	f004 ff01 	bl	80058b8 <osMessageQueueGet>
 8000ab6:	60f8      	str	r0, [r7, #12]
	if (ret!=0){
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d003      	beq.n	8000ac6 <StartTask1+0x36>
		printf("Error retrieving data \n");
 8000abe:	4810      	ldr	r0, [pc, #64]	; (8000b00 <StartTask1+0x70>)
 8000ac0:	f008 fed4 	bl	800986c <puts>
 8000ac4:	e011      	b.n	8000aea <StartTask1+0x5a>
	}
	else {
		//Transmit data to client over UART
		if(ADC_CONV[0] > 0){
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <StartTask1+0x6c>)
 8000ac8:	edd3 7a00 	vldr	s15, [r3]
 8000acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad4:	dd09      	ble.n	8000aea <StartTask1+0x5a>
			HAL_UART_Transmit(&huart1, (uint8_t*) ADC_CONV, 12, 5000);
 8000ad6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ada:	220c      	movs	r2, #12
 8000adc:	4907      	ldr	r1, [pc, #28]	; (8000afc <StartTask1+0x6c>)
 8000ade:	4809      	ldr	r0, [pc, #36]	; (8000b04 <StartTask1+0x74>)
 8000ae0:	f003 fade 	bl	80040a0 <HAL_UART_Transmit>
			HAL_Delay(100);
 8000ae4:	2064      	movs	r0, #100	; 0x64
 8000ae6:	f000 fc47 	bl	8001378 <HAL_Delay>
		}
	}

    osDelay(1);
 8000aea:	2001      	movs	r0, #1
 8000aec:	f004 fbfe 	bl	80052ec <osDelay>
	osSemaphoreAcquire(CountingSem1Handle, osWaitForever);
 8000af0:	e7d2      	b.n	8000a98 <StartTask1+0x8>
 8000af2:	bf00      	nop
 8000af4:	20000200 	.word	0x20000200
 8000af8:	20000208 	.word	0x20000208
 8000afc:	20000258 	.word	0x20000258
 8000b00:	0800a678 	.word	0x0800a678
 8000b04:	200001ac 	.word	0x200001ac

08000b08 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
   //USER CODE BEGIN StartTask2

	int ret;
	float * ADC_Ave_V;

	MemoryPoolHandle = osMemoryPoolNew(10, sizeof(ADC_Ave_V), &MemoryPool_attributes);
 8000b10:	4a3e      	ldr	r2, [pc, #248]	; (8000c0c <StartTask2+0x104>)
 8000b12:	2104      	movs	r1, #4
 8000b14:	200a      	movs	r0, #10
 8000b16:	f004 ff2d 	bl	8005974 <osMemoryPoolNew>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a3c      	ldr	r2, [pc, #240]	; (8000c10 <StartTask2+0x108>)
 8000b1e:	6013      	str	r3, [r2, #0]
   //Infinite loop
  for(;;)
  {

	osSemaphoreAcquire(CountingSem1Handle, osWaitForever);
 8000b20:	4b3c      	ldr	r3, [pc, #240]	; (8000c14 <StartTask2+0x10c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f004 fd9f 	bl	800566c <osSemaphoreAcquire>

	ADC_Ave_V =  (float *) osMemoryPoolAlloc(MemoryPoolHandle, 0U);
 8000b2e:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <StartTask2+0x108>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f004 fff3 	bl	8005b20 <osMemoryPoolAlloc>
 8000b3a:	6138      	str	r0, [r7, #16]


	uint32_t average = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < NCh; i++){
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
 8000b44:	e03e      	b.n	8000bc4 <StartTask2+0xbc>
	for (int j = 0; j < length/NCh; j++){
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e00f      	b.n	8000b6c <StartTask2+0x64>
		average += pData[j*NCh+i];
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	441a      	add	r2, r3
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a2f      	ldr	r2, [pc, #188]	; (8000c18 <StartTask2+0x110>)
 8000b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	4413      	add	r3, r2
 8000b64:	61fb      	str	r3, [r7, #28]
	for (int j = 0; j < length/NCh; j++){
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	2b09      	cmp	r3, #9
 8000b70:	ddec      	ble.n	8000b4c <StartTask2+0x44>
	}
	//Digital value 0-4095
	ADC_Ave[i] = (float) (average / (length/NCh));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	4a29      	ldr	r2, [pc, #164]	; (8000c1c <StartTask2+0x114>)
 8000b76:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7a:	08db      	lsrs	r3, r3, #3
 8000b7c:	ee07 3a90 	vmov	s15, r3
 8000b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b84:	4a26      	ldr	r2, [pc, #152]	; (8000c20 <StartTask2+0x118>)
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	edc3 7a00 	vstr	s15, [r3]
	//Convert to voltage
	ADC_Ave_V[i] = (float) (Vref/pow(2,12))* ADC_Ave [i];
 8000b90:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <StartTask2+0x11c>)
 8000b92:	edd3 7a00 	vldr	s15, [r3]
 8000b96:	eddf 6a24 	vldr	s13, [pc, #144]	; 8000c28 <StartTask2+0x120>
 8000b9a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000b9e:	4a20      	ldr	r2, [pc, #128]	; (8000c20 <StartTask2+0x118>)
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	edd3 7a00 	vldr	s15, [r3]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bb6:	edc3 7a00 	vstr	s15, [r3]
	average = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < NCh; i++){
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
 8000bc4:	69bb      	ldr	r3, [r7, #24]
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	ddbd      	ble.n	8000b46 <StartTask2+0x3e>
	}

	ret = osMessageQueuePut(Queue1Handle, ADC_Ave_V, osPriorityNormal, osWaitForever);
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <StartTask2+0x124>)
 8000bcc:	6818      	ldr	r0, [r3, #0]
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	2218      	movs	r2, #24
 8000bd4:	6939      	ldr	r1, [r7, #16]
 8000bd6:	f004 fe0f 	bl	80057f8 <osMessageQueuePut>
 8000bda:	60f8      	str	r0, [r7, #12]

	if (ret!=0){
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d003      	beq.n	8000bea <StartTask2+0xe2>
		  printf("Error putting data in queue\n");
 8000be2:	4813      	ldr	r0, [pc, #76]	; (8000c30 <StartTask2+0x128>)
 8000be4:	f008 fe42 	bl	800986c <puts>
 8000be8:	e00c      	b.n	8000c04 <StartTask2+0xfc>
	}
	else {
		// Free the block of memory
		ret = osMemoryPoolFree(MemoryPoolHandle , ADC_Ave_V);
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <StartTask2+0x108>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	6939      	ldr	r1, [r7, #16]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f005 f80b 	bl	8005c0c <osMemoryPoolFree>
 8000bf6:	60f8      	str	r0, [r7, #12]
		if (ret !=0)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <StartTask2+0xfc>
			printf("Error freeing memory from memory pool\n");
 8000bfe:	480d      	ldr	r0, [pc, #52]	; (8000c34 <StartTask2+0x12c>)
 8000c00:	f008 fe34 	bl	800986c <puts>
	}

    ///osThreadYield();
	  osDelay(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f004 fb71 	bl	80052ec <osDelay>
  {
 8000c0a:	e789      	b.n	8000b20 <StartTask2+0x18>
 8000c0c:	20000018 	.word	0x20000018
 8000c10:	2000020c 	.word	0x2000020c
 8000c14:	20000200 	.word	0x20000200
 8000c18:	20000210 	.word	0x20000210
 8000c1c:	cccccccd 	.word	0xcccccccd
 8000c20:	2000024c 	.word	0x2000024c
 8000c24:	20000030 	.word	0x20000030
 8000c28:	45800000 	.word	0x45800000
 8000c2c:	20000208 	.word	0x20000208
 8000c30:	0800a690 	.word	0x0800a690
 8000c34:	0800a6ac 	.word	0x0800a6ac

08000c38 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */

  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(EventHandle, FLAG, osFlagsWaitAny, osWaitForever);
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <StartTask3+0x88>)
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2105      	movs	r1, #5
 8000c4c:	f004 fc1e 	bl	800548c <osEventFlagsWait>
	  printf("inside task \n");
 8000c50:	481c      	ldr	r0, [pc, #112]	; (8000cc4 <StartTask3+0x8c>)
 8000c52:	f008 fe0b 	bl	800986c <puts>
		if(recData == 'g'){
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <StartTask3+0x90>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b67      	cmp	r3, #103	; 0x67
 8000c5c:	d10e      	bne.n	8000c7c <StartTask3+0x44>
			  /*Message to start ADC received!, turn on the red led*/
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c64:	4819      	ldr	r0, [pc, #100]	; (8000ccc <StartTask3+0x94>)
 8000c66:	f001 ff77 	bl	8002b58 <HAL_GPIO_WritePin>
			  /*Start the timer*/
			HAL_TIM_Base_Start(&htim8);
 8000c6a:	4819      	ldr	r0, [pc, #100]	; (8000cd0 <StartTask3+0x98>)
 8000c6c:	f002 fd12 	bl	8003694 <HAL_TIM_Base_Start>
			  /*Start ADC with DMA*/
			  /* Start ADC sampling using DMA */
		    HAL_ADC_Start_DMA(&hadc1, (uint32_t *) pData, length);
 8000c70:	221e      	movs	r2, #30
 8000c72:	4918      	ldr	r1, [pc, #96]	; (8000cd4 <StartTask3+0x9c>)
 8000c74:	4818      	ldr	r0, [pc, #96]	; (8000cd8 <StartTask3+0xa0>)
 8000c76:	f000 fcf7 	bl	8001668 <HAL_ADC_Start_DMA>
 8000c7a:	e012      	b.n	8000ca2 <StartTask3+0x6a>
		}

		else if (recData == 'r'){
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <StartTask3+0x90>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b72      	cmp	r3, #114	; 0x72
 8000c82:	d10e      	bne.n	8000ca2 <StartTask3+0x6a>
			/*Turn off red led*/
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8a:	4810      	ldr	r0, [pc, #64]	; (8000ccc <StartTask3+0x94>)
 8000c8c:	f001 ff64 	bl	8002b58 <HAL_GPIO_WritePin>
			/*Turn off red led*/
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c96:	480d      	ldr	r0, [pc, #52]	; (8000ccc <StartTask3+0x94>)
 8000c98:	f001 ff5e 	bl	8002b58 <HAL_GPIO_WritePin>
			/*Stop the timer*/
			HAL_TIM_Base_Stop(&htim8);
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <StartTask3+0x98>)
 8000c9e:	f002 fd61 	bl	8003764 <HAL_TIM_Base_Stop>
		}

		osEventFlagsClear(EventHandle, FLAG);
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <StartTask3+0x88>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2105      	movs	r1, #5
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 fbbd 	bl	8005428 <osEventFlagsClear>

		 // Need to put this to generate an interrupt for the next reception of byte


		recData = 'n';
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <StartTask3+0x90>)
 8000cb0:	226e      	movs	r2, #110	; 0x6e
 8000cb2:	701a      	strb	r2, [r3, #0]
		// Terminate the task and move to the next one.

		// osThreadTerminate(Task3Handle);

		osDelay(1000);
 8000cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb8:	f004 fb18 	bl	80052ec <osDelay>
	  osEventFlagsWait(EventHandle, FLAG, osFlagsWaitAny, osWaitForever);
 8000cbc:	e7c0      	b.n	8000c40 <StartTask3+0x8>
 8000cbe:	bf00      	nop
 8000cc0:	20000204 	.word	0x20000204
 8000cc4:	0800a6d4 	.word	0x0800a6d4
 8000cc8:	20000264 	.word	0x20000264
 8000ccc:	40021800 	.word	0x40021800
 8000cd0:	20000164 	.word	0x20000164
 8000cd4:	20000210 	.word	0x20000210
 8000cd8:	200000bc 	.word	0x200000bc

08000cdc <HAL_UART_RxCpltCallback>:
}


/*Callback function to receive message from Python client*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	// Set flag when MCU receives message from python client

	printf("inside interrupt \n\r");
 8000ce4:	4809      	ldr	r0, [pc, #36]	; (8000d0c <HAL_UART_RxCpltCallback+0x30>)
 8000ce6:	f008 fd5b 	bl	80097a0 <iprintf>
	osEventFlagsSet(EventHandle, FLAG);
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_UART_RxCpltCallback+0x34>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2105      	movs	r1, #5
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f004 fb55 	bl	80053a0 <osEventFlagsSet>
	__NOP();
 8000cf6:	bf00      	nop
	HAL_UART_Receive_IT(&huart1 , &recData , 1);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4906      	ldr	r1, [pc, #24]	; (8000d14 <HAL_UART_RxCpltCallback+0x38>)
 8000cfc:	4806      	ldr	r0, [pc, #24]	; (8000d18 <HAL_UART_RxCpltCallback+0x3c>)
 8000cfe:	f003 fa5a 	bl	80041b6 <HAL_UART_Receive_IT>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	0800a6e4 	.word	0x0800a6e4
 8000d10:	20000204 	.word	0x20000204
 8000d14:	20000264 	.word	0x20000264
 8000d18:	200001ac 	.word	0x200001ac

08000d1c <HAL_ADC_ConvCpltCallback>:

/*Callback function for data acquisition*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	CountingSem1Handle = osSemaphoreNew(2, 2, &CountingSem1_attributes);
 8000d24:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000d26:	2102      	movs	r1, #2
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f004 fc15 	bl	8005558 <osSemaphoreNew>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <HAL_ADC_ConvCpltCallback+0x30>)
 8000d32:	6013      	str	r3, [r2, #0]
	/*Toggle green led for every ADC conversion*/
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000d34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d38:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_ADC_ConvCpltCallback+0x34>)
 8000d3a:	f001 ff26 	bl	8002b8a <HAL_GPIO_TogglePin>

}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	0800a77c 	.word	0x0800a77c
 8000d4c:	20000200 	.word	0x20000200
 8000d50:	40021800 	.word	0x40021800

08000d54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d101      	bne.n	8000d6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d66:	f000 fae7 	bl	8001338 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40001000 	.word	0x40001000

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <Error_Handler+0x8>
	...

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_MspInit+0x54>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <HAL_MspInit+0x54>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <HAL_MspInit+0x54>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_MspInit+0x54>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <HAL_MspInit+0x54>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_MspInit+0x54>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	f06f 0001 	mvn.w	r0, #1
 8000dca:	f001 f8ed 	bl	8001fa8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800

08000ddc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a40      	ldr	r2, [pc, #256]	; (8000efc <HAL_ADC_MspInit+0x120>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d179      	bne.n	8000ef2 <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b3f      	ldr	r3, [pc, #252]	; (8000f00 <HAL_ADC_MspInit+0x124>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a3e      	ldr	r2, [pc, #248]	; (8000f00 <HAL_ADC_MspInit+0x124>)
 8000e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <HAL_ADC_MspInit+0x124>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <HAL_ADC_MspInit+0x124>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a37      	ldr	r2, [pc, #220]	; (8000f00 <HAL_ADC_MspInit+0x124>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <HAL_ADC_MspInit+0x124>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <HAL_ADC_MspInit+0x124>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a30      	ldr	r2, [pc, #192]	; (8000f00 <HAL_ADC_MspInit+0x124>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b2e      	ldr	r3, [pc, #184]	; (8000f00 <HAL_ADC_MspInit+0x124>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
 8000e50:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC3     ------> ADC1_IN13
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000e52:	230a      	movs	r3, #10
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e56:	2303      	movs	r3, #3
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4827      	ldr	r0, [pc, #156]	; (8000f04 <HAL_ADC_MspInit+0x128>)
 8000e66:	f001 fccb 	bl	8002800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e6a:	2320      	movs	r3, #32
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4822      	ldr	r0, [pc, #136]	; (8000f08 <HAL_ADC_MspInit+0x12c>)
 8000e7e:	f001 fcbf 	bl	8002800 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e82:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <HAL_ADC_MspInit+0x130>)
 8000e84:	4a22      	ldr	r2, [pc, #136]	; (8000f10 <HAL_ADC_MspInit+0x134>)
 8000e86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e88:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <HAL_ADC_MspInit+0x130>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <HAL_ADC_MspInit+0x130>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <HAL_ADC_MspInit+0x130>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <HAL_ADC_MspInit+0x130>)
 8000e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <HAL_ADC_MspInit+0x130>)
 8000ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ea8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <HAL_ADC_MspInit+0x130>)
 8000eac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_ADC_MspInit+0x130>)
 8000eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <HAL_ADC_MspInit+0x130>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_ADC_MspInit+0x130>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ec6:	4811      	ldr	r0, [pc, #68]	; (8000f0c <HAL_ADC_MspInit+0x130>)
 8000ec8:	f001 f898 	bl	8001ffc <HAL_DMA_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000ed2:	f7ff ff51 	bl	8000d78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <HAL_ADC_MspInit+0x130>)
 8000eda:	639a      	str	r2, [r3, #56]	; 0x38
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <HAL_ADC_MspInit+0x130>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	2012      	movs	r0, #18
 8000ee8:	f001 f85e 	bl	8001fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000eec:	2012      	movs	r0, #18
 8000eee:	f001 f877 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40012000 	.word	0x40012000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020800 	.word	0x40020800
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	20000104 	.word	0x20000104
 8000f10:	40026410 	.word	0x40026410

08000f14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <HAL_TIM_Base_MspInit+0x3c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10d      	bne.n	8000f42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_TIM_Base_MspInit+0x40>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <HAL_TIM_Base_MspInit+0x40>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <HAL_TIM_Base_MspInit+0x40>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40010400 	.word	0x40010400
 8000f54:	40023800 	.word	0x40023800

08000f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a1d      	ldr	r2, [pc, #116]	; (8000fec <HAL_UART_MspInit+0x94>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d134      	bne.n	8000fe4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_UART_MspInit+0x98>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <HAL_UART_MspInit+0x9c>)
 8000fd0:	f001 fc16 	bl	8002800 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2105      	movs	r1, #5
 8000fd8:	2025      	movs	r0, #37	; 0x25
 8000fda:	f000 ffe5 	bl	8001fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fde:	2025      	movs	r0, #37	; 0x25
 8000fe0:	f000 fffe 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40011000 	.word	0x40011000
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08e      	sub	sp, #56	; 0x38
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	4b33      	ldr	r3, [pc, #204]	; (80010dc <HAL_InitTick+0xe4>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	4a32      	ldr	r2, [pc, #200]	; (80010dc <HAL_InitTick+0xe4>)
 8001012:	f043 0310 	orr.w	r3, r3, #16
 8001016:	6413      	str	r3, [r2, #64]	; 0x40
 8001018:	4b30      	ldr	r3, [pc, #192]	; (80010dc <HAL_InitTick+0xe4>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f003 0310 	and.w	r3, r3, #16
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001024:	f107 0210 	add.w	r2, r7, #16
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4611      	mov	r1, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f002 faae 	bl	8003590 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103a:	2b00      	cmp	r3, #0
 800103c:	d103      	bne.n	8001046 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800103e:	f002 fa7f 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 8001042:	6378      	str	r0, [r7, #52]	; 0x34
 8001044:	e004      	b.n	8001050 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001046:	f002 fa7b 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 800104a:	4603      	mov	r3, r0
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001052:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <HAL_InitTick+0xe8>)
 8001054:	fba2 2303 	umull	r2, r3, r2, r3
 8001058:	0c9b      	lsrs	r3, r3, #18
 800105a:	3b01      	subs	r3, #1
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <HAL_InitTick+0xec>)
 8001060:	4a21      	ldr	r2, [pc, #132]	; (80010e8 <HAL_InitTick+0xf0>)
 8001062:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <HAL_InitTick+0xec>)
 8001066:	f240 32e7 	movw	r2, #999	; 0x3e7
 800106a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800106c:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <HAL_InitTick+0xec>)
 800106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001070:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_InitTick+0xec>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_InitTick+0xec>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_InitTick+0xec>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001084:	4817      	ldr	r0, [pc, #92]	; (80010e4 <HAL_InitTick+0xec>)
 8001086:	f002 fab5 	bl	80035f4 <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001090:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001094:	2b00      	cmp	r3, #0
 8001096:	d11b      	bne.n	80010d0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001098:	4812      	ldr	r0, [pc, #72]	; (80010e4 <HAL_InitTick+0xec>)
 800109a:	f002 fb8b 	bl	80037b4 <HAL_TIM_Base_Start_IT>
 800109e:	4603      	mov	r3, r0
 80010a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80010a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d111      	bne.n	80010d0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010ac:	2036      	movs	r0, #54	; 0x36
 80010ae:	f000 ff97 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d808      	bhi.n	80010ca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	2036      	movs	r0, #54	; 0x36
 80010be:	f000 ff73 	bl	8001fa8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_InitTick+0xf4>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	e002      	b.n	80010d0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3738      	adds	r7, #56	; 0x38
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	431bde83 	.word	0x431bde83
 80010e4:	20000268 	.word	0x20000268
 80010e8:	40001000 	.word	0x40001000
 80010ec:	20000038 	.word	0x20000038

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f4:	e7fe      	b.n	80010f4 <NMI_Handler+0x4>

080010f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <MemManage_Handler+0x4>

08001102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <UsageFault_Handler+0x4>

0800110e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <ADC_IRQHandler+0x10>)
 8001122:	f000 f990 	bl	8001446 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200000bc 	.word	0x200000bc

08001130 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <USART1_IRQHandler+0x10>)
 8001136:	f003 f863 	bl	8004200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200001ac 	.word	0x200001ac

08001144 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <TIM6_DAC_IRQHandler+0x10>)
 800114a:	f002 fba3 	bl	8003894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000268 	.word	0x20000268

08001158 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <DMA2_Stream0_IRQHandler+0x10>)
 800115e:	f001 f8e5 	bl	800232c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000104 	.word	0x20000104

0800116c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	e00a      	b.n	8001194 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800117e:	f3af 8000 	nop.w
 8001182:	4601      	mov	r1, r0
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	60ba      	str	r2, [r7, #8]
 800118a:	b2ca      	uxtb	r2, r1
 800118c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	dbf0      	blt.n	800117e <_read+0x12>
  }

  return len;
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ce:	605a      	str	r2, [r3, #4]
  return 0;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <_isatty>:

int _isatty(int file)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <_sbrk+0x5c>)
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <_sbrk+0x60>)
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <_sbrk+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <_sbrk+0x64>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <_sbrk+0x68>)
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <_sbrk+0x64>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	429a      	cmp	r2, r3
 800123e:	d207      	bcs.n	8001250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001240:	f008 fc98 	bl	8009b74 <__errno>
 8001244:	4603      	mov	r3, r0
 8001246:	220c      	movs	r2, #12
 8001248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	e009      	b.n	8001264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <_sbrk+0x64>)
 8001260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001262:	68fb      	ldr	r3, [r7, #12]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20030000 	.word	0x20030000
 8001270:	00000400 	.word	0x00000400
 8001274:	200002b0 	.word	0x200002b0
 8001278:	20004df0 	.word	0x20004df0

0800127c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <SystemInit+0x20>)
 8001282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <SystemInit+0x20>)
 8001288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800128c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012a4:	f7ff ffea 	bl	800127c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012aa:	490d      	ldr	r1, [pc, #52]	; (80012e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c0:	4c0a      	ldr	r4, [pc, #40]	; (80012ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012ce:	f008 fc57 	bl	8009b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d2:	f7ff f9a1 	bl	8000618 <main>
  bx  lr    
 80012d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80012e4:	0800a800 	.word	0x0800a800
  ldr r2, =_sbss
 80012e8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80012ec:	20004dec 	.word	0x20004dec

080012f0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <CAN1_RX0_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <HAL_Init+0x40>)
 80012fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001302:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <HAL_Init+0x40>)
 800130a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_Init+0x40>)
 8001316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 fe38 	bl	8001f92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	2000      	movs	r0, #0
 8001324:	f7ff fe68 	bl	8000ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff fd2c 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023c00 	.word	0x40023c00

08001338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_IncTick+0x20>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x24>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <HAL_IncTick+0x24>)
 800134a:	6013      	str	r3, [r2, #0]
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	2000003c 	.word	0x2000003c
 800135c:	200002b4 	.word	0x200002b4

08001360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return uwTick;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_GetTick+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	200002b4 	.word	0x200002b4

08001378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001380:	f7ff ffee 	bl	8001360 <HAL_GetTick>
 8001384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001390:	d005      	beq.n	800139e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_Delay+0x44>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4413      	add	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800139e:	bf00      	nop
 80013a0:	f7ff ffde 	bl	8001360 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d8f7      	bhi.n	80013a0 <HAL_Delay+0x28>
  {
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000003c 	.word	0x2000003c

080013c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e033      	b.n	800143e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d109      	bne.n	80013f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fcfc 	bl	8000ddc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d118      	bne.n	8001430 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001406:	f023 0302 	bic.w	r3, r3, #2
 800140a:	f043 0202 	orr.w	r2, r3, #2
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 fb88 	bl	8001b28 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f023 0303 	bic.w	r3, r3, #3
 8001426:	f043 0201 	orr.w	r2, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
 800142e:	e001      	b.n	8001434 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800143c:	7bfb      	ldrb	r3, [r7, #15]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d049      	beq.n	8001510 <HAL_ADC_IRQHandler+0xca>
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d046      	beq.n	8001510 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	2b00      	cmp	r3, #0
 800148c:	d105      	bne.n	800149a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d12b      	bne.n	8001500 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d127      	bne.n	8001500 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d119      	bne.n	8001500 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0220 	bic.w	r2, r2, #32
 80014da:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d105      	bne.n	8001500 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f043 0201 	orr.w	r2, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fc0b 	bl	8000d1c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f06f 0212 	mvn.w	r2, #18
 800150e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d057      	beq.n	80015d6 <HAL_ADC_IRQHandler+0x190>
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d054      	beq.n	80015d6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f003 0310 	and.w	r3, r3, #16
 8001534:	2b00      	cmp	r3, #0
 8001536:	d105      	bne.n	8001544 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d139      	bne.n	80015c6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001558:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800156a:	2b00      	cmp	r3, #0
 800156c:	d12b      	bne.n	80015c6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001578:	2b00      	cmp	r3, #0
 800157a:	d124      	bne.n	80015c6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001586:	2b00      	cmp	r3, #0
 8001588:	d11d      	bne.n	80015c6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800158e:	2b00      	cmp	r3, #0
 8001590:	d119      	bne.n	80015c6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015a0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d105      	bne.n	80015c6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f043 0201 	orr.w	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fc2c 	bl	8001e24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f06f 020c 	mvn.w	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d017      	beq.n	800161c <HAL_ADC_IRQHandler+0x1d6>
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d014      	beq.n	800161c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d10d      	bne.n	800161c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f945 	bl	800189c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f06f 0201 	mvn.w	r2, #1
 800161a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0320 	and.w	r3, r3, #32
 8001622:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800162a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d015      	beq.n	800165e <HAL_ADC_IRQHandler+0x218>
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d012      	beq.n	800165e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	f043 0202 	orr.w	r2, r3, #2
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f06f 0220 	mvn.w	r2, #32
 800164c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f92e 	bl	80018b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f06f 0220 	mvn.w	r2, #32
 800165c:	601a      	str	r2, [r3, #0]
  }
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_ADC_Start_DMA+0x1e>
 8001682:	2302      	movs	r3, #2
 8001684:	e0e9      	b.n	800185a <HAL_ADC_Start_DMA+0x1f2>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b01      	cmp	r3, #1
 800169a:	d018      	beq.n	80016ce <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016ac:	4b6d      	ldr	r3, [pc, #436]	; (8001864 <HAL_ADC_Start_DMA+0x1fc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6d      	ldr	r2, [pc, #436]	; (8001868 <HAL_ADC_Start_DMA+0x200>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0c9a      	lsrs	r2, r3, #18
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80016c0:	e002      	b.n	80016c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f9      	bne.n	80016c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016dc:	d107      	bne.n	80016ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ec:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	f040 80a1 	bne.w	8001840 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171c:	2b00      	cmp	r3, #0
 800171e:	d007      	beq.n	8001730 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001728:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800173c:	d106      	bne.n	800174c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f023 0206 	bic.w	r2, r3, #6
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	645a      	str	r2, [r3, #68]	; 0x44
 800174a:	e002      	b.n	8001752 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800175a:	4b44      	ldr	r3, [pc, #272]	; (800186c <HAL_ADC_Start_DMA+0x204>)
 800175c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001762:	4a43      	ldr	r2, [pc, #268]	; (8001870 <HAL_ADC_Start_DMA+0x208>)
 8001764:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176a:	4a42      	ldr	r2, [pc, #264]	; (8001874 <HAL_ADC_Start_DMA+0x20c>)
 800176c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001772:	4a41      	ldr	r2, [pc, #260]	; (8001878 <HAL_ADC_Start_DMA+0x210>)
 8001774:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800177e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800178e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800179e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	334c      	adds	r3, #76	; 0x4c
 80017aa:	4619      	mov	r1, r3
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f000 fcd2 	bl	8002158 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d12a      	bne.n	8001816 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a2d      	ldr	r2, [pc, #180]	; (800187c <HAL_ADC_Start_DMA+0x214>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d015      	beq.n	80017f6 <HAL_ADC_Start_DMA+0x18e>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a2c      	ldr	r2, [pc, #176]	; (8001880 <HAL_ADC_Start_DMA+0x218>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d105      	bne.n	80017e0 <HAL_ADC_Start_DMA+0x178>
 80017d4:	4b25      	ldr	r3, [pc, #148]	; (800186c <HAL_ADC_Start_DMA+0x204>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 031f 	and.w	r3, r3, #31
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00a      	beq.n	80017f6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a27      	ldr	r2, [pc, #156]	; (8001884 <HAL_ADC_Start_DMA+0x21c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d136      	bne.n	8001858 <HAL_ADC_Start_DMA+0x1f0>
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_ADC_Start_DMA+0x204>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d130      	bne.n	8001858 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d129      	bne.n	8001858 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	e020      	b.n	8001858 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a18      	ldr	r2, [pc, #96]	; (800187c <HAL_ADC_Start_DMA+0x214>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d11b      	bne.n	8001858 <HAL_ADC_Start_DMA+0x1f0>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d114      	bne.n	8001858 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	e00b      	b.n	8001858 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f043 0210 	orr.w	r2, r3, #16
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001850:	f043 0201 	orr.w	r2, r3, #1
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000034 	.word	0x20000034
 8001868:	431bde83 	.word	0x431bde83
 800186c:	40012300 	.word	0x40012300
 8001870:	08001d21 	.word	0x08001d21
 8001874:	08001ddb 	.word	0x08001ddb
 8001878:	08001df7 	.word	0x08001df7
 800187c:	40012000 	.word	0x40012000
 8001880:	40012100 	.word	0x40012100
 8001884:	40012200 	.word	0x40012200

08001888 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x1c>
 80018dc:	2302      	movs	r3, #2
 80018de:	e113      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x244>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b09      	cmp	r3, #9
 80018ee:	d925      	bls.n	800193c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68d9      	ldr	r1, [r3, #12]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	3b1e      	subs	r3, #30
 8001906:	2207      	movs	r2, #7
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43da      	mvns	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	400a      	ands	r2, r1
 8001914:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68d9      	ldr	r1, [r3, #12]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	4618      	mov	r0, r3
 8001928:	4603      	mov	r3, r0
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4403      	add	r3, r0
 800192e:	3b1e      	subs	r3, #30
 8001930:	409a      	lsls	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	e022      	b.n	8001982 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6919      	ldr	r1, [r3, #16]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	b29b      	uxth	r3, r3
 8001948:	461a      	mov	r2, r3
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	2207      	movs	r2, #7
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	400a      	ands	r2, r1
 800195e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6919      	ldr	r1, [r3, #16]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	4603      	mov	r3, r0
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4403      	add	r3, r0
 8001978:	409a      	lsls	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b06      	cmp	r3, #6
 8001988:	d824      	bhi.n	80019d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	3b05      	subs	r3, #5
 800199c:	221f      	movs	r2, #31
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43da      	mvns	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	400a      	ands	r2, r1
 80019aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3b05      	subs	r3, #5
 80019c6:	fa00 f203 	lsl.w	r2, r0, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	635a      	str	r2, [r3, #52]	; 0x34
 80019d2:	e04c      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d824      	bhi.n	8001a26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	3b23      	subs	r3, #35	; 0x23
 80019ee:	221f      	movs	r2, #31
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43da      	mvns	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	400a      	ands	r2, r1
 80019fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	3b23      	subs	r3, #35	; 0x23
 8001a18:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	631a      	str	r2, [r3, #48]	; 0x30
 8001a24:	e023      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	3b41      	subs	r3, #65	; 0x41
 8001a38:	221f      	movs	r2, #31
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	400a      	ands	r2, r1
 8001a46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	3b41      	subs	r3, #65	; 0x41
 8001a62:	fa00 f203 	lsl.w	r2, r0, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <HAL_ADC_ConfigChannel+0x250>)
 8001a70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a28      	ldr	r2, [pc, #160]	; (8001b18 <HAL_ADC_ConfigChannel+0x254>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d10f      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x1d8>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b12      	cmp	r3, #18
 8001a82:	d10b      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1d      	ldr	r2, [pc, #116]	; (8001b18 <HAL_ADC_ConfigChannel+0x254>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12b      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x23a>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a1c      	ldr	r2, [pc, #112]	; (8001b1c <HAL_ADC_ConfigChannel+0x258>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d003      	beq.n	8001ab8 <HAL_ADC_ConfigChannel+0x1f4>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b11      	cmp	r3, #17
 8001ab6:	d122      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <HAL_ADC_ConfigChannel+0x258>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d111      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_ADC_ConfigChannel+0x25c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a11      	ldr	r2, [pc, #68]	; (8001b24 <HAL_ADC_ConfigChannel+0x260>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	0c9a      	lsrs	r2, r3, #18
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001af0:	e002      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f9      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	40012300 	.word	0x40012300
 8001b18:	40012000 	.word	0x40012000
 8001b1c:	10000012 	.word	0x10000012
 8001b20:	20000034 	.word	0x20000034
 8001b24:	431bde83 	.word	0x431bde83

08001b28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b30:	4b79      	ldr	r3, [pc, #484]	; (8001d18 <ADC_Init+0x1f0>)
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6859      	ldr	r1, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	021a      	lsls	r2, r3, #8
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ba2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6899      	ldr	r1, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bba:	4a58      	ldr	r2, [pc, #352]	; (8001d1c <ADC_Init+0x1f4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d022      	beq.n	8001c06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6899      	ldr	r1, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6899      	ldr	r1, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	e00f      	b.n	8001c26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c24:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0202 	bic.w	r2, r2, #2
 8001c34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6899      	ldr	r1, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7e1b      	ldrb	r3, [r3, #24]
 8001c40:	005a      	lsls	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d01b      	beq.n	8001c8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c62:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6859      	ldr	r1, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	035a      	lsls	r2, r3, #13
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	e007      	b.n	8001c9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c9a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	051a      	lsls	r2, r3, #20
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6899      	ldr	r1, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cde:	025a      	lsls	r2, r3, #9
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6899      	ldr	r1, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	029a      	lsls	r2, r3, #10
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	609a      	str	r2, [r3, #8]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	40012300 	.word	0x40012300
 8001d1c:	0f000001 	.word	0x0f000001

08001d20 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d13c      	bne.n	8001db4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d12b      	bne.n	8001dac <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d127      	bne.n	8001dac <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d119      	bne.n	8001dac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0220 	bic.w	r2, r2, #32
 8001d86:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d105      	bne.n	8001dac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f043 0201 	orr.w	r2, r3, #1
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f7fe ffb5 	bl	8000d1c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001db2:	e00e      	b.n	8001dd2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f7ff fd75 	bl	80018b0 <HAL_ADC_ErrorCallback>
}
 8001dc6:	e004      	b.n	8001dd2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	4798      	blx	r3
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff fd4d 	bl	8001888 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b084      	sub	sp, #16
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e02:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2240      	movs	r2, #64	; 0x40
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f043 0204 	orr.w	r2, r3, #4
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f7ff fd4a 	bl	80018b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <__NVIC_SetPriorityGrouping>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	60d3      	str	r3, [r2, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_GetPriorityGrouping>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <__NVIC_GetPriorityGrouping+0x18>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	f003 0307 	and.w	r3, r3, #7
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_EnableIRQ>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	db0b      	blt.n	8001ec6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	f003 021f 	and.w	r2, r3, #31
 8001eb4:	4907      	ldr	r1, [pc, #28]	; (8001ed4 <__NVIC_EnableIRQ+0x38>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000e100 	.word	0xe000e100

08001ed8 <__NVIC_SetPriority>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	; (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	; (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ff4c 	bl	8001e38 <__NVIC_SetPriorityGrouping>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fba:	f7ff ff61 	bl	8001e80 <__NVIC_GetPriorityGrouping>
 8001fbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68b9      	ldr	r1, [r7, #8]
 8001fc4:	6978      	ldr	r0, [r7, #20]
 8001fc6:	f7ff ffb1 	bl	8001f2c <NVIC_EncodePriority>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff80 	bl	8001ed8 <__NVIC_SetPriority>
}
 8001fd8:	bf00      	nop
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff54 	bl	8001e9c <__NVIC_EnableIRQ>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff f9aa 	bl	8001360 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e099      	b.n	800214c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002038:	e00f      	b.n	800205a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800203a:	f7ff f991 	bl	8001360 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b05      	cmp	r3, #5
 8002046:	d908      	bls.n	800205a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2220      	movs	r2, #32
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2203      	movs	r2, #3
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e078      	b.n	800214c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e8      	bne.n	800203a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	4b38      	ldr	r3, [pc, #224]	; (8002154 <HAL_DMA_Init+0x158>)
 8002074:	4013      	ands	r3, r2
 8002076:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002086:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002092:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d107      	bne.n	80020c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	4313      	orrs	r3, r2
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f023 0307 	bic.w	r3, r3, #7
 80020da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d117      	bne.n	800211e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00e      	beq.n	800211e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fb01 	bl	8002708 <DMA_CheckFifoParam>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2240      	movs	r2, #64	; 0x40
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800211a:	2301      	movs	r3, #1
 800211c:	e016      	b.n	800214c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fab8 	bl	800269c <DMA_CalcBaseAndBitshift>
 800212c:	4603      	mov	r3, r0
 800212e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	223f      	movs	r2, #63	; 0x3f
 8002136:	409a      	lsls	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	f010803f 	.word	0xf010803f

08002158 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_DMA_Start_IT+0x26>
 800217a:	2302      	movs	r3, #2
 800217c:	e040      	b.n	8002200 <HAL_DMA_Start_IT+0xa8>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b01      	cmp	r3, #1
 8002190:	d12f      	bne.n	80021f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fa4a 	bl	8002640 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	223f      	movs	r2, #63	; 0x3f
 80021b2:	409a      	lsls	r2, r3
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0216 	orr.w	r2, r2, #22
 80021c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d007      	beq.n	80021e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0208 	orr.w	r2, r2, #8
 80021de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e005      	b.n	80021fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
 80021fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002216:	f7ff f8a3 	bl	8001360 <HAL_GetTick>
 800221a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d008      	beq.n	800223a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2280      	movs	r2, #128	; 0x80
 800222c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e052      	b.n	80022e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0216 	bic.w	r2, r2, #22
 8002248:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695a      	ldr	r2, [r3, #20]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002258:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d103      	bne.n	800226a <HAL_DMA_Abort+0x62>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002266:	2b00      	cmp	r3, #0
 8002268:	d007      	beq.n	800227a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0208 	bic.w	r2, r2, #8
 8002278:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800228a:	e013      	b.n	80022b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800228c:	f7ff f868 	bl	8001360 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b05      	cmp	r3, #5
 8002298:	d90c      	bls.n	80022b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2220      	movs	r2, #32
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2203      	movs	r2, #3
 80022a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e015      	b.n	80022e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1e4      	bne.n	800228c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	223f      	movs	r2, #63	; 0x3f
 80022c8:	409a      	lsls	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d004      	beq.n	8002306 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2280      	movs	r2, #128	; 0x80
 8002300:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e00c      	b.n	8002320 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2205      	movs	r2, #5
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002338:	4b8e      	ldr	r3, [pc, #568]	; (8002574 <HAL_DMA_IRQHandler+0x248>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a8e      	ldr	r2, [pc, #568]	; (8002578 <HAL_DMA_IRQHandler+0x24c>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	0a9b      	lsrs	r3, r3, #10
 8002344:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002356:	2208      	movs	r2, #8
 8002358:	409a      	lsls	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01a      	beq.n	8002398 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d013      	beq.n	8002398 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0204 	bic.w	r2, r2, #4
 800237e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002384:	2208      	movs	r2, #8
 8002386:	409a      	lsls	r2, r3
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002390:	f043 0201 	orr.w	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239c:	2201      	movs	r2, #1
 800239e:	409a      	lsls	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d012      	beq.n	80023ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ba:	2201      	movs	r2, #1
 80023bc:	409a      	lsls	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c6:	f043 0202 	orr.w	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d2:	2204      	movs	r2, #4
 80023d4:	409a      	lsls	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4013      	ands	r3, r2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d012      	beq.n	8002404 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00b      	beq.n	8002404 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f0:	2204      	movs	r2, #4
 80023f2:	409a      	lsls	r2, r3
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	f043 0204 	orr.w	r2, r3, #4
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	2210      	movs	r2, #16
 800240a:	409a      	lsls	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d043      	beq.n	800249c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d03c      	beq.n	800249c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002426:	2210      	movs	r2, #16
 8002428:	409a      	lsls	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d018      	beq.n	800246e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d108      	bne.n	800245c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d024      	beq.n	800249c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	4798      	blx	r3
 800245a:	e01f      	b.n	800249c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01b      	beq.n	800249c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	4798      	blx	r3
 800246c:	e016      	b.n	800249c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d107      	bne.n	800248c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0208 	bic.w	r2, r2, #8
 800248a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a0:	2220      	movs	r2, #32
 80024a2:	409a      	lsls	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 808f 	beq.w	80025cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8087 	beq.w	80025cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c2:	2220      	movs	r2, #32
 80024c4:	409a      	lsls	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b05      	cmp	r3, #5
 80024d4:	d136      	bne.n	8002544 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0216 	bic.w	r2, r2, #22
 80024e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d103      	bne.n	8002506 <HAL_DMA_IRQHandler+0x1da>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002502:	2b00      	cmp	r3, #0
 8002504:	d007      	beq.n	8002516 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0208 	bic.w	r2, r2, #8
 8002514:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251a:	223f      	movs	r2, #63	; 0x3f
 800251c:	409a      	lsls	r2, r3
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002536:	2b00      	cmp	r3, #0
 8002538:	d07e      	beq.n	8002638 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
        }
        return;
 8002542:	e079      	b.n	8002638 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d01d      	beq.n	800258e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10d      	bne.n	800257c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	2b00      	cmp	r3, #0
 8002566:	d031      	beq.n	80025cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
 8002570:	e02c      	b.n	80025cc <HAL_DMA_IRQHandler+0x2a0>
 8002572:	bf00      	nop
 8002574:	20000034 	.word	0x20000034
 8002578:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d023      	beq.n	80025cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	4798      	blx	r3
 800258c:	e01e      	b.n	80025cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10f      	bne.n	80025bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0210 	bic.w	r2, r2, #16
 80025aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d032      	beq.n	800263a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d022      	beq.n	8002626 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2205      	movs	r2, #5
 80025e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	3301      	adds	r3, #1
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	429a      	cmp	r2, r3
 8002602:	d307      	bcc.n	8002614 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f2      	bne.n	80025f8 <HAL_DMA_IRQHandler+0x2cc>
 8002612:	e000      	b.n	8002616 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002614:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	4798      	blx	r3
 8002636:	e000      	b.n	800263a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002638:	bf00      	nop
    }
  }
}
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
 800264c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800265c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	d108      	bne.n	8002680 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800267e:	e007      	b.n	8002690 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	60da      	str	r2, [r3, #12]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	3b10      	subs	r3, #16
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <DMA_CalcBaseAndBitshift+0x64>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026b6:	4a13      	ldr	r2, [pc, #76]	; (8002704 <DMA_CalcBaseAndBitshift+0x68>)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d909      	bls.n	80026de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026d2:	f023 0303 	bic.w	r3, r3, #3
 80026d6:	1d1a      	adds	r2, r3, #4
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	659a      	str	r2, [r3, #88]	; 0x58
 80026dc:	e007      	b.n	80026ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026e6:	f023 0303 	bic.w	r3, r3, #3
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	aaaaaaab 	.word	0xaaaaaaab
 8002704:	0800a7b4 	.word	0x0800a7b4

08002708 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d11f      	bne.n	8002762 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d856      	bhi.n	80027d6 <DMA_CheckFifoParam+0xce>
 8002728:	a201      	add	r2, pc, #4	; (adr r2, 8002730 <DMA_CheckFifoParam+0x28>)
 800272a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272e:	bf00      	nop
 8002730:	08002741 	.word	0x08002741
 8002734:	08002753 	.word	0x08002753
 8002738:	08002741 	.word	0x08002741
 800273c:	080027d7 	.word	0x080027d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d046      	beq.n	80027da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002750:	e043      	b.n	80027da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800275a:	d140      	bne.n	80027de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002760:	e03d      	b.n	80027de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800276a:	d121      	bne.n	80027b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b03      	cmp	r3, #3
 8002770:	d837      	bhi.n	80027e2 <DMA_CheckFifoParam+0xda>
 8002772:	a201      	add	r2, pc, #4	; (adr r2, 8002778 <DMA_CheckFifoParam+0x70>)
 8002774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002778:	08002789 	.word	0x08002789
 800277c:	0800278f 	.word	0x0800278f
 8002780:	08002789 	.word	0x08002789
 8002784:	080027a1 	.word	0x080027a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
      break;
 800278c:	e030      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d025      	beq.n	80027e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800279e:	e022      	b.n	80027e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027a8:	d11f      	bne.n	80027ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ae:	e01c      	b.n	80027ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d903      	bls.n	80027be <DMA_CheckFifoParam+0xb6>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d003      	beq.n	80027c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027bc:	e018      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
      break;
 80027c2:	e015      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00e      	beq.n	80027ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
      break;
 80027d4:	e00b      	b.n	80027ee <DMA_CheckFifoParam+0xe6>
      break;
 80027d6:	bf00      	nop
 80027d8:	e00a      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;
 80027da:	bf00      	nop
 80027dc:	e008      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;
 80027de:	bf00      	nop
 80027e0:	e006      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;
 80027e2:	bf00      	nop
 80027e4:	e004      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;
 80027e6:	bf00      	nop
 80027e8:	e002      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80027ea:	bf00      	nop
 80027ec:	e000      	b.n	80027f0 <DMA_CheckFifoParam+0xe8>
      break;
 80027ee:	bf00      	nop
    }
  } 
  
  return status; 
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop

08002800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	e177      	b.n	8002b0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800281c:	2201      	movs	r2, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	429a      	cmp	r2, r3
 8002836:	f040 8166 	bne.w	8002b06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d005      	beq.n	8002852 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800284e:	2b02      	cmp	r3, #2
 8002850:	d130      	bne.n	80028b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	2203      	movs	r2, #3
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002888:	2201      	movs	r2, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 0201 	and.w	r2, r3, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d017      	beq.n	80028f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d123      	bne.n	8002944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	08da      	lsrs	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3208      	adds	r2, #8
 8002904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	220f      	movs	r2, #15
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	08da      	lsrs	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3208      	adds	r2, #8
 800293e:	69b9      	ldr	r1, [r7, #24]
 8002940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0203 	and.w	r2, r3, #3
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80c0 	beq.w	8002b06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b66      	ldr	r3, [pc, #408]	; (8002b24 <HAL_GPIO_Init+0x324>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	4a65      	ldr	r2, [pc, #404]	; (8002b24 <HAL_GPIO_Init+0x324>)
 8002990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002994:	6453      	str	r3, [r2, #68]	; 0x44
 8002996:	4b63      	ldr	r3, [pc, #396]	; (8002b24 <HAL_GPIO_Init+0x324>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a2:	4a61      	ldr	r2, [pc, #388]	; (8002b28 <HAL_GPIO_Init+0x328>)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	3302      	adds	r3, #2
 80029aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	220f      	movs	r2, #15
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a58      	ldr	r2, [pc, #352]	; (8002b2c <HAL_GPIO_Init+0x32c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d037      	beq.n	8002a3e <HAL_GPIO_Init+0x23e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a57      	ldr	r2, [pc, #348]	; (8002b30 <HAL_GPIO_Init+0x330>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d031      	beq.n	8002a3a <HAL_GPIO_Init+0x23a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a56      	ldr	r2, [pc, #344]	; (8002b34 <HAL_GPIO_Init+0x334>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d02b      	beq.n	8002a36 <HAL_GPIO_Init+0x236>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a55      	ldr	r2, [pc, #340]	; (8002b38 <HAL_GPIO_Init+0x338>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d025      	beq.n	8002a32 <HAL_GPIO_Init+0x232>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a54      	ldr	r2, [pc, #336]	; (8002b3c <HAL_GPIO_Init+0x33c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01f      	beq.n	8002a2e <HAL_GPIO_Init+0x22e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a53      	ldr	r2, [pc, #332]	; (8002b40 <HAL_GPIO_Init+0x340>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d019      	beq.n	8002a2a <HAL_GPIO_Init+0x22a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a52      	ldr	r2, [pc, #328]	; (8002b44 <HAL_GPIO_Init+0x344>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_GPIO_Init+0x226>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a51      	ldr	r2, [pc, #324]	; (8002b48 <HAL_GPIO_Init+0x348>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00d      	beq.n	8002a22 <HAL_GPIO_Init+0x222>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a50      	ldr	r2, [pc, #320]	; (8002b4c <HAL_GPIO_Init+0x34c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <HAL_GPIO_Init+0x21e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4f      	ldr	r2, [pc, #316]	; (8002b50 <HAL_GPIO_Init+0x350>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_GPIO_Init+0x21a>
 8002a16:	2309      	movs	r3, #9
 8002a18:	e012      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a1a:	230a      	movs	r3, #10
 8002a1c:	e010      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a1e:	2308      	movs	r3, #8
 8002a20:	e00e      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a22:	2307      	movs	r3, #7
 8002a24:	e00c      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a26:	2306      	movs	r3, #6
 8002a28:	e00a      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a2a:	2305      	movs	r3, #5
 8002a2c:	e008      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a2e:	2304      	movs	r3, #4
 8002a30:	e006      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a32:	2303      	movs	r3, #3
 8002a34:	e004      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e002      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_GPIO_Init+0x240>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	f002 0203 	and.w	r2, r2, #3
 8002a46:	0092      	lsls	r2, r2, #2
 8002a48:	4093      	lsls	r3, r2
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a50:	4935      	ldr	r1, [pc, #212]	; (8002b28 <HAL_GPIO_Init+0x328>)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	089b      	lsrs	r3, r3, #2
 8002a56:	3302      	adds	r3, #2
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <HAL_GPIO_Init+0x354>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a82:	4a34      	ldr	r2, [pc, #208]	; (8002b54 <HAL_GPIO_Init+0x354>)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a88:	4b32      	ldr	r3, [pc, #200]	; (8002b54 <HAL_GPIO_Init+0x354>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aac:	4a29      	ldr	r2, [pc, #164]	; (8002b54 <HAL_GPIO_Init+0x354>)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ab2:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <HAL_GPIO_Init+0x354>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <HAL_GPIO_Init+0x354>)
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_GPIO_Init+0x354>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b00:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <HAL_GPIO_Init+0x354>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	2b0f      	cmp	r3, #15
 8002b10:	f67f ae84 	bls.w	800281c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	3724      	adds	r7, #36	; 0x24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40013800 	.word	0x40013800
 8002b2c:	40020000 	.word	0x40020000
 8002b30:	40020400 	.word	0x40020400
 8002b34:	40020800 	.word	0x40020800
 8002b38:	40020c00 	.word	0x40020c00
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40021400 	.word	0x40021400
 8002b44:	40021800 	.word	0x40021800
 8002b48:	40021c00 	.word	0x40021c00
 8002b4c:	40022000 	.word	0x40022000
 8002b50:	40022400 	.word	0x40022400
 8002b54:	40013c00 	.word	0x40013c00

08002b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
 8002b64:	4613      	mov	r3, r2
 8002b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b68:	787b      	ldrb	r3, [r7, #1]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b6e:	887a      	ldrh	r2, [r7, #2]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b74:	e003      	b.n	8002b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	041a      	lsls	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	619a      	str	r2, [r3, #24]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b085      	sub	sp, #20
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	460b      	mov	r3, r1
 8002b94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b9c:	887a      	ldrh	r2, [r7, #2]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	041a      	lsls	r2, r3, #16
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	43d9      	mvns	r1, r3
 8002ba8:	887b      	ldrh	r3, [r7, #2]
 8002baa:	400b      	ands	r3, r1
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	619a      	str	r2, [r3, #24]
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <HAL_PWREx_EnableOverDrive+0x90>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <HAL_PWREx_EnableOverDrive+0x90>)
 8002bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bda:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <HAL_PWREx_EnableOverDrive+0x90>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_PWREx_EnableOverDrive+0x94>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bec:	f7fe fbb8 	bl	8001360 <HAL_GetTick>
 8002bf0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bf2:	e009      	b.n	8002c08 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bf4:	f7fe fbb4 	bl	8001360 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c02:	d901      	bls.n	8002c08 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e01f      	b.n	8002c48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c08:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d1ee      	bne.n	8002bf4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c16:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c1c:	f7fe fba0 	bl	8001360 <HAL_GetTick>
 8002c20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c22:	e009      	b.n	8002c38 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c24:	f7fe fb9c 	bl	8001360 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c32:	d901      	bls.n	8002c38 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e007      	b.n	8002c48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c38:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c44:	d1ee      	bne.n	8002c24 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40023800 	.word	0x40023800
 8002c54:	420e0040 	.word	0x420e0040
 8002c58:	40007000 	.word	0x40007000
 8002c5c:	420e0044 	.word	0x420e0044

08002c60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e267      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d075      	beq.n	8002d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c7e:	4b88      	ldr	r3, [pc, #544]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d00c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8a:	4b85      	ldr	r3, [pc, #532]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d112      	bne.n	8002cbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c96:	4b82      	ldr	r3, [pc, #520]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca2:	d10b      	bne.n	8002cbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	4b7e      	ldr	r3, [pc, #504]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d05b      	beq.n	8002d68 <HAL_RCC_OscConfig+0x108>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d157      	bne.n	8002d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e242      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc4:	d106      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x74>
 8002cc6:	4b76      	ldr	r3, [pc, #472]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a75      	ldr	r2, [pc, #468]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e01d      	b.n	8002d10 <HAL_RCC_OscConfig+0xb0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x98>
 8002cde:	4b70      	ldr	r3, [pc, #448]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a6f      	ldr	r2, [pc, #444]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b6d      	ldr	r3, [pc, #436]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6c      	ldr	r2, [pc, #432]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e00b      	b.n	8002d10 <HAL_RCC_OscConfig+0xb0>
 8002cf8:	4b69      	ldr	r3, [pc, #420]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a68      	ldr	r2, [pc, #416]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	4b66      	ldr	r3, [pc, #408]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a65      	ldr	r2, [pc, #404]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d013      	beq.n	8002d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe fb22 	bl	8001360 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d20:	f7fe fb1e 	bl	8001360 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e207      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	4b5b      	ldr	r3, [pc, #364]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0xc0>
 8002d3e:	e014      	b.n	8002d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fe fb0e 	bl	8001360 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d48:	f7fe fb0a 	bl	8001360 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1f3      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5a:	4b51      	ldr	r3, [pc, #324]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0xe8>
 8002d66:	e000      	b.n	8002d6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d063      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d76:	4b4a      	ldr	r3, [pc, #296]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d82:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d11c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8e:	4b44      	ldr	r3, [pc, #272]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d116      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9a:	4b41      	ldr	r3, [pc, #260]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <HAL_RCC_OscConfig+0x152>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e1c7      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db2:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4937      	ldr	r1, [pc, #220]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	e03a      	b.n	8002e3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd0:	4b34      	ldr	r3, [pc, #208]	; (8002ea4 <HAL_RCC_OscConfig+0x244>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fac3 	bl	8001360 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dde:	f7fe fabf 	bl	8001360 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e1a8      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df0:	4b2b      	ldr	r3, [pc, #172]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfc:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4925      	ldr	r1, [pc, #148]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]
 8002e10:	e015      	b.n	8002e3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_RCC_OscConfig+0x244>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe faa2 	bl	8001360 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e20:	f7fe fa9e 	bl	8001360 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e187      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d036      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d016      	beq.n	8002e80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <HAL_RCC_OscConfig+0x248>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7fe fa82 	bl	8001360 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e60:	f7fe fa7e 	bl	8001360 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e167      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e72:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x200>
 8002e7e:	e01b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_OscConfig+0x248>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e86:	f7fe fa6b 	bl	8001360 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e8c:	e00e      	b.n	8002eac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8e:	f7fe fa67 	bl	8001360 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d907      	bls.n	8002eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e150      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	42470000 	.word	0x42470000
 8002ea8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	4b88      	ldr	r3, [pc, #544]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ea      	bne.n	8002e8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 8097 	beq.w	8002ff4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eca:	4b81      	ldr	r3, [pc, #516]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10f      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	4b7d      	ldr	r3, [pc, #500]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	4a7c      	ldr	r2, [pc, #496]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee6:	4b7a      	ldr	r3, [pc, #488]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef6:	4b77      	ldr	r3, [pc, #476]	; (80030d4 <HAL_RCC_OscConfig+0x474>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d118      	bne.n	8002f34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f02:	4b74      	ldr	r3, [pc, #464]	; (80030d4 <HAL_RCC_OscConfig+0x474>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a73      	ldr	r2, [pc, #460]	; (80030d4 <HAL_RCC_OscConfig+0x474>)
 8002f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fa27 	bl	8001360 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f16:	f7fe fa23 	bl	8001360 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e10c      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <HAL_RCC_OscConfig+0x474>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCC_OscConfig+0x2ea>
 8002f3c:	4b64      	ldr	r3, [pc, #400]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	4a63      	ldr	r2, [pc, #396]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	6713      	str	r3, [r2, #112]	; 0x70
 8002f48:	e01c      	b.n	8002f84 <HAL_RCC_OscConfig+0x324>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b05      	cmp	r3, #5
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x30c>
 8002f52:	4b5f      	ldr	r3, [pc, #380]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	4a5e      	ldr	r2, [pc, #376]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f58:	f043 0304 	orr.w	r3, r3, #4
 8002f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5e:	4b5c      	ldr	r3, [pc, #368]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	4a5b      	ldr	r2, [pc, #364]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6a:	e00b      	b.n	8002f84 <HAL_RCC_OscConfig+0x324>
 8002f6c:	4b58      	ldr	r3, [pc, #352]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	4a57      	ldr	r2, [pc, #348]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f72:	f023 0301 	bic.w	r3, r3, #1
 8002f76:	6713      	str	r3, [r2, #112]	; 0x70
 8002f78:	4b55      	ldr	r3, [pc, #340]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	4a54      	ldr	r2, [pc, #336]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f7e:	f023 0304 	bic.w	r3, r3, #4
 8002f82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d015      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fe f9e8 	bl	8001360 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f94:	f7fe f9e4 	bl	8001360 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e0cb      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002faa:	4b49      	ldr	r3, [pc, #292]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0ee      	beq.n	8002f94 <HAL_RCC_OscConfig+0x334>
 8002fb6:	e014      	b.n	8002fe2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb8:	f7fe f9d2 	bl	8001360 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7fe f9ce 	bl	8001360 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e0b5      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd6:	4b3e      	ldr	r3, [pc, #248]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1ee      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d105      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe8:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	4a38      	ldr	r2, [pc, #224]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80a1 	beq.w	8003140 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ffe:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b08      	cmp	r3, #8
 8003008:	d05c      	beq.n	80030c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d141      	bne.n	8003096 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003012:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <HAL_RCC_OscConfig+0x478>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fe f9a2 	bl	8001360 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003020:	f7fe f99e 	bl	8001360 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e087      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003032:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	019b      	lsls	r3, r3, #6
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	085b      	lsrs	r3, r3, #1
 8003056:	3b01      	subs	r3, #1
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	061b      	lsls	r3, r3, #24
 8003062:	491b      	ldr	r1, [pc, #108]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x478>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fe f977 	bl	8001360 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003076:	f7fe f973 	bl	8001360 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e05c      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x416>
 8003094:	e054      	b.n	8003140 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_RCC_OscConfig+0x478>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe f960 	bl	8001360 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe f95c 	bl	8001360 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e045      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x444>
 80030c2:	e03d      	b.n	8003140 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e038      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40007000 	.word	0x40007000
 80030d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <HAL_RCC_OscConfig+0x4ec>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d028      	beq.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d121      	bne.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d11a      	bne.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800310c:	4013      	ands	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003112:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003114:	4293      	cmp	r3, r2
 8003116:	d111      	bne.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	3b01      	subs	r3, #1
 8003126:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d107      	bne.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800

08003150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0cc      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b68      	ldr	r3, [pc, #416]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d90c      	bls.n	800318c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b65      	ldr	r3, [pc, #404]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b63      	ldr	r3, [pc, #396]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0b8      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d020      	beq.n	80031da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031a4:	4b59      	ldr	r3, [pc, #356]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a58      	ldr	r2, [pc, #352]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031bc:	4b53      	ldr	r3, [pc, #332]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	4a52      	ldr	r2, [pc, #328]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c8:	4b50      	ldr	r3, [pc, #320]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	494d      	ldr	r1, [pc, #308]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d044      	beq.n	8003270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d119      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e07f      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d003      	beq.n	800320e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800320a:	2b03      	cmp	r3, #3
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320e:	4b3f      	ldr	r3, [pc, #252]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e06f      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	4b3b      	ldr	r3, [pc, #236]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e067      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322e:	4b37      	ldr	r3, [pc, #220]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f023 0203 	bic.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4934      	ldr	r1, [pc, #208]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	4313      	orrs	r3, r2
 800323e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003240:	f7fe f88e 	bl	8001360 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	e00a      	b.n	800325e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003248:	f7fe f88a 	bl	8001360 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e04f      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	4b2b      	ldr	r3, [pc, #172]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 020c 	and.w	r2, r3, #12
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	429a      	cmp	r2, r3
 800326e:	d1eb      	bne.n	8003248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003270:	4b25      	ldr	r3, [pc, #148]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d20c      	bcs.n	8003298 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b22      	ldr	r3, [pc, #136]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b20      	ldr	r3, [pc, #128]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e032      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4916      	ldr	r1, [pc, #88]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032c2:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	490e      	ldr	r1, [pc, #56]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032d6:	f000 f821 	bl	800331c <HAL_RCC_GetSysClockFreq>
 80032da:	4602      	mov	r2, r0
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	091b      	lsrs	r3, r3, #4
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	490a      	ldr	r1, [pc, #40]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 80032e8:	5ccb      	ldrb	r3, [r1, r3]
 80032ea:	fa22 f303 	lsr.w	r3, r2, r3
 80032ee:	4a09      	ldr	r2, [pc, #36]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <HAL_RCC_ClockConfig+0x1c8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fd fe7e 	bl	8000ff8 <HAL_InitTick>

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023c00 	.word	0x40023c00
 800330c:	40023800 	.word	0x40023800
 8003310:	0800a79c 	.word	0x0800a79c
 8003314:	20000034 	.word	0x20000034
 8003318:	20000038 	.word	0x20000038

0800331c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800331c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003320:	b094      	sub	sp, #80	; 0x50
 8003322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	647b      	str	r3, [r7, #68]	; 0x44
 8003328:	2300      	movs	r3, #0
 800332a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800332c:	2300      	movs	r3, #0
 800332e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003334:	4b79      	ldr	r3, [pc, #484]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	2b08      	cmp	r3, #8
 800333e:	d00d      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x40>
 8003340:	2b08      	cmp	r3, #8
 8003342:	f200 80e1 	bhi.w	8003508 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x34>
 800334a:	2b04      	cmp	r3, #4
 800334c:	d003      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0x3a>
 800334e:	e0db      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003350:	4b73      	ldr	r3, [pc, #460]	; (8003520 <HAL_RCC_GetSysClockFreq+0x204>)
 8003352:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003354:	e0db      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003356:	4b73      	ldr	r3, [pc, #460]	; (8003524 <HAL_RCC_GetSysClockFreq+0x208>)
 8003358:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800335a:	e0d8      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800335c:	4b6f      	ldr	r3, [pc, #444]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003364:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003366:	4b6d      	ldr	r3, [pc, #436]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d063      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003372:	4b6a      	ldr	r3, [pc, #424]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	099b      	lsrs	r3, r3, #6
 8003378:	2200      	movs	r2, #0
 800337a:	63bb      	str	r3, [r7, #56]	; 0x38
 800337c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
 8003386:	2300      	movs	r3, #0
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
 800338a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800338e:	4622      	mov	r2, r4
 8003390:	462b      	mov	r3, r5
 8003392:	f04f 0000 	mov.w	r0, #0
 8003396:	f04f 0100 	mov.w	r1, #0
 800339a:	0159      	lsls	r1, r3, #5
 800339c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033a0:	0150      	lsls	r0, r2, #5
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4621      	mov	r1, r4
 80033a8:	1a51      	subs	r1, r2, r1
 80033aa:	6139      	str	r1, [r7, #16]
 80033ac:	4629      	mov	r1, r5
 80033ae:	eb63 0301 	sbc.w	r3, r3, r1
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033c0:	4659      	mov	r1, fp
 80033c2:	018b      	lsls	r3, r1, #6
 80033c4:	4651      	mov	r1, sl
 80033c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033ca:	4651      	mov	r1, sl
 80033cc:	018a      	lsls	r2, r1, #6
 80033ce:	4651      	mov	r1, sl
 80033d0:	ebb2 0801 	subs.w	r8, r2, r1
 80033d4:	4659      	mov	r1, fp
 80033d6:	eb63 0901 	sbc.w	r9, r3, r1
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ee:	4690      	mov	r8, r2
 80033f0:	4699      	mov	r9, r3
 80033f2:	4623      	mov	r3, r4
 80033f4:	eb18 0303 	adds.w	r3, r8, r3
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	462b      	mov	r3, r5
 80033fc:	eb49 0303 	adc.w	r3, r9, r3
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800340e:	4629      	mov	r1, r5
 8003410:	024b      	lsls	r3, r1, #9
 8003412:	4621      	mov	r1, r4
 8003414:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003418:	4621      	mov	r1, r4
 800341a:	024a      	lsls	r2, r1, #9
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003422:	2200      	movs	r2, #0
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
 8003426:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003428:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800342c:	f7fc ff30 	bl	8000290 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4613      	mov	r3, r2
 8003436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003438:	e058      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343a:	4b38      	ldr	r3, [pc, #224]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	099b      	lsrs	r3, r3, #6
 8003440:	2200      	movs	r2, #0
 8003442:	4618      	mov	r0, r3
 8003444:	4611      	mov	r1, r2
 8003446:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800344a:	623b      	str	r3, [r7, #32]
 800344c:	2300      	movs	r3, #0
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
 8003450:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003454:	4642      	mov	r2, r8
 8003456:	464b      	mov	r3, r9
 8003458:	f04f 0000 	mov.w	r0, #0
 800345c:	f04f 0100 	mov.w	r1, #0
 8003460:	0159      	lsls	r1, r3, #5
 8003462:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003466:	0150      	lsls	r0, r2, #5
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4641      	mov	r1, r8
 800346e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003472:	4649      	mov	r1, r9
 8003474:	eb63 0b01 	sbc.w	fp, r3, r1
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003484:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003488:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800348c:	ebb2 040a 	subs.w	r4, r2, sl
 8003490:	eb63 050b 	sbc.w	r5, r3, fp
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	00eb      	lsls	r3, r5, #3
 800349e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034a2:	00e2      	lsls	r2, r4, #3
 80034a4:	4614      	mov	r4, r2
 80034a6:	461d      	mov	r5, r3
 80034a8:	4643      	mov	r3, r8
 80034aa:	18e3      	adds	r3, r4, r3
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	464b      	mov	r3, r9
 80034b0:	eb45 0303 	adc.w	r3, r5, r3
 80034b4:	607b      	str	r3, [r7, #4]
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034c2:	4629      	mov	r1, r5
 80034c4:	028b      	lsls	r3, r1, #10
 80034c6:	4621      	mov	r1, r4
 80034c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034cc:	4621      	mov	r1, r4
 80034ce:	028a      	lsls	r2, r1, #10
 80034d0:	4610      	mov	r0, r2
 80034d2:	4619      	mov	r1, r3
 80034d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d6:	2200      	movs	r2, #0
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	61fa      	str	r2, [r7, #28]
 80034dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034e0:	f7fc fed6 	bl	8000290 <__aeabi_uldivmod>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4613      	mov	r3, r2
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	0c1b      	lsrs	r3, r3, #16
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	3301      	adds	r3, #1
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80034fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003500:	fbb2 f3f3 	udiv	r3, r2, r3
 8003504:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003506:	e002      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_RCC_GetSysClockFreq+0x204>)
 800350a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800350c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800350e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003510:	4618      	mov	r0, r3
 8003512:	3750      	adds	r7, #80	; 0x50
 8003514:	46bd      	mov	sp, r7
 8003516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800
 8003520:	00f42400 	.word	0x00f42400
 8003524:	007a1200 	.word	0x007a1200

08003528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <HAL_RCC_GetHCLKFreq+0x14>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000034 	.word	0x20000034

08003540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003544:	f7ff fff0 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	0a9b      	lsrs	r3, r3, #10
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	4903      	ldr	r1, [pc, #12]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800355c:	4618      	mov	r0, r3
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40023800 	.word	0x40023800
 8003564:	0800a7ac 	.word	0x0800a7ac

08003568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800356c:	f7ff ffdc 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	0b5b      	lsrs	r3, r3, #13
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	4903      	ldr	r1, [pc, #12]	; (800358c <HAL_RCC_GetPCLK2Freq+0x24>)
 800357e:	5ccb      	ldrb	r3, [r1, r3]
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40023800 	.word	0x40023800
 800358c:	0800a7ac 	.word	0x0800a7ac

08003590 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	220f      	movs	r2, #15
 800359e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035a0:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_RCC_GetClockConfig+0x5c>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 0203 	and.w	r2, r3, #3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <HAL_RCC_GetClockConfig+0x5c>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <HAL_RCC_GetClockConfig+0x5c>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035c4:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_RCC_GetClockConfig+0x5c>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	08db      	lsrs	r3, r3, #3
 80035ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035d2:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <HAL_RCC_GetClockConfig+0x60>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 020f 	and.w	r2, r3, #15
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	601a      	str	r2, [r3, #0]
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40023c00 	.word	0x40023c00

080035f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e041      	b.n	800368a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d106      	bne.n	8003620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd fc7a 	bl	8000f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3304      	adds	r3, #4
 8003630:	4619      	mov	r1, r3
 8003632:	4610      	mov	r0, r2
 8003634:	f000 fb0e 	bl	8003c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d001      	beq.n	80036ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e046      	b.n	800373a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a23      	ldr	r2, [pc, #140]	; (8003748 <HAL_TIM_Base_Start+0xb4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d022      	beq.n	8003704 <HAL_TIM_Base_Start+0x70>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c6:	d01d      	beq.n	8003704 <HAL_TIM_Base_Start+0x70>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1f      	ldr	r2, [pc, #124]	; (800374c <HAL_TIM_Base_Start+0xb8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d018      	beq.n	8003704 <HAL_TIM_Base_Start+0x70>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <HAL_TIM_Base_Start+0xbc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d013      	beq.n	8003704 <HAL_TIM_Base_Start+0x70>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <HAL_TIM_Base_Start+0xc0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00e      	beq.n	8003704 <HAL_TIM_Base_Start+0x70>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <HAL_TIM_Base_Start+0xc4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d009      	beq.n	8003704 <HAL_TIM_Base_Start+0x70>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a19      	ldr	r2, [pc, #100]	; (800375c <HAL_TIM_Base_Start+0xc8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_TIM_Base_Start+0x70>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a18      	ldr	r2, [pc, #96]	; (8003760 <HAL_TIM_Base_Start+0xcc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d111      	bne.n	8003728 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b06      	cmp	r3, #6
 8003714:	d010      	beq.n	8003738 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0201 	orr.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003726:	e007      	b.n	8003738 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40010400 	.word	0x40010400
 800375c:	40014000 	.word	0x40014000
 8003760:	40001800 	.word	0x40001800

08003764 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6a1a      	ldr	r2, [r3, #32]
 8003772:	f241 1311 	movw	r3, #4369	; 0x1111
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10f      	bne.n	800379c <HAL_TIM_Base_Stop+0x38>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6a1a      	ldr	r2, [r3, #32]
 8003782:	f240 4344 	movw	r3, #1092	; 0x444
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d107      	bne.n	800379c <HAL_TIM_Base_Stop+0x38>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d001      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e04e      	b.n	800386a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a23      	ldr	r2, [pc, #140]	; (8003878 <HAL_TIM_Base_Start_IT+0xc4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d022      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f6:	d01d      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1f      	ldr	r2, [pc, #124]	; (800387c <HAL_TIM_Base_Start_IT+0xc8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d018      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <HAL_TIM_Base_Start_IT+0xcc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d013      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1c      	ldr	r2, [pc, #112]	; (8003884 <HAL_TIM_Base_Start_IT+0xd0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00e      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a1b      	ldr	r2, [pc, #108]	; (8003888 <HAL_TIM_Base_Start_IT+0xd4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d009      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a19      	ldr	r2, [pc, #100]	; (800388c <HAL_TIM_Base_Start_IT+0xd8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a18      	ldr	r2, [pc, #96]	; (8003890 <HAL_TIM_Base_Start_IT+0xdc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d111      	bne.n	8003858 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b06      	cmp	r3, #6
 8003844:	d010      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0201 	orr.w	r2, r2, #1
 8003854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003856:	e007      	b.n	8003868 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40010000 	.word	0x40010000
 800387c:	40000400 	.word	0x40000400
 8003880:	40000800 	.word	0x40000800
 8003884:	40000c00 	.word	0x40000c00
 8003888:	40010400 	.word	0x40010400
 800388c:	40014000 	.word	0x40014000
 8003890:	40001800 	.word	0x40001800

08003894 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d020      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d01b      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0202 	mvn.w	r2, #2
 80038c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f999 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
 80038e4:	e005      	b.n	80038f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f98b 	bl	8003c02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f99c 	bl	8003c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d020      	beq.n	8003944 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d01b      	beq.n	8003944 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0204 	mvn.w	r2, #4
 8003914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2202      	movs	r2, #2
 800391a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f973 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
 8003930:	e005      	b.n	800393e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f965 	bl	8003c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f976 	bl	8003c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d020      	beq.n	8003990 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01b      	beq.n	8003990 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0208 	mvn.w	r2, #8
 8003960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2204      	movs	r2, #4
 8003966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f94d 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
 800397c:	e005      	b.n	800398a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f93f 	bl	8003c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f950 	bl	8003c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 0310 	and.w	r3, r3, #16
 8003996:	2b00      	cmp	r3, #0
 8003998:	d020      	beq.n	80039dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01b      	beq.n	80039dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0210 	mvn.w	r2, #16
 80039ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2208      	movs	r2, #8
 80039b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f927 	bl	8003c16 <HAL_TIM_IC_CaptureCallback>
 80039c8:	e005      	b.n	80039d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f919 	bl	8003c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f92a 	bl	8003c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00c      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d007      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0201 	mvn.w	r2, #1
 80039f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fd f9aa 	bl	8000d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00c      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fae4 	bl	8003fec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00c      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f8fb 	bl	8003c3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00c      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d007      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0220 	mvn.w	r2, #32
 8003a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fab6 	bl	8003fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_TIM_ConfigClockSource+0x1c>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e0b4      	b.n	8003bfa <HAL_TIM_ConfigClockSource+0x186>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003aae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ab6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac8:	d03e      	beq.n	8003b48 <HAL_TIM_ConfigClockSource+0xd4>
 8003aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ace:	f200 8087 	bhi.w	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad6:	f000 8086 	beq.w	8003be6 <HAL_TIM_ConfigClockSource+0x172>
 8003ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ade:	d87f      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b70      	cmp	r3, #112	; 0x70
 8003ae2:	d01a      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0xa6>
 8003ae4:	2b70      	cmp	r3, #112	; 0x70
 8003ae6:	d87b      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b60      	cmp	r3, #96	; 0x60
 8003aea:	d050      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x11a>
 8003aec:	2b60      	cmp	r3, #96	; 0x60
 8003aee:	d877      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b50      	cmp	r3, #80	; 0x50
 8003af2:	d03c      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0xfa>
 8003af4:	2b50      	cmp	r3, #80	; 0x50
 8003af6:	d873      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d058      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x13a>
 8003afc:	2b40      	cmp	r3, #64	; 0x40
 8003afe:	d86f      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b00:	2b30      	cmp	r3, #48	; 0x30
 8003b02:	d064      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x15a>
 8003b04:	2b30      	cmp	r3, #48	; 0x30
 8003b06:	d86b      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d060      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x15a>
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d867      	bhi.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d05c      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x15a>
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d05a      	beq.n	8003bce <HAL_TIM_ConfigClockSource+0x15a>
 8003b18:	e062      	b.n	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b2a:	f000 f9b9 	bl	8003ea0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	609a      	str	r2, [r3, #8]
      break;
 8003b46:	e04f      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b58:	f000 f9a2 	bl	8003ea0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b6a:	609a      	str	r2, [r3, #8]
      break;
 8003b6c:	e03c      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f000 f916 	bl	8003dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2150      	movs	r1, #80	; 0x50
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f96f 	bl	8003e6a <TIM_ITRx_SetConfig>
      break;
 8003b8c:	e02c      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f000 f935 	bl	8003e0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2160      	movs	r1, #96	; 0x60
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f95f 	bl	8003e6a <TIM_ITRx_SetConfig>
      break;
 8003bac:	e01c      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f000 f8f6 	bl	8003dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2140      	movs	r1, #64	; 0x40
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f94f 	bl	8003e6a <TIM_ITRx_SetConfig>
      break;
 8003bcc:	e00c      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4610      	mov	r0, r2
 8003bda:	f000 f946 	bl	8003e6a <TIM_ITRx_SetConfig>
      break;
 8003bde:	e003      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
      break;
 8003be4:	e000      	b.n	8003be8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003be6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b083      	sub	sp, #12
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a46      	ldr	r2, [pc, #280]	; (8003d80 <TIM_Base_SetConfig+0x12c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d013      	beq.n	8003c94 <TIM_Base_SetConfig+0x40>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c72:	d00f      	beq.n	8003c94 <TIM_Base_SetConfig+0x40>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a43      	ldr	r2, [pc, #268]	; (8003d84 <TIM_Base_SetConfig+0x130>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00b      	beq.n	8003c94 <TIM_Base_SetConfig+0x40>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a42      	ldr	r2, [pc, #264]	; (8003d88 <TIM_Base_SetConfig+0x134>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d007      	beq.n	8003c94 <TIM_Base_SetConfig+0x40>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a41      	ldr	r2, [pc, #260]	; (8003d8c <TIM_Base_SetConfig+0x138>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d003      	beq.n	8003c94 <TIM_Base_SetConfig+0x40>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a40      	ldr	r2, [pc, #256]	; (8003d90 <TIM_Base_SetConfig+0x13c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d108      	bne.n	8003ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a35      	ldr	r2, [pc, #212]	; (8003d80 <TIM_Base_SetConfig+0x12c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d02b      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb4:	d027      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a32      	ldr	r2, [pc, #200]	; (8003d84 <TIM_Base_SetConfig+0x130>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d023      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a31      	ldr	r2, [pc, #196]	; (8003d88 <TIM_Base_SetConfig+0x134>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d01f      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a30      	ldr	r2, [pc, #192]	; (8003d8c <TIM_Base_SetConfig+0x138>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d01b      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a2f      	ldr	r2, [pc, #188]	; (8003d90 <TIM_Base_SetConfig+0x13c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d017      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a2e      	ldr	r2, [pc, #184]	; (8003d94 <TIM_Base_SetConfig+0x140>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a2d      	ldr	r2, [pc, #180]	; (8003d98 <TIM_Base_SetConfig+0x144>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00f      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a2c      	ldr	r2, [pc, #176]	; (8003d9c <TIM_Base_SetConfig+0x148>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00b      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a2b      	ldr	r2, [pc, #172]	; (8003da0 <TIM_Base_SetConfig+0x14c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d007      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a2a      	ldr	r2, [pc, #168]	; (8003da4 <TIM_Base_SetConfig+0x150>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d003      	beq.n	8003d06 <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a29      	ldr	r2, [pc, #164]	; (8003da8 <TIM_Base_SetConfig+0x154>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d108      	bne.n	8003d18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a10      	ldr	r2, [pc, #64]	; (8003d80 <TIM_Base_SetConfig+0x12c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d003      	beq.n	8003d4c <TIM_Base_SetConfig+0xf8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <TIM_Base_SetConfig+0x13c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d103      	bne.n	8003d54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d105      	bne.n	8003d72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f023 0201 	bic.w	r2, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	611a      	str	r2, [r3, #16]
  }
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40010000 	.word	0x40010000
 8003d84:	40000400 	.word	0x40000400
 8003d88:	40000800 	.word	0x40000800
 8003d8c:	40000c00 	.word	0x40000c00
 8003d90:	40010400 	.word	0x40010400
 8003d94:	40014000 	.word	0x40014000
 8003d98:	40014400 	.word	0x40014400
 8003d9c:	40014800 	.word	0x40014800
 8003da0:	40001800 	.word	0x40001800
 8003da4:	40001c00 	.word	0x40001c00
 8003da8:	40002000 	.word	0x40002000

08003dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	f023 0201 	bic.w	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f023 030a 	bic.w	r3, r3, #10
 8003de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	621a      	str	r2, [r3, #32]
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b087      	sub	sp, #28
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f023 0210 	bic.w	r2, r3, #16
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	031b      	lsls	r3, r3, #12
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	621a      	str	r2, [r3, #32]
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b085      	sub	sp, #20
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f043 0307 	orr.w	r3, r3, #7
 8003e8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	609a      	str	r2, [r3, #8]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	021a      	lsls	r2, r3, #8
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	609a      	str	r2, [r3, #8]
}
 8003ed4:	bf00      	nop
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e05a      	b.n	8003fae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a21      	ldr	r2, [pc, #132]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d022      	beq.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f44:	d01d      	beq.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d018      	beq.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1b      	ldr	r2, [pc, #108]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d013      	beq.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1a      	ldr	r2, [pc, #104]	; (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00e      	beq.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a18      	ldr	r2, [pc, #96]	; (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d009      	beq.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d004      	beq.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d10c      	bne.n	8003f9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40010000 	.word	0x40010000
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800
 8003fc8:	40000c00 	.word	0x40000c00
 8003fcc:	40010400 	.word	0x40010400
 8003fd0:	40014000 	.word	0x40014000
 8003fd4:	40001800 	.word	0x40001800

08003fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e042      	b.n	8004098 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fc ff96 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2224      	movs	r2, #36	; 0x24
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004042:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fdbd 	bl	8004bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004058:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004068:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004078:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	; 0x28
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	4613      	mov	r3, r2
 80040ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d175      	bne.n	80041ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_UART_Transmit+0x2c>
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e06e      	b.n	80041ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2221      	movs	r2, #33	; 0x21
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040de:	f7fd f93f 	bl	8001360 <HAL_GetTick>
 80040e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	88fa      	ldrh	r2, [r7, #6]
 80040e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	88fa      	ldrh	r2, [r7, #6]
 80040ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f8:	d108      	bne.n	800410c <HAL_UART_Transmit+0x6c>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d104      	bne.n	800410c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	e003      	b.n	8004114 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004110:	2300      	movs	r3, #0
 8004112:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004114:	e02e      	b.n	8004174 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2200      	movs	r2, #0
 800411e:	2180      	movs	r1, #128	; 0x80
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 fb1f 	bl	8004764 <UART_WaitOnFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e03a      	b.n	80041ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10b      	bne.n	8004156 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800414c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	3302      	adds	r3, #2
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	e007      	b.n	8004166 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	781a      	ldrb	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	3301      	adds	r3, #1
 8004164:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1cb      	bne.n	8004116 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2200      	movs	r2, #0
 8004186:	2140      	movs	r1, #64	; 0x40
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 faeb 	bl	8004764 <UART_WaitOnFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e006      	b.n	80041ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e000      	b.n	80041ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80041ac:	2302      	movs	r3, #2
  }
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	4613      	mov	r3, r2
 80041c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d112      	bne.n	80041f6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <HAL_UART_Receive_IT+0x26>
 80041d6:	88fb      	ldrh	r3, [r7, #6]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e00b      	b.n	80041f8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	461a      	mov	r2, r3
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fb12 	bl	8004816 <UART_Start_Receive_IT>
 80041f2:	4603      	mov	r3, r0
 80041f4:	e000      	b.n	80041f8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
  }
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b0ba      	sub	sp, #232	; 0xe8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004226:	2300      	movs	r3, #0
 8004228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800422c:	2300      	movs	r3, #0
 800422e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800423e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10f      	bne.n	8004266 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_UART_IRQHandler+0x66>
 8004252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fbf2 	bl	8004a48 <UART_Receive_IT>
      return;
 8004264:	e25b      	b.n	800471e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80de 	beq.w	800442c <HAL_UART_IRQHandler+0x22c>
 8004270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800427c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004280:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80d1 	beq.w	800442c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800428a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <HAL_UART_IRQHandler+0xae>
 8004296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	f043 0201 	orr.w	r2, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00b      	beq.n	80042d2 <HAL_UART_IRQHandler+0xd2>
 80042ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	f043 0202 	orr.w	r2, r3, #2
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00b      	beq.n	80042f6 <HAL_UART_IRQHandler+0xf6>
 80042de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f043 0204 	orr.w	r2, r3, #4
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d011      	beq.n	8004326 <HAL_UART_IRQHandler+0x126>
 8004302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d105      	bne.n	800431a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800430e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431e:	f043 0208 	orr.w	r2, r3, #8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 81f2 	beq.w	8004714 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_UART_IRQHandler+0x14e>
 800433c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fb7d 	bl	8004a48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <HAL_UART_IRQHandler+0x17a>
 8004372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d04f      	beq.n	800441a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fa85 	bl	800488a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b40      	cmp	r3, #64	; 0x40
 800438c:	d141      	bne.n	8004412 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3314      	adds	r3, #20
 8004394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3314      	adds	r3, #20
 80043b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043ca:	e841 2300 	strex	r3, r2, [r1]
 80043ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1d9      	bne.n	800438e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d013      	beq.n	800440a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	4a7e      	ldr	r2, [pc, #504]	; (80045e0 <HAL_UART_IRQHandler+0x3e0>)
 80043e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fd ff7a 	bl	80022e8 <HAL_DMA_Abort_IT>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004404:	4610      	mov	r0, r2
 8004406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004408:	e00e      	b.n	8004428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f994 	bl	8004738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004410:	e00a      	b.n	8004428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f990 	bl	8004738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004418:	e006      	b.n	8004428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f98c 	bl	8004738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004426:	e175      	b.n	8004714 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	bf00      	nop
    return;
 800442a:	e173      	b.n	8004714 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	2b01      	cmp	r3, #1
 8004432:	f040 814f 	bne.w	80046d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8148 	beq.w	80046d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8141 	beq.w	80046d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004452:	2300      	movs	r3, #0
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	f040 80b6 	bne.w	80045e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004484:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8145 	beq.w	8004718 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004496:	429a      	cmp	r2, r3
 8004498:	f080 813e 	bcs.w	8004718 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ae:	f000 8088 	beq.w	80045c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	330c      	adds	r3, #12
 80044b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044c0:	e853 3f00 	ldrex	r3, [r3]
 80044c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80044de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044ee:	e841 2300 	strex	r3, r2, [r1]
 80044f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1d9      	bne.n	80044b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3314      	adds	r3, #20
 8004504:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800450e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004510:	f023 0301 	bic.w	r3, r3, #1
 8004514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3314      	adds	r3, #20
 800451e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004522:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004526:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800452a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e1      	bne.n	80044fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3314      	adds	r3, #20
 8004540:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800454a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800454c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3314      	adds	r3, #20
 800455a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800455e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004560:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004564:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800456c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e3      	bne.n	800453a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	330c      	adds	r3, #12
 8004586:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004592:	f023 0310 	bic.w	r3, r3, #16
 8004596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80045a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80045a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e3      	bne.n	8004580 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fd fe23 	bl	8002208 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2202      	movs	r2, #2
 80045c6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	4619      	mov	r1, r3
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f8b7 	bl	800474c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045de:	e09b      	b.n	8004718 <HAL_UART_IRQHandler+0x518>
 80045e0:	08004951 	.word	0x08004951
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 808e 	beq.w	800471c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8089 	beq.w	800471c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	330c      	adds	r3, #12
 8004610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800461a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800462e:	647a      	str	r2, [r7, #68]	; 0x44
 8004630:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800463c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e3      	bne.n	800460a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3314      	adds	r3, #20
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	623b      	str	r3, [r7, #32]
   return(result);
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3314      	adds	r3, #20
 8004662:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004666:	633a      	str	r2, [r7, #48]	; 0x30
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800466c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800466e:	e841 2300 	strex	r3, r2, [r1]
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1e3      	bne.n	8004642 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	60fb      	str	r3, [r7, #12]
   return(result);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0310 	bic.w	r3, r3, #16
 800469e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046ac:	61fa      	str	r2, [r7, #28]
 80046ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b0:	69b9      	ldr	r1, [r7, #24]
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	e841 2300 	strex	r3, r2, [r1]
 80046b8:	617b      	str	r3, [r7, #20]
   return(result);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1e3      	bne.n	8004688 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046ca:	4619      	mov	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f83d 	bl	800474c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046d2:	e023      	b.n	800471c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d009      	beq.n	80046f4 <HAL_UART_IRQHandler+0x4f4>
 80046e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f943 	bl	8004978 <UART_Transmit_IT>
    return;
 80046f2:	e014      	b.n	800471e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00e      	beq.n	800471e <HAL_UART_IRQHandler+0x51e>
 8004700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f983 	bl	8004a18 <UART_EndTransmit_IT>
    return;
 8004712:	e004      	b.n	800471e <HAL_UART_IRQHandler+0x51e>
    return;
 8004714:	bf00      	nop
 8004716:	e002      	b.n	800471e <HAL_UART_IRQHandler+0x51e>
      return;
 8004718:	bf00      	nop
 800471a:	e000      	b.n	800471e <HAL_UART_IRQHandler+0x51e>
      return;
 800471c:	bf00      	nop
  }
}
 800471e:	37e8      	adds	r7, #232	; 0xe8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004774:	e03b      	b.n	80047ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d037      	beq.n	80047ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800477e:	f7fc fdef 	bl	8001360 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	6a3a      	ldr	r2, [r7, #32]
 800478a:	429a      	cmp	r2, r3
 800478c:	d302      	bcc.n	8004794 <UART_WaitOnFlagUntilTimeout+0x30>
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e03a      	b.n	800480e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d023      	beq.n	80047ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b80      	cmp	r3, #128	; 0x80
 80047aa:	d020      	beq.n	80047ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	d01d      	beq.n	80047ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d116      	bne.n	80047ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f857 	bl	800488a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2208      	movs	r2, #8
 80047e0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e00f      	b.n	800480e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4013      	ands	r3, r2
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	bf0c      	ite	eq
 80047fe:	2301      	moveq	r3, #1
 8004800:	2300      	movne	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	429a      	cmp	r2, r3
 800480a:	d0b4      	beq.n	8004776 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004816:	b480      	push	{r7}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	4613      	mov	r3, r2
 8004822:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	88fa      	ldrh	r2, [r7, #6]
 800482e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	88fa      	ldrh	r2, [r7, #6]
 8004834:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2222      	movs	r2, #34	; 0x22
 8004840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800485a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695a      	ldr	r2, [r3, #20]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0220 	orr.w	r2, r2, #32
 800487a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800488a:	b480      	push	{r7}
 800488c:	b095      	sub	sp, #84	; 0x54
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	330c      	adds	r3, #12
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	330c      	adds	r3, #12
 80048b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048b2:	643a      	str	r2, [r7, #64]	; 0x40
 80048b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e5      	bne.n	8004892 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3314      	adds	r3, #20
 80048cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3314      	adds	r3, #20
 80048e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e5      	bne.n	80048c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d119      	bne.n	8004936 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	330c      	adds	r3, #12
 8004908:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	60bb      	str	r3, [r7, #8]
   return(result);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f023 0310 	bic.w	r3, r3, #16
 8004918:	647b      	str	r3, [r7, #68]	; 0x44
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004922:	61ba      	str	r2, [r7, #24]
 8004924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6979      	ldr	r1, [r7, #20]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	613b      	str	r3, [r7, #16]
   return(result);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e5      	bne.n	8004902 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004944:	bf00      	nop
 8004946:	3754      	adds	r7, #84	; 0x54
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7ff fee4 	bl	8004738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004970:	bf00      	nop
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b21      	cmp	r3, #33	; 0x21
 800498a:	d13e      	bne.n	8004a0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004994:	d114      	bne.n	80049c0 <UART_Transmit_IT+0x48>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d110      	bne.n	80049c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	1c9a      	adds	r2, r3, #2
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	621a      	str	r2, [r3, #32]
 80049be:	e008      	b.n	80049d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	1c59      	adds	r1, r3, #1
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6211      	str	r1, [r2, #32]
 80049ca:	781a      	ldrb	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29b      	uxth	r3, r3
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	4619      	mov	r1, r3
 80049e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10f      	bne.n	8004a06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e000      	b.n	8004a0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a0a:	2302      	movs	r3, #2
  }
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff fe73 	bl	8004724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08c      	sub	sp, #48	; 0x30
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b22      	cmp	r3, #34	; 0x22
 8004a5a:	f040 80ae 	bne.w	8004bba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a66:	d117      	bne.n	8004a98 <UART_Receive_IT+0x50>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d113      	bne.n	8004a98 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a70:	2300      	movs	r3, #0
 8004a72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a90:	1c9a      	adds	r2, r3, #2
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	629a      	str	r2, [r3, #40]	; 0x28
 8004a96:	e026      	b.n	8004ae6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aaa:	d007      	beq.n	8004abc <UART_Receive_IT+0x74>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <UART_Receive_IT+0x82>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac6:	701a      	strb	r2, [r3, #0]
 8004ac8:	e008      	b.n	8004adc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	4619      	mov	r1, r3
 8004af4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d15d      	bne.n	8004bb6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0220 	bic.w	r2, r2, #32
 8004b08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695a      	ldr	r2, [r3, #20]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d135      	bne.n	8004bac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	613b      	str	r3, [r7, #16]
   return(result);
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f023 0310 	bic.w	r3, r3, #16
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	330c      	adds	r3, #12
 8004b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b66:	623a      	str	r2, [r7, #32]
 8004b68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6a:	69f9      	ldr	r1, [r7, #28]
 8004b6c:	6a3a      	ldr	r2, [r7, #32]
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e5      	bne.n	8004b46 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b10      	cmp	r3, #16
 8004b86:	d10a      	bne.n	8004b9e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff fdd1 	bl	800474c <HAL_UARTEx_RxEventCallback>
 8004baa:	e002      	b.n	8004bb2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7fc f895 	bl	8000cdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e002      	b.n	8004bbc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e000      	b.n	8004bbc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004bba:	2302      	movs	r3, #2
  }
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3730      	adds	r7, #48	; 0x30
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc8:	b0c0      	sub	sp, #256	; 0x100
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	68d9      	ldr	r1, [r3, #12]
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	ea40 0301 	orr.w	r3, r0, r1
 8004bec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c1c:	f021 010c 	bic.w	r1, r1, #12
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	6999      	ldr	r1, [r3, #24]
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	ea40 0301 	orr.w	r3, r0, r1
 8004c4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b8f      	ldr	r3, [pc, #572]	; (8004e90 <UART_SetConfig+0x2cc>)
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d005      	beq.n	8004c64 <UART_SetConfig+0xa0>
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b8d      	ldr	r3, [pc, #564]	; (8004e94 <UART_SetConfig+0x2d0>)
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d104      	bne.n	8004c6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c64:	f7fe fc80 	bl	8003568 <HAL_RCC_GetPCLK2Freq>
 8004c68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c6c:	e003      	b.n	8004c76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c6e:	f7fe fc67 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 8004c72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c80:	f040 810c 	bne.w	8004e9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c96:	4622      	mov	r2, r4
 8004c98:	462b      	mov	r3, r5
 8004c9a:	1891      	adds	r1, r2, r2
 8004c9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c9e:	415b      	adcs	r3, r3
 8004ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	eb12 0801 	adds.w	r8, r2, r1
 8004cac:	4629      	mov	r1, r5
 8004cae:	eb43 0901 	adc.w	r9, r3, r1
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cc6:	4690      	mov	r8, r2
 8004cc8:	4699      	mov	r9, r3
 8004cca:	4623      	mov	r3, r4
 8004ccc:	eb18 0303 	adds.w	r3, r8, r3
 8004cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004cd4:	462b      	mov	r3, r5
 8004cd6:	eb49 0303 	adc.w	r3, r9, r3
 8004cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	18db      	adds	r3, r3, r3
 8004cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	eb42 0303 	adc.w	r3, r2, r3
 8004cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8004d00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d08:	f7fb fac2 	bl	8000290 <__aeabi_uldivmod>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4b61      	ldr	r3, [pc, #388]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004d12:	fba3 2302 	umull	r2, r3, r3, r2
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	011c      	lsls	r4, r3, #4
 8004d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	464b      	mov	r3, r9
 8004d30:	1891      	adds	r1, r2, r2
 8004d32:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d34:	415b      	adcs	r3, r3
 8004d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004d42:	4649      	mov	r1, r9
 8004d44:	eb43 0b01 	adc.w	fp, r3, r1
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d5c:	4692      	mov	sl, r2
 8004d5e:	469b      	mov	fp, r3
 8004d60:	4643      	mov	r3, r8
 8004d62:	eb1a 0303 	adds.w	r3, sl, r3
 8004d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	18db      	adds	r3, r3, r3
 8004d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d8e:	4613      	mov	r3, r2
 8004d90:	eb42 0303 	adc.w	r3, r2, r3
 8004d94:	647b      	str	r3, [r7, #68]	; 0x44
 8004d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d9e:	f7fb fa77 	bl	8000290 <__aeabi_uldivmod>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4611      	mov	r1, r2
 8004da8:	4b3b      	ldr	r3, [pc, #236]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004daa:	fba3 2301 	umull	r2, r3, r3, r1
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	2264      	movs	r2, #100	; 0x64
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	1acb      	subs	r3, r1, r3
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004dbe:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dcc:	441c      	add	r4, r3
 8004dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004dd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ddc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004de0:	4642      	mov	r2, r8
 8004de2:	464b      	mov	r3, r9
 8004de4:	1891      	adds	r1, r2, r2
 8004de6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004de8:	415b      	adcs	r3, r3
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004df0:	4641      	mov	r1, r8
 8004df2:	1851      	adds	r1, r2, r1
 8004df4:	6339      	str	r1, [r7, #48]	; 0x30
 8004df6:	4649      	mov	r1, r9
 8004df8:	414b      	adcs	r3, r1
 8004dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e08:	4659      	mov	r1, fp
 8004e0a:	00cb      	lsls	r3, r1, #3
 8004e0c:	4651      	mov	r1, sl
 8004e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e12:	4651      	mov	r1, sl
 8004e14:	00ca      	lsls	r2, r1, #3
 8004e16:	4610      	mov	r0, r2
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	189b      	adds	r3, r3, r2
 8004e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e24:	464b      	mov	r3, r9
 8004e26:	460a      	mov	r2, r1
 8004e28:	eb42 0303 	adc.w	r3, r2, r3
 8004e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e44:	460b      	mov	r3, r1
 8004e46:	18db      	adds	r3, r3, r3
 8004e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	eb42 0303 	adc.w	r3, r2, r3
 8004e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e5a:	f7fb fa19 	bl	8000290 <__aeabi_uldivmod>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004e64:	fba3 1302 	umull	r1, r3, r3, r2
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	2164      	movs	r1, #100	; 0x64
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	3332      	adds	r3, #50	; 0x32
 8004e76:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <UART_SetConfig+0x2d4>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	f003 0207 	and.w	r2, r3, #7
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4422      	add	r2, r4
 8004e8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e8c:	e106      	b.n	800509c <UART_SetConfig+0x4d8>
 8004e8e:	bf00      	nop
 8004e90:	40011000 	.word	0x40011000
 8004e94:	40011400 	.word	0x40011400
 8004e98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ea6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004eaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004eae:	4642      	mov	r2, r8
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	1891      	adds	r1, r2, r2
 8004eb4:	6239      	str	r1, [r7, #32]
 8004eb6:	415b      	adcs	r3, r3
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ebe:	4641      	mov	r1, r8
 8004ec0:	1854      	adds	r4, r2, r1
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	eb43 0501 	adc.w	r5, r3, r1
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	00eb      	lsls	r3, r5, #3
 8004ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ed6:	00e2      	lsls	r2, r4, #3
 8004ed8:	4614      	mov	r4, r2
 8004eda:	461d      	mov	r5, r3
 8004edc:	4643      	mov	r3, r8
 8004ede:	18e3      	adds	r3, r4, r3
 8004ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	eb45 0303 	adc.w	r3, r5, r3
 8004eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	008b      	lsls	r3, r1, #2
 8004f0e:	4621      	mov	r1, r4
 8004f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f14:	4621      	mov	r1, r4
 8004f16:	008a      	lsls	r2, r1, #2
 8004f18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f1c:	f7fb f9b8 	bl	8000290 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4b60      	ldr	r3, [pc, #384]	; (80050a8 <UART_SetConfig+0x4e4>)
 8004f26:	fba3 2302 	umull	r2, r3, r3, r2
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	011c      	lsls	r4, r3, #4
 8004f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	1891      	adds	r1, r2, r2
 8004f46:	61b9      	str	r1, [r7, #24]
 8004f48:	415b      	adcs	r3, r3
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f50:	4641      	mov	r1, r8
 8004f52:	1851      	adds	r1, r2, r1
 8004f54:	6139      	str	r1, [r7, #16]
 8004f56:	4649      	mov	r1, r9
 8004f58:	414b      	adcs	r3, r1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f68:	4659      	mov	r1, fp
 8004f6a:	00cb      	lsls	r3, r1, #3
 8004f6c:	4651      	mov	r1, sl
 8004f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f72:	4651      	mov	r1, sl
 8004f74:	00ca      	lsls	r2, r1, #3
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	189b      	adds	r3, r3, r2
 8004f80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f84:	464b      	mov	r3, r9
 8004f86:	460a      	mov	r2, r1
 8004f88:	eb42 0303 	adc.w	r3, r2, r3
 8004f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fa8:	4649      	mov	r1, r9
 8004faa:	008b      	lsls	r3, r1, #2
 8004fac:	4641      	mov	r1, r8
 8004fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fb2:	4641      	mov	r1, r8
 8004fb4:	008a      	lsls	r2, r1, #2
 8004fb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004fba:	f7fb f969 	bl	8000290 <__aeabi_uldivmod>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4b38      	ldr	r3, [pc, #224]	; (80050a8 <UART_SetConfig+0x4e4>)
 8004fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	2264      	movs	r2, #100	; 0x64
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	1acb      	subs	r3, r1, r3
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	3332      	adds	r3, #50	; 0x32
 8004fd8:	4a33      	ldr	r2, [pc, #204]	; (80050a8 <UART_SetConfig+0x4e4>)
 8004fda:	fba2 2303 	umull	r2, r3, r2, r3
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fe4:	441c      	add	r4, r3
 8004fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fea:	2200      	movs	r2, #0
 8004fec:	673b      	str	r3, [r7, #112]	; 0x70
 8004fee:	677a      	str	r2, [r7, #116]	; 0x74
 8004ff0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ff4:	4642      	mov	r2, r8
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	1891      	adds	r1, r2, r2
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	415b      	adcs	r3, r3
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005004:	4641      	mov	r1, r8
 8005006:	1851      	adds	r1, r2, r1
 8005008:	6039      	str	r1, [r7, #0]
 800500a:	4649      	mov	r1, r9
 800500c:	414b      	adcs	r3, r1
 800500e:	607b      	str	r3, [r7, #4]
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800501c:	4659      	mov	r1, fp
 800501e:	00cb      	lsls	r3, r1, #3
 8005020:	4651      	mov	r1, sl
 8005022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005026:	4651      	mov	r1, sl
 8005028:	00ca      	lsls	r2, r1, #3
 800502a:	4610      	mov	r0, r2
 800502c:	4619      	mov	r1, r3
 800502e:	4603      	mov	r3, r0
 8005030:	4642      	mov	r2, r8
 8005032:	189b      	adds	r3, r3, r2
 8005034:	66bb      	str	r3, [r7, #104]	; 0x68
 8005036:	464b      	mov	r3, r9
 8005038:	460a      	mov	r2, r1
 800503a:	eb42 0303 	adc.w	r3, r2, r3
 800503e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	663b      	str	r3, [r7, #96]	; 0x60
 800504a:	667a      	str	r2, [r7, #100]	; 0x64
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005058:	4649      	mov	r1, r9
 800505a:	008b      	lsls	r3, r1, #2
 800505c:	4641      	mov	r1, r8
 800505e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005062:	4641      	mov	r1, r8
 8005064:	008a      	lsls	r2, r1, #2
 8005066:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800506a:	f7fb f911 	bl	8000290 <__aeabi_uldivmod>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <UART_SetConfig+0x4e4>)
 8005074:	fba3 1302 	umull	r1, r3, r3, r2
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	2164      	movs	r1, #100	; 0x64
 800507c:	fb01 f303 	mul.w	r3, r1, r3
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	3332      	adds	r3, #50	; 0x32
 8005086:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <UART_SetConfig+0x4e4>)
 8005088:	fba2 2303 	umull	r2, r3, r2, r3
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	f003 020f 	and.w	r2, r3, #15
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4422      	add	r2, r4
 800509a:	609a      	str	r2, [r3, #8]
}
 800509c:	bf00      	nop
 800509e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050a2:	46bd      	mov	sp, r7
 80050a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050a8:	51eb851f 	.word	0x51eb851f

080050ac <__NVIC_SetPriority>:
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	6039      	str	r1, [r7, #0]
 80050b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	db0a      	blt.n	80050d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	490c      	ldr	r1, [pc, #48]	; (80050f8 <__NVIC_SetPriority+0x4c>)
 80050c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ca:	0112      	lsls	r2, r2, #4
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	440b      	add	r3, r1
 80050d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80050d4:	e00a      	b.n	80050ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4908      	ldr	r1, [pc, #32]	; (80050fc <__NVIC_SetPriority+0x50>)
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	3b04      	subs	r3, #4
 80050e4:	0112      	lsls	r2, r2, #4
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	440b      	add	r3, r1
 80050ea:	761a      	strb	r2, [r3, #24]
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	e000e100 	.word	0xe000e100
 80050fc:	e000ed00 	.word	0xe000ed00

08005100 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005104:	4b05      	ldr	r3, [pc, #20]	; (800511c <SysTick_Handler+0x1c>)
 8005106:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005108:	f003 f8ea 	bl	80082e0 <xTaskGetSchedulerState>
 800510c:	4603      	mov	r3, r0
 800510e:	2b01      	cmp	r3, #1
 8005110:	d001      	beq.n	8005116 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005112:	f004 f809 	bl	8009128 <xPortSysTickHandler>
  }
}
 8005116:	bf00      	nop
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	e000e010 	.word	0xe000e010

08005120 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005124:	2100      	movs	r1, #0
 8005126:	f06f 0004 	mvn.w	r0, #4
 800512a:	f7ff ffbf 	bl	80050ac <__NVIC_SetPriority>
#endif
}
 800512e:	bf00      	nop
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800513a:	f3ef 8305 	mrs	r3, IPSR
 800513e:	603b      	str	r3, [r7, #0]
  return(result);
 8005140:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005146:	f06f 0305 	mvn.w	r3, #5
 800514a:	607b      	str	r3, [r7, #4]
 800514c:	e00c      	b.n	8005168 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800514e:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <osKernelInitialize+0x44>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d105      	bne.n	8005162 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005156:	4b08      	ldr	r3, [pc, #32]	; (8005178 <osKernelInitialize+0x44>)
 8005158:	2201      	movs	r2, #1
 800515a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800515c:	2300      	movs	r3, #0
 800515e:	607b      	str	r3, [r7, #4]
 8005160:	e002      	b.n	8005168 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005162:	f04f 33ff 	mov.w	r3, #4294967295
 8005166:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005168:	687b      	ldr	r3, [r7, #4]
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	200002b8 	.word	0x200002b8

0800517c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005182:	f3ef 8305 	mrs	r3, IPSR
 8005186:	603b      	str	r3, [r7, #0]
  return(result);
 8005188:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <osKernelStart+0x1a>
    stat = osErrorISR;
 800518e:	f06f 0305 	mvn.w	r3, #5
 8005192:	607b      	str	r3, [r7, #4]
 8005194:	e010      	b.n	80051b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005196:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <osKernelStart+0x48>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d109      	bne.n	80051b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800519e:	f7ff ffbf 	bl	8005120 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <osKernelStart+0x48>)
 80051a4:	2202      	movs	r2, #2
 80051a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80051a8:	f002 fba0 	bl	80078ec <vTaskStartScheduler>
      stat = osOK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	607b      	str	r3, [r7, #4]
 80051b0:	e002      	b.n	80051b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80051b2:	f04f 33ff 	mov.w	r3, #4294967295
 80051b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051b8:	687b      	ldr	r3, [r7, #4]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	200002b8 	.word	0x200002b8

080051c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08e      	sub	sp, #56	; 0x38
 80051cc:	af04      	add	r7, sp, #16
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051d8:	f3ef 8305 	mrs	r3, IPSR
 80051dc:	617b      	str	r3, [r7, #20]
  return(result);
 80051de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d17e      	bne.n	80052e2 <osThreadNew+0x11a>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d07b      	beq.n	80052e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80051ea:	2380      	movs	r3, #128	; 0x80
 80051ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80051ee:	2318      	movs	r3, #24
 80051f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80051f6:	f04f 33ff 	mov.w	r3, #4294967295
 80051fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d045      	beq.n	800528e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <osThreadNew+0x48>
        name = attr->name;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <osThreadNew+0x6e>
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b38      	cmp	r3, #56	; 0x38
 8005228:	d805      	bhi.n	8005236 <osThreadNew+0x6e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <osThreadNew+0x72>
        return (NULL);
 8005236:	2300      	movs	r3, #0
 8005238:	e054      	b.n	80052e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	089b      	lsrs	r3, r3, #2
 8005248:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00e      	beq.n	8005270 <osThreadNew+0xa8>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2ba7      	cmp	r3, #167	; 0xa7
 8005258:	d90a      	bls.n	8005270 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800525e:	2b00      	cmp	r3, #0
 8005260:	d006      	beq.n	8005270 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <osThreadNew+0xa8>
        mem = 1;
 800526a:	2301      	movs	r3, #1
 800526c:	61bb      	str	r3, [r7, #24]
 800526e:	e010      	b.n	8005292 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10c      	bne.n	8005292 <osThreadNew+0xca>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d108      	bne.n	8005292 <osThreadNew+0xca>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d104      	bne.n	8005292 <osThreadNew+0xca>
          mem = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	61bb      	str	r3, [r7, #24]
 800528c:	e001      	b.n	8005292 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d110      	bne.n	80052ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80052a0:	9202      	str	r2, [sp, #8]
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	6a3a      	ldr	r2, [r7, #32]
 80052ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f002 f930 	bl	8007514 <xTaskCreateStatic>
 80052b4:	4603      	mov	r3, r0
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	e013      	b.n	80052e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d110      	bne.n	80052e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	f107 0310 	add.w	r3, r7, #16
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f002 f97b 	bl	80075ce <xTaskCreate>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d001      	beq.n	80052e2 <osThreadNew+0x11a>
            hTask = NULL;
 80052de:	2300      	movs	r3, #0
 80052e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80052e2:	693b      	ldr	r3, [r7, #16]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3728      	adds	r7, #40	; 0x28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052f4:	f3ef 8305 	mrs	r3, IPSR
 80052f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80052fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d003      	beq.n	8005308 <osDelay+0x1c>
    stat = osErrorISR;
 8005300:	f06f 0305 	mvn.w	r3, #5
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e007      	b.n	8005318 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f002 fab6 	bl	8007884 <vTaskDelay>
    }
  }

  return (stat);
 8005318:	68fb      	ldr	r3, [r7, #12]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8005322:	b580      	push	{r7, lr}
 8005324:	b086      	sub	sp, #24
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800532e:	f3ef 8305 	mrs	r3, IPSR
 8005332:	60fb      	str	r3, [r7, #12]
  return(result);
 8005334:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8005336:	2b00      	cmp	r3, #0
 8005338:	d12d      	bne.n	8005396 <osEventFlagsNew+0x74>
    mem = -1;
 800533a:	f04f 33ff 	mov.w	r3, #4294967295
 800533e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d015      	beq.n	8005372 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d006      	beq.n	800535c <osEventFlagsNew+0x3a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	2b1f      	cmp	r3, #31
 8005354:	d902      	bls.n	800535c <osEventFlagsNew+0x3a>
        mem = 1;
 8005356:	2301      	movs	r3, #1
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	e00c      	b.n	8005376 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d108      	bne.n	8005376 <osEventFlagsNew+0x54>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d104      	bne.n	8005376 <osEventFlagsNew+0x54>
          mem = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	e001      	b.n	8005376 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d106      	bne.n	800538a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	4618      	mov	r0, r3
 8005382:	f000 fd5d 	bl	8005e40 <xEventGroupCreateStatic>
 8005386:	6178      	str	r0, [r7, #20]
 8005388:	e005      	b.n	8005396 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d102      	bne.n	8005396 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8005390:	f000 fd8d 	bl	8005eae <xEventGroupCreate>
 8005394:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005396:	697b      	ldr	r3, [r7, #20]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d004      	beq.n	80053be <osEventFlagsSet+0x1e>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80053be:	f06f 0303 	mvn.w	r3, #3
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	e028      	b.n	8005418 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c6:	f3ef 8305 	mrs	r3, IPSR
 80053ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80053cc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d01d      	beq.n	800540e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80053d6:	f107 0308 	add.w	r3, r7, #8
 80053da:	461a      	mov	r2, r3
 80053dc:	6839      	ldr	r1, [r7, #0]
 80053de:	6938      	ldr	r0, [r7, #16]
 80053e0:	f000 ff86 	bl	80062f0 <xEventGroupSetBitsFromISR>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d103      	bne.n	80053f2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80053ea:	f06f 0302 	mvn.w	r3, #2
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e012      	b.n	8005418 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00d      	beq.n	8005418 <osEventFlagsSet+0x78>
 80053fc:	4b09      	ldr	r3, [pc, #36]	; (8005424 <osEventFlagsSet+0x84>)
 80053fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	e004      	b.n	8005418 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	6938      	ldr	r0, [r7, #16]
 8005412:	f000 fea5 	bl	8006160 <xEventGroupSetBits>
 8005416:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8005418:	697b      	ldr	r3, [r7, #20]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	e000ed04 	.word	0xe000ed04

08005428 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d004      	beq.n	8005446 <osEventFlagsClear+0x1e>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8005446:	f06f 0303 	mvn.w	r3, #3
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e019      	b.n	8005482 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800544e:	f3ef 8305 	mrs	r3, IPSR
 8005452:	60fb      	str	r3, [r7, #12]
  return(result);
 8005454:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00e      	beq.n	8005478 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800545a:	6938      	ldr	r0, [r7, #16]
 800545c:	f000 fe5c 	bl	8006118 <xEventGroupGetBitsFromISR>
 8005460:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8005462:	6839      	ldr	r1, [r7, #0]
 8005464:	6938      	ldr	r0, [r7, #16]
 8005466:	f000 fe43 	bl	80060f0 <xEventGroupClearBitsFromISR>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d108      	bne.n	8005482 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8005470:	f06f 0302 	mvn.w	r3, #2
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	e004      	b.n	8005482 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	6938      	ldr	r0, [r7, #16]
 800547c:	f000 fe00 	bl	8006080 <xEventGroupClearBits>
 8005480:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8005482:	697b      	ldr	r3, [r7, #20]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800548c:	b580      	push	{r7, lr}
 800548e:	b08c      	sub	sp, #48	; 0x30
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d004      	beq.n	80054ae <osEventFlagsWait+0x22>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80054ae:	f06f 0303 	mvn.w	r3, #3
 80054b2:	61fb      	str	r3, [r7, #28]
 80054b4:	e04b      	b.n	800554e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054b6:	f3ef 8305 	mrs	r3, IPSR
 80054ba:	617b      	str	r3, [r7, #20]
  return(result);
 80054bc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80054c2:	f06f 0305 	mvn.w	r3, #5
 80054c6:	61fb      	str	r3, [r7, #28]
 80054c8:	e041      	b.n	800554e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80054d4:	2301      	movs	r3, #1
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
 80054d8:	e001      	b.n	80054de <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80054da:	2300      	movs	r3, #0
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	623b      	str	r3, [r7, #32]
 80054ec:	e001      	b.n	80054f2 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80054ee:	2301      	movs	r3, #1
 80054f0:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	6a3a      	ldr	r2, [r7, #32]
 80054fa:	68b9      	ldr	r1, [r7, #8]
 80054fc:	69b8      	ldr	r0, [r7, #24]
 80054fe:	f000 fcf1 	bl	8005ee4 <xEventGroupWaitBits>
 8005502:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d010      	beq.n	8005530 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	4013      	ands	r3, r2
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	429a      	cmp	r2, r3
 8005518:	d019      	beq.n	800554e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8005520:	f06f 0301 	mvn.w	r3, #1
 8005524:	61fb      	str	r3, [r7, #28]
 8005526:	e012      	b.n	800554e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005528:	f06f 0302 	mvn.w	r3, #2
 800552c:	61fb      	str	r3, [r7, #28]
 800552e:	e00e      	b.n	800554e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	4013      	ands	r3, r2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d109      	bne.n	800554e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8005540:	f06f 0301 	mvn.w	r3, #1
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	e002      	b.n	800554e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005548:	f06f 0302 	mvn.w	r3, #2
 800554c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800554e:	69fb      	ldr	r3, [r7, #28]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3728      	adds	r7, #40	; 0x28
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005558:	b580      	push	{r7, lr}
 800555a:	b08a      	sub	sp, #40	; 0x28
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005564:	2300      	movs	r3, #0
 8005566:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005568:	f3ef 8305 	mrs	r3, IPSR
 800556c:	613b      	str	r3, [r7, #16]
  return(result);
 800556e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005570:	2b00      	cmp	r3, #0
 8005572:	d175      	bne.n	8005660 <osSemaphoreNew+0x108>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d072      	beq.n	8005660 <osSemaphoreNew+0x108>
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	429a      	cmp	r2, r3
 8005580:	d86e      	bhi.n	8005660 <osSemaphoreNew+0x108>
    mem = -1;
 8005582:	f04f 33ff 	mov.w	r3, #4294967295
 8005586:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d015      	beq.n	80055ba <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d006      	beq.n	80055a4 <osSemaphoreNew+0x4c>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	2b4f      	cmp	r3, #79	; 0x4f
 800559c:	d902      	bls.n	80055a4 <osSemaphoreNew+0x4c>
        mem = 1;
 800559e:	2301      	movs	r3, #1
 80055a0:	61bb      	str	r3, [r7, #24]
 80055a2:	e00c      	b.n	80055be <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d108      	bne.n	80055be <osSemaphoreNew+0x66>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d104      	bne.n	80055be <osSemaphoreNew+0x66>
          mem = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	61bb      	str	r3, [r7, #24]
 80055b8:	e001      	b.n	80055be <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c4:	d04c      	beq.n	8005660 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d128      	bne.n	800561e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d10a      	bne.n	80055e8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	2203      	movs	r2, #3
 80055d8:	9200      	str	r2, [sp, #0]
 80055da:	2200      	movs	r2, #0
 80055dc:	2100      	movs	r1, #0
 80055de:	2001      	movs	r0, #1
 80055e0:	f000 ffb6 	bl	8006550 <xQueueGenericCreateStatic>
 80055e4:	61f8      	str	r0, [r7, #28]
 80055e6:	e005      	b.n	80055f4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80055e8:	2203      	movs	r2, #3
 80055ea:	2100      	movs	r1, #0
 80055ec:	2001      	movs	r0, #1
 80055ee:	f001 f827 	bl	8006640 <xQueueGenericCreate>
 80055f2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d022      	beq.n	8005640 <osSemaphoreNew+0xe8>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01f      	beq.n	8005640 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005600:	2300      	movs	r3, #0
 8005602:	2200      	movs	r2, #0
 8005604:	2100      	movs	r1, #0
 8005606:	69f8      	ldr	r0, [r7, #28]
 8005608:	f001 f8e2 	bl	80067d0 <xQueueGenericSend>
 800560c:	4603      	mov	r3, r0
 800560e:	2b01      	cmp	r3, #1
 8005610:	d016      	beq.n	8005640 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005612:	69f8      	ldr	r0, [r7, #28]
 8005614:	f001 fdaa 	bl	800716c <vQueueDelete>
            hSemaphore = NULL;
 8005618:	2300      	movs	r3, #0
 800561a:	61fb      	str	r3, [r7, #28]
 800561c:	e010      	b.n	8005640 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d108      	bne.n	8005636 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	461a      	mov	r2, r3
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f001 f864 	bl	80066fa <xQueueCreateCountingSemaphoreStatic>
 8005632:	61f8      	str	r0, [r7, #28]
 8005634:	e004      	b.n	8005640 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f001 f895 	bl	8006768 <xQueueCreateCountingSemaphore>
 800563e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00c      	beq.n	8005660 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <osSemaphoreNew+0xfc>
          name = attr->name;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	e001      	b.n	8005658 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005658:	6979      	ldr	r1, [r7, #20]
 800565a:	69f8      	ldr	r0, [r7, #28]
 800565c:	f001 fed2 	bl	8007404 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005660:	69fb      	ldr	r3, [r7, #28]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d103      	bne.n	800568c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005684:	f06f 0303 	mvn.w	r3, #3
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	e039      	b.n	8005700 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800568c:	f3ef 8305 	mrs	r3, IPSR
 8005690:	60fb      	str	r3, [r7, #12]
  return(result);
 8005692:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005694:	2b00      	cmp	r3, #0
 8005696:	d022      	beq.n	80056de <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800569e:	f06f 0303 	mvn.w	r3, #3
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	e02c      	b.n	8005700 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80056aa:	f107 0308 	add.w	r3, r7, #8
 80056ae:	461a      	mov	r2, r3
 80056b0:	2100      	movs	r1, #0
 80056b2:	6938      	ldr	r0, [r7, #16]
 80056b4:	f001 fc9e 	bl	8006ff4 <xQueueReceiveFromISR>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d003      	beq.n	80056c6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80056be:	f06f 0302 	mvn.w	r3, #2
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	e01c      	b.n	8005700 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d019      	beq.n	8005700 <osSemaphoreAcquire+0x94>
 80056cc:	4b0f      	ldr	r3, [pc, #60]	; (800570c <osSemaphoreAcquire+0xa0>)
 80056ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	e010      	b.n	8005700 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80056de:	6839      	ldr	r1, [r7, #0]
 80056e0:	6938      	ldr	r0, [r7, #16]
 80056e2:	f001 fb7b 	bl	8006ddc <xQueueSemaphoreTake>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d009      	beq.n	8005700 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80056f2:	f06f 0301 	mvn.w	r3, #1
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	e002      	b.n	8005700 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80056fa:	f06f 0302 	mvn.w	r3, #2
 80056fe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005700:	697b      	ldr	r3, [r7, #20]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	e000ed04 	.word	0xe000ed04

08005710 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	; 0x28
 8005714:	af02      	add	r7, sp, #8
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800571c:	2300      	movs	r3, #0
 800571e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005720:	f3ef 8305 	mrs	r3, IPSR
 8005724:	613b      	str	r3, [r7, #16]
  return(result);
 8005726:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005728:	2b00      	cmp	r3, #0
 800572a:	d15f      	bne.n	80057ec <osMessageQueueNew+0xdc>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d05c      	beq.n	80057ec <osMessageQueueNew+0xdc>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d059      	beq.n	80057ec <osMessageQueueNew+0xdc>
    mem = -1;
 8005738:	f04f 33ff 	mov.w	r3, #4294967295
 800573c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d029      	beq.n	8005798 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d012      	beq.n	8005772 <osMessageQueueNew+0x62>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	2b4f      	cmp	r3, #79	; 0x4f
 8005752:	d90e      	bls.n	8005772 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695a      	ldr	r2, [r3, #20]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	fb01 f303 	mul.w	r3, r1, r3
 8005768:	429a      	cmp	r2, r3
 800576a:	d302      	bcc.n	8005772 <osMessageQueueNew+0x62>
        mem = 1;
 800576c:	2301      	movs	r3, #1
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	e014      	b.n	800579c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d110      	bne.n	800579c <osMessageQueueNew+0x8c>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10c      	bne.n	800579c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005786:	2b00      	cmp	r3, #0
 8005788:	d108      	bne.n	800579c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d104      	bne.n	800579c <osMessageQueueNew+0x8c>
          mem = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	61bb      	str	r3, [r7, #24]
 8005796:	e001      	b.n	800579c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005798:	2300      	movs	r3, #0
 800579a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d10b      	bne.n	80057ba <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2100      	movs	r1, #0
 80057ac:	9100      	str	r1, [sp, #0]
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 fecd 	bl	8006550 <xQueueGenericCreateStatic>
 80057b6:	61f8      	str	r0, [r7, #28]
 80057b8:	e008      	b.n	80057cc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d105      	bne.n	80057cc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80057c0:	2200      	movs	r2, #0
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 ff3b 	bl	8006640 <xQueueGenericCreate>
 80057ca:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00c      	beq.n	80057ec <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	e001      	b.n	80057e4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80057e4:	6979      	ldr	r1, [r7, #20]
 80057e6:	69f8      	ldr	r0, [r7, #28]
 80057e8:	f001 fe0c 	bl	8007404 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80057ec:	69fb      	ldr	r3, [r7, #28]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3720      	adds	r7, #32
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	4613      	mov	r3, r2
 8005806:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800580c:	2300      	movs	r3, #0
 800580e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005810:	f3ef 8305 	mrs	r3, IPSR
 8005814:	617b      	str	r3, [r7, #20]
  return(result);
 8005816:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005818:	2b00      	cmp	r3, #0
 800581a:	d028      	beq.n	800586e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <osMessageQueuePut+0x36>
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <osMessageQueuePut+0x36>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800582e:	f06f 0303 	mvn.w	r3, #3
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	e038      	b.n	80058a8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005836:	2300      	movs	r3, #0
 8005838:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800583a:	f107 0210 	add.w	r2, r7, #16
 800583e:	2300      	movs	r3, #0
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	69b8      	ldr	r0, [r7, #24]
 8005844:	f001 f8c2 	bl	80069cc <xQueueGenericSendFromISR>
 8005848:	4603      	mov	r3, r0
 800584a:	2b01      	cmp	r3, #1
 800584c:	d003      	beq.n	8005856 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800584e:	f06f 0302 	mvn.w	r3, #2
 8005852:	61fb      	str	r3, [r7, #28]
 8005854:	e028      	b.n	80058a8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d025      	beq.n	80058a8 <osMessageQueuePut+0xb0>
 800585c:	4b15      	ldr	r3, [pc, #84]	; (80058b4 <osMessageQueuePut+0xbc>)
 800585e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005862:	601a      	str	r2, [r3, #0]
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	e01c      	b.n	80058a8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d002      	beq.n	800587a <osMessageQueuePut+0x82>
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d103      	bne.n	8005882 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800587a:	f06f 0303 	mvn.w	r3, #3
 800587e:	61fb      	str	r3, [r7, #28]
 8005880:	e012      	b.n	80058a8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005882:	2300      	movs	r3, #0
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	69b8      	ldr	r0, [r7, #24]
 800588a:	f000 ffa1 	bl	80067d0 <xQueueGenericSend>
 800588e:	4603      	mov	r3, r0
 8005890:	2b01      	cmp	r3, #1
 8005892:	d009      	beq.n	80058a8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800589a:	f06f 0301 	mvn.w	r3, #1
 800589e:	61fb      	str	r3, [r7, #28]
 80058a0:	e002      	b.n	80058a8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80058a2:	f06f 0302 	mvn.w	r3, #2
 80058a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80058a8:	69fb      	ldr	r3, [r7, #28]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3720      	adds	r7, #32
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	e000ed04 	.word	0xe000ed04

080058b8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ce:	f3ef 8305 	mrs	r3, IPSR
 80058d2:	617b      	str	r3, [r7, #20]
  return(result);
 80058d4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d028      	beq.n	800592c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <osMessageQueueGet+0x34>
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <osMessageQueueGet+0x34>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80058ec:	f06f 0303 	mvn.w	r3, #3
 80058f0:	61fb      	str	r3, [r7, #28]
 80058f2:	e037      	b.n	8005964 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80058f4:	2300      	movs	r3, #0
 80058f6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80058f8:	f107 0310 	add.w	r3, r7, #16
 80058fc:	461a      	mov	r2, r3
 80058fe:	68b9      	ldr	r1, [r7, #8]
 8005900:	69b8      	ldr	r0, [r7, #24]
 8005902:	f001 fb77 	bl	8006ff4 <xQueueReceiveFromISR>
 8005906:	4603      	mov	r3, r0
 8005908:	2b01      	cmp	r3, #1
 800590a:	d003      	beq.n	8005914 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800590c:	f06f 0302 	mvn.w	r3, #2
 8005910:	61fb      	str	r3, [r7, #28]
 8005912:	e027      	b.n	8005964 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d024      	beq.n	8005964 <osMessageQueueGet+0xac>
 800591a:	4b15      	ldr	r3, [pc, #84]	; (8005970 <osMessageQueueGet+0xb8>)
 800591c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	e01b      	b.n	8005964 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <osMessageQueueGet+0x80>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d103      	bne.n	8005940 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005938:	f06f 0303 	mvn.w	r3, #3
 800593c:	61fb      	str	r3, [r7, #28]
 800593e:	e011      	b.n	8005964 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	68b9      	ldr	r1, [r7, #8]
 8005944:	69b8      	ldr	r0, [r7, #24]
 8005946:	f001 f969 	bl	8006c1c <xQueueReceive>
 800594a:	4603      	mov	r3, r0
 800594c:	2b01      	cmp	r3, #1
 800594e:	d009      	beq.n	8005964 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005956:	f06f 0301 	mvn.w	r3, #1
 800595a:	61fb      	str	r3, [r7, #28]
 800595c:	e002      	b.n	8005964 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800595e:	f06f 0302 	mvn.w	r3, #2
 8005962:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005964:	69fb      	ldr	r3, [r7, #28]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	e000ed04 	.word	0xe000ed04

08005974 <osMemoryPoolNew>:
/* Static memory pool functions */
static void  FreeBlock   (MemPool_t *mp, void *block);
static void *AllocBlock  (MemPool_t *mp);
static void *CreateBlock (MemPool_t *mp);

osMemoryPoolId_t osMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b08a      	sub	sp, #40	; 0x28
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005980:	f3ef 8305 	mrs	r3, IPSR
 8005984:	613b      	str	r3, [r7, #16]
  return(result);
 8005986:	693b      	ldr	r3, [r7, #16]
  MemPool_t *mp;
  const char *name;
  int32_t mem_cb, mem_mp;
  uint32_t sz;

  if (IS_IRQ()) {
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <osMemoryPoolNew+0x1e>
    mp = NULL;
 800598c:	2300      	movs	r3, #0
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
 8005990:	e0be      	b.n	8005b10 <osMemoryPoolNew+0x19c>
  }
  else if ((block_count == 0U) || (block_size == 0U)) {
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <osMemoryPoolNew+0x2a>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d102      	bne.n	80059a4 <osMemoryPoolNew+0x30>
    mp = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
 80059a2:	e0b5      	b.n	8005b10 <osMemoryPoolNew+0x19c>
  }
  else {
    mp = NULL;
 80059a4:	2300      	movs	r3, #0
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
    sz = MEMPOOL_ARR_SIZE (block_count, block_size);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	3303      	adds	r3, #3
 80059ac:	f023 0203 	bic.w	r2, r3, #3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	fb02 f303 	mul.w	r3, r2, r3
 80059b6:	617b      	str	r3, [r7, #20]

    name = NULL;
 80059b8:	2300      	movs	r3, #0
 80059ba:	623b      	str	r3, [r7, #32]
    mem_cb = -1;
 80059bc:	f04f 33ff 	mov.w	r3, #4294967295
 80059c0:	61fb      	str	r3, [r7, #28]
    mem_mp = -1;
 80059c2:	f04f 33ff 	mov.w	r3, #4294967295
 80059c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d038      	beq.n	8005a40 <osMemoryPoolNew+0xcc>
      if (attr->name != NULL) {
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <osMemoryPoolNew+0x68>
        name = attr->name;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(MemPool_t))) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d006      	beq.n	80059f2 <osMemoryPoolNew+0x7e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	2b73      	cmp	r3, #115	; 0x73
 80059ea:	d902      	bls.n	80059f2 <osMemoryPoolNew+0x7e>
        /* Static control block is provided */
        mem_cb = 1;
 80059ec:	2301      	movs	r3, #1
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	e009      	b.n	8005a06 <osMemoryPoolNew+0x92>
      }
      else if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d105      	bne.n	8005a06 <osMemoryPoolNew+0x92>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <osMemoryPoolNew+0x92>
        /* Allocate control block memory on heap */
        mem_cb = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
      }

      if ((attr->mp_mem == NULL) && (attr->mp_size == 0U)) {
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <osMemoryPoolNew+0xa8>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d102      	bne.n	8005a1c <osMemoryPoolNew+0xa8>
        /* Allocate memory array on heap */
          mem_mp = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61bb      	str	r3, [r7, #24]
 8005a1a:	e015      	b.n	8005a48 <osMemoryPoolNew+0xd4>
      }
      else {
        if (attr->mp_mem != NULL) {
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d011      	beq.n	8005a48 <osMemoryPoolNew+0xd4>
          /* Check if array is 4-byte aligned */
          if (((uint32_t)attr->mp_mem & 3U) == 0U) {
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0303 	and.w	r3, r3, #3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10b      	bne.n	8005a48 <osMemoryPoolNew+0xd4>
            /* Check if array big enough */
            if (attr->mp_size >= sz) {
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d806      	bhi.n	8005a48 <osMemoryPoolNew+0xd4>
              /* Static memory pool array is provided */
              mem_mp = 1;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	e003      	b.n	8005a48 <osMemoryPoolNew+0xd4>
        }
      }
    }
    else {
      /* Attributes not provided, allocate memory on heap */
      mem_cb = 0;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61fb      	str	r3, [r7, #28]
      mem_mp = 0;
 8005a44:	2300      	movs	r3, #0
 8005a46:	61bb      	str	r3, [r7, #24]
    }

    if (mem_cb == 0) {
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d104      	bne.n	8005a58 <osMemoryPoolNew+0xe4>
      mp = pvPortMalloc (sizeof(MemPool_t));
 8005a4e:	2074      	movs	r0, #116	; 0x74
 8005a50:	f003 fbfa 	bl	8009248 <pvPortMalloc>
 8005a54:	6278      	str	r0, [r7, #36]	; 0x24
 8005a56:	e002      	b.n	8005a5e <osMemoryPoolNew+0xea>
    } else {
      mp = attr->cb_mem;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (mp != NULL) {
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01b      	beq.n	8005a9c <osMemoryPoolNew+0x128>
      /* Create a semaphore (max count == initial count == block_count) */
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        mp->sem = xSemaphoreCreateCountingStatic (block_count, block_count, &mp->mem_sem);
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	3324      	adds	r3, #36	; 0x24
 8005a68:	461a      	mov	r2, r3
 8005a6a:	68f9      	ldr	r1, [r7, #12]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 fe44 	bl	80066fa <xQueueCreateCountingSemaphoreStatic>
 8005a72:	4602      	mov	r2, r0
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	605a      	str	r2, [r3, #4]
        mp->sem = xSemaphoreCreateCounting (block_count, block_count);
      #else
        mp->sem == NULL;
      #endif

      if (mp->sem != NULL) {
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00d      	beq.n	8005a9c <osMemoryPoolNew+0x128>
        /* Setup memory array */
        if (mem_mp == 0) {
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <osMemoryPoolNew+0x120>
          mp->mem_arr = pvPortMalloc (sz);
 8005a86:	6978      	ldr	r0, [r7, #20]
 8005a88:	f003 fbde 	bl	8009248 <pvPortMalloc>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	609a      	str	r2, [r3, #8]
 8005a92:	e003      	b.n	8005a9c <osMemoryPoolNew+0x128>
        } else {
          mp->mem_arr = attr->mp_mem;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	609a      	str	r2, [r3, #8]
        }
      }
    }

    if ((mp != NULL) && (mp->mem_arr != NULL)) {
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d02b      	beq.n	8005afa <osMemoryPoolNew+0x186>
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d027      	beq.n	8005afa <osMemoryPoolNew+0x186>
      /* Memory pool can be created */
      mp->head    = NULL;
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
      mp->mem_sz  = sz;
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	60da      	str	r2, [r3, #12]
      mp->name    = name;
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	6a3a      	ldr	r2, [r7, #32]
 8005aba:	611a      	str	r2, [r3, #16]
      mp->bl_sz   = block_size;
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	615a      	str	r2, [r3, #20]
      mp->bl_cnt  = block_count;
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	619a      	str	r2, [r3, #24]
      mp->n       = 0U;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	2200      	movs	r2, #0
 8005acc:	61da      	str	r2, [r3, #28]

      /* Set heap allocated memory flags */
      mp->status = MPOOL_STATUS;
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	4a12      	ldr	r2, [pc, #72]	; (8005b1c <osMemoryPoolNew+0x1a8>)
 8005ad2:	621a      	str	r2, [r3, #32]

      if (mem_cb == 0) {
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d105      	bne.n	8005ae6 <osMemoryPoolNew+0x172>
        /* Control block on heap */
        mp->status |= 1U;
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	f043 0201 	orr.w	r2, r3, #1
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	621a      	str	r2, [r3, #32]
      }
      if (mem_mp == 0) {
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d111      	bne.n	8005b10 <osMemoryPoolNew+0x19c>
        /* Memory array on heap */
        mp->status |= 2U;
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	f043 0202 	orr.w	r2, r3, #2
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	621a      	str	r2, [r3, #32]
      if (mem_mp == 0) {
 8005af8:	e00a      	b.n	8005b10 <osMemoryPoolNew+0x19c>
      }
    }
    else {
      /* Memory pool cannot be created, release allocated resources */
      if ((mem_cb == 0) && (mp != NULL)) {
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d105      	bne.n	8005b0c <osMemoryPoolNew+0x198>
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <osMemoryPoolNew+0x198>
        /* Free control block memory */
        vPortFree (mp);
 8005b06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b08:	f003 fc6a 	bl	80093e0 <vPortFree>
      }
      mp = NULL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return (mp);
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3728      	adds	r7, #40	; 0x28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	5eed0000 	.word	0x5eed0000

08005b20 <osMemoryPoolAlloc>:
  }

  return (p);
}

void *osMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08a      	sub	sp, #40	; 0x28
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  void *block;
  uint32_t isrm;

  if (mp_id == NULL) {
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d102      	bne.n	8005b36 <osMemoryPoolAlloc+0x16>
    /* Invalid input parameters */
    block = NULL;
 8005b30:	2300      	movs	r3, #0
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
 8005b34:	e062      	b.n	8005bfc <osMemoryPoolAlloc+0xdc>
  }
  else {
    block = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24

    mp = (MemPool_t *)mp_id;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	6a1a      	ldr	r2, [r3, #32]
 8005b42:	4b31      	ldr	r3, [pc, #196]	; (8005c08 <osMemoryPoolAlloc+0xe8>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	4a30      	ldr	r2, [pc, #192]	; (8005c08 <osMemoryPoolAlloc+0xe8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d157      	bne.n	8005bfc <osMemoryPoolAlloc+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b4c:	f3ef 8305 	mrs	r3, IPSR
 8005b50:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b52:	69bb      	ldr	r3, [r7, #24]
      if (IS_IRQ()) {
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d032      	beq.n	8005bbe <osMemoryPoolAlloc+0x9e>
        if (timeout == 0U) {
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d14e      	bne.n	8005bfc <osMemoryPoolAlloc+0xdc>
          if (xSemaphoreTakeFromISR (mp->sem, NULL) == pdTRUE) {
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	2100      	movs	r1, #0
 8005b66:	4618      	mov	r0, r3
 8005b68:	f001 fa44 	bl	8006ff4 <xQueueReceiveFromISR>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d144      	bne.n	8005bfc <osMemoryPoolAlloc+0xdc>
            if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	6a1a      	ldr	r2, [r3, #32]
 8005b76:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <osMemoryPoolAlloc+0xe8>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	4a23      	ldr	r2, [pc, #140]	; (8005c08 <osMemoryPoolAlloc+0xe8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d13d      	bne.n	8005bfc <osMemoryPoolAlloc+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b80:	f3ef 8211 	mrs	r2, BASEPRI
 8005b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b88:	f383 8811 	msr	BASEPRI, r3
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	617a      	str	r2, [r7, #20]
 8005b96:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b98:	697b      	ldr	r3, [r7, #20]
              isrm  = taskENTER_CRITICAL_FROM_ISR();
 8005b9a:	61fb      	str	r3, [r7, #28]

              /* Get a block from the free-list */
              block = AllocBlock(mp);
 8005b9c:	6a38      	ldr	r0, [r7, #32]
 8005b9e:	f000 f8ef 	bl	8005d80 <AllocBlock>
 8005ba2:	6278      	str	r0, [r7, #36]	; 0x24

              if (block == NULL) {
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d103      	bne.n	8005bb2 <osMemoryPoolAlloc+0x92>
                /* List of free blocks is empty, 'create' new block */
                block = CreateBlock(mp);
 8005baa:	6a38      	ldr	r0, [r7, #32]
 8005bac:	f000 f8c6 	bl	8005d3c <CreateBlock>
 8005bb0:	6278      	str	r0, [r7, #36]	; 0x24
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005bbc:	e01e      	b.n	8005bfc <osMemoryPoolAlloc+0xdc>
            }
          }
        }
      }
      else {
        if (xSemaphoreTake (mp->sem, (TickType_t)timeout) == pdTRUE) {
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f001 f909 	bl	8006ddc <xQueueSemaphoreTake>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d115      	bne.n	8005bfc <osMemoryPoolAlloc+0xdc>
          if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	6a1a      	ldr	r2, [r3, #32]
 8005bd4:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <osMemoryPoolAlloc+0xe8>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	4a0b      	ldr	r2, [pc, #44]	; (8005c08 <osMemoryPoolAlloc+0xe8>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d10e      	bne.n	8005bfc <osMemoryPoolAlloc+0xdc>
            taskENTER_CRITICAL();
 8005bde:	f003 fa11 	bl	8009004 <vPortEnterCritical>

            /* Get a block from the free-list */
            block = AllocBlock(mp);
 8005be2:	6a38      	ldr	r0, [r7, #32]
 8005be4:	f000 f8cc 	bl	8005d80 <AllocBlock>
 8005be8:	6278      	str	r0, [r7, #36]	; 0x24

            if (block == NULL) {
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d103      	bne.n	8005bf8 <osMemoryPoolAlloc+0xd8>
              /* List of free blocks is empty, 'create' new block */
              block = CreateBlock(mp);
 8005bf0:	6a38      	ldr	r0, [r7, #32]
 8005bf2:	f000 f8a3 	bl	8005d3c <CreateBlock>
 8005bf6:	6278      	str	r0, [r7, #36]	; 0x24
            }

            taskEXIT_CRITICAL();
 8005bf8:	f003 fa34 	bl	8009064 <vPortExitCritical>
        }
      }
    }
  }

  return (block);
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3728      	adds	r7, #40	; 0x28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	5eed0000 	.word	0x5eed0000

08005c0c <osMemoryPoolFree>:

osStatus_t osMemoryPoolFree (osMemoryPoolId_t mp_id, void *block) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08a      	sub	sp, #40	; 0x28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  osStatus_t stat;
  uint32_t isrm;
  BaseType_t yield;

  if ((mp_id == NULL) || (block == NULL)) {
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <osMemoryPoolFree+0x16>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d103      	bne.n	8005c2a <osMemoryPoolFree+0x1e>
    /* Invalid input parameters */
    stat = osErrorParameter;
 8005c22:	f06f 0303 	mvn.w	r3, #3
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
 8005c28:	e07f      	b.n	8005d2a <osMemoryPoolFree+0x11e>
  }
  else {
    mp = (MemPool_t *)mp_id;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) != MPOOL_STATUS) {
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	6a1a      	ldr	r2, [r3, #32]
 8005c32:	4b40      	ldr	r3, [pc, #256]	; (8005d34 <osMemoryPoolFree+0x128>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	4a3f      	ldr	r2, [pc, #252]	; (8005d34 <osMemoryPoolFree+0x128>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <osMemoryPoolFree+0x38>
      /* Invalid object status */
      stat = osErrorResource;
 8005c3c:	f06f 0302 	mvn.w	r3, #2
 8005c40:	627b      	str	r3, [r7, #36]	; 0x24
 8005c42:	e072      	b.n	8005d2a <osMemoryPoolFree+0x11e>
    }
    else if ((block < (void *)&mp->mem_arr[0]) || (block > (void*)&mp->mem_arr[mp->mem_sz-1])) {
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d308      	bcc.n	8005c60 <osMemoryPoolFree+0x54>
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	4413      	add	r3, r2
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d903      	bls.n	8005c68 <osMemoryPoolFree+0x5c>
      /* Block pointer outside of memory array area */
      stat = osErrorParameter;
 8005c60:	f06f 0303 	mvn.w	r3, #3
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
 8005c66:	e060      	b.n	8005d2a <osMemoryPoolFree+0x11e>
    }
    else {
      stat = osOK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c6c:	f3ef 8305 	mrs	r3, IPSR
 8005c70:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c72:	69bb      	ldr	r3, [r7, #24]

      if (IS_IRQ()) {
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d03b      	beq.n	8005cf0 <osMemoryPoolFree+0xe4>
        if (uxSemaphoreGetCountFromISR (mp->sem) == mp->bl_cnt) {
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f001 fa57 	bl	8007130 <uxQueueMessagesWaitingFromISR>
 8005c82:	4602      	mov	r2, r0
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d103      	bne.n	8005c94 <osMemoryPoolFree+0x88>
          stat = osErrorResource;
 8005c8c:	f06f 0302 	mvn.w	r3, #2
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
 8005c92:	e04a      	b.n	8005d2a <osMemoryPoolFree+0x11e>
	__asm volatile
 8005c94:	f3ef 8211 	mrs	r2, BASEPRI
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	613a      	str	r2, [r7, #16]
 8005caa:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8005cac:	693b      	ldr	r3, [r7, #16]
        }
        else {
          isrm = taskENTER_CRITICAL_FROM_ISR();
 8005cae:	61fb      	str	r3, [r7, #28]

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	6a38      	ldr	r0, [r7, #32]
 8005cb4:	f000 f87c 	bl	8005db0 <FreeBlock>
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f383 8811 	msr	BASEPRI, r3
}
 8005cc2:	bf00      	nop

          taskEXIT_CRITICAL_FROM_ISR(isrm);

          yield = pdFALSE;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60bb      	str	r3, [r7, #8]
          xSemaphoreGiveFromISR (mp->sem, &yield);
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f107 0208 	add.w	r2, r7, #8
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 ff15 	bl	8006b02 <xQueueGiveFromISR>
          portYIELD_FROM_ISR (yield);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d025      	beq.n	8005d2a <osMemoryPoolFree+0x11e>
 8005cde:	4b16      	ldr	r3, [pc, #88]	; (8005d38 <osMemoryPoolFree+0x12c>)
 8005ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	e01c      	b.n	8005d2a <osMemoryPoolFree+0x11e>
        }
      }
      else {
        if (uxSemaphoreGetCount (mp->sem) == mp->bl_cnt) {
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 f9fd 	bl	80070f4 <uxQueueMessagesWaiting>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d103      	bne.n	8005d0c <osMemoryPoolFree+0x100>
          stat = osErrorResource;
 8005d04:	f06f 0302 	mvn.w	r3, #2
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0a:	e00e      	b.n	8005d2a <osMemoryPoolFree+0x11e>
        }
        else {
          taskENTER_CRITICAL();
 8005d0c:	f003 f97a 	bl	8009004 <vPortEnterCritical>

          /* Add block to the list of free blocks */
          FreeBlock(mp, block);
 8005d10:	6839      	ldr	r1, [r7, #0]
 8005d12:	6a38      	ldr	r0, [r7, #32]
 8005d14:	f000 f84c 	bl	8005db0 <FreeBlock>

          taskEXIT_CRITICAL();
 8005d18:	f003 f9a4 	bl	8009064 <vPortExitCritical>

          xSemaphoreGive (mp->sem);
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	6858      	ldr	r0, [r3, #4]
 8005d20:	2300      	movs	r3, #0
 8005d22:	2200      	movs	r2, #0
 8005d24:	2100      	movs	r1, #0
 8005d26:	f000 fd53 	bl	80067d0 <xQueueGenericSend>
        }
      }
    }
  }

  return (stat);
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3728      	adds	r7, #40	; 0x28
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	5eed0000 	.word	0x5eed0000
 8005d38:	e000ed04 	.word	0xe000ed04

08005d3c <CreateBlock>:
}

/*
  Create new block given according to the current block index.
*/
static void *CreateBlock (MemPool_t *mp) {
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]

  if (mp->n < mp->bl_cnt) {
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69da      	ldr	r2, [r3, #28]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d20e      	bcs.n	8005d72 <CreateBlock+0x36>
    /* Unallocated blocks exist, set pointer to new block */
    p = (void *)(mp->mem_arr + (mp->bl_sz * mp->n));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	69c9      	ldr	r1, [r1, #28]
 8005d60:	fb01 f303 	mul.w	r3, r1, r3
 8005d64:	4413      	add	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]

    /* Increment block index */
    mp->n += 1U;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	61da      	str	r2, [r3, #28]
  }

  return (p);
 8005d72:	68fb      	ldr	r3, [r7, #12]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <AllocBlock>:

/*
  Allocate a block by reading the list of free blocks.
*/
static void *AllocBlock (MemPool_t *mp) {
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]

  if (mp->head != NULL) {
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d006      	beq.n	8005da2 <AllocBlock+0x22>
    /* List of free block exists, get head block */
    p = mp->head;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60fb      	str	r3, [r7, #12]

    /* Head block is now next on the list */
    mp->head = p->next;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	601a      	str	r2, [r3, #0]
  }

  return (p);
 8005da2:	68fb      	ldr	r3, [r7, #12]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <FreeBlock>:

/*
  Free block by putting it to the list of free blocks.
*/
static void FreeBlock (MemPool_t *mp, void *block) {
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  MemPoolBlock_t *p = block;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Store current head into block memory space */
  p->next = mp->head;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	601a      	str	r2, [r3, #0]

  /* Store current block as new head */
  mp->head = p;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	601a      	str	r2, [r3, #0]
}
 8005dcc:	bf00      	nop
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4a07      	ldr	r2, [pc, #28]	; (8005e04 <vApplicationGetIdleTaskMemory+0x2c>)
 8005de8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	4a06      	ldr	r2, [pc, #24]	; (8005e08 <vApplicationGetIdleTaskMemory+0x30>)
 8005dee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2280      	movs	r2, #128	; 0x80
 8005df4:	601a      	str	r2, [r3, #0]
}
 8005df6:	bf00      	nop
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	200002bc 	.word	0x200002bc
 8005e08:	20000364 	.word	0x20000364

08005e0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4a07      	ldr	r2, [pc, #28]	; (8005e38 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	4a06      	ldr	r2, [pc, #24]	; (8005e3c <vApplicationGetTimerTaskMemory+0x30>)
 8005e22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e2a:	601a      	str	r2, [r3, #0]
}
 8005e2c:	bf00      	nop
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	20000564 	.word	0x20000564
 8005e3c:	2000060c 	.word	0x2000060c

08005e40 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10a      	bne.n	8005e64 <xEventGroupCreateStatic+0x24>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	613b      	str	r3, [r7, #16]
}
 8005e60:	bf00      	nop
 8005e62:	e7fe      	b.n	8005e62 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005e64:	2320      	movs	r3, #32
 8005e66:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2b20      	cmp	r3, #32
 8005e6c:	d00a      	beq.n	8005e84 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	60fb      	str	r3, [r7, #12]
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	3304      	adds	r3, #4
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fa3d 	bl	8006318 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005ea4:	697b      	ldr	r3, [r7, #20]
	}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005eb4:	2020      	movs	r0, #32
 8005eb6:	f003 f9c7 	bl	8009248 <pvPortMalloc>
 8005eba:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fa23 	bl	8006318 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005ed8:	687b      	ldr	r3, [r7, #4]
	}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b090      	sub	sp, #64	; 0x40
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005efa:	2300      	movs	r3, #0
 8005efc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10a      	bne.n	8005f1a <xEventGroupWaitBits+0x36>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	623b      	str	r3, [r7, #32]
}
 8005f16:	bf00      	nop
 8005f18:	e7fe      	b.n	8005f18 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <xEventGroupWaitBits+0x56>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	61fb      	str	r3, [r7, #28]
}
 8005f36:	bf00      	nop
 8005f38:	e7fe      	b.n	8005f38 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <xEventGroupWaitBits+0x72>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	61bb      	str	r3, [r7, #24]
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f56:	f002 f9c3 	bl	80082e0 <xTaskGetSchedulerState>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d102      	bne.n	8005f66 <xEventGroupWaitBits+0x82>
 8005f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <xEventGroupWaitBits+0x86>
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <xEventGroupWaitBits+0x88>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10a      	bne.n	8005f86 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	617b      	str	r3, [r7, #20]
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8005f86:	f001 fd21 	bl	80079cc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f96:	f000 f988 	bl	80062aa <prvTestWaitCondition>
 8005f9a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00e      	beq.n	8005fc0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d028      	beq.n	8006002 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	43db      	mvns	r3, r3
 8005fb8:	401a      	ands	r2, r3
 8005fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	e020      	b.n	8006002 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d104      	bne.n	8005fd0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8005fce:	e018      	b.n	8006002 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fdc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fea:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fee:	1d18      	adds	r0, r3, #4
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	f001 fee5 	bl	8007dc8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006002:	f001 fcf1 	bl	80079e8 <xTaskResumeAll>
 8006006:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800600a:	2b00      	cmp	r3, #0
 800600c:	d031      	beq.n	8006072 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	2b00      	cmp	r3, #0
 8006012:	d107      	bne.n	8006024 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8006014:	4b19      	ldr	r3, [pc, #100]	; (800607c <xEventGroupWaitBits+0x198>)
 8006016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006024:	f002 fad2 	bl	80085cc <uxTaskResetEventItemValue>
 8006028:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800602a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d11a      	bne.n	800606a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8006034:	f002 ffe6 	bl	8009004 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	68b9      	ldr	r1, [r7, #8]
 8006042:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006044:	f000 f931 	bl	80062aa <prvTestWaitCondition>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d009      	beq.n	8006062 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d006      	beq.n	8006062 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	43db      	mvns	r3, r3
 800605c:	401a      	ands	r2, r3
 800605e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006060:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8006062:	2301      	movs	r3, #1
 8006064:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8006066:	f002 fffd 	bl	8009064 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800606a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006070:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006074:	4618      	mov	r0, r3
 8006076:	3740      	adds	r7, #64	; 0x40
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	e000ed04 	.word	0xe000ed04

08006080 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <xEventGroupClearBits+0x2a>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	60fb      	str	r3, [r7, #12]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00a      	beq.n	80060ca <xEventGroupClearBits+0x4a>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	60bb      	str	r3, [r7, #8]
}
 80060c6:	bf00      	nop
 80060c8:	e7fe      	b.n	80060c8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80060ca:	f002 ff9b 	bl	8009004 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	43db      	mvns	r3, r3
 80060dc:	401a      	ands	r2, r3
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80060e2:	f002 ffbf 	bl	8009064 <vPortExitCritical>

	return uxReturn;
 80060e6:	693b      	ldr	r3, [r7, #16]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80060fa:	2300      	movs	r3, #0
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	4804      	ldr	r0, [pc, #16]	; (8006114 <xEventGroupClearBitsFromISR+0x24>)
 8006102:	f002 fe31 	bl	8008d68 <xTimerPendFunctionCallFromISR>
 8006106:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8006108:	68fb      	ldr	r3, [r7, #12]
	}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	08006291 	.word	0x08006291

08006118 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8006118:	b480      	push	{r7}
 800611a:	b089      	sub	sp, #36	; 0x24
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	61fb      	str	r3, [r7, #28]
	__asm volatile
 8006124:	f3ef 8211 	mrs	r2, BASEPRI
 8006128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	60fa      	str	r2, [r7, #12]
 800613a:	60bb      	str	r3, [r7, #8]
	return ulOriginalBASEPRI;
 800613c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800613e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	613b      	str	r3, [r7, #16]
	__asm volatile
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f383 8811 	msr	BASEPRI, r3
}
 8006150:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8006152:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8006154:	4618      	mov	r0, r3
 8006156:	3724      	adds	r7, #36	; 0x24
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08e      	sub	sp, #56	; 0x38
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800616a:	2300      	movs	r3, #0
 800616c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006172:	2300      	movs	r3, #0
 8006174:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10a      	bne.n	8006192 <xEventGroupSetBits+0x32>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	613b      	str	r3, [r7, #16]
}
 800618e:	bf00      	nop
 8006190:	e7fe      	b.n	8006190 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <xEventGroupSetBits+0x52>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	60fb      	str	r3, [r7, #12]
}
 80061ae:	bf00      	nop
 80061b0:	e7fe      	b.n	80061b0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b4:	3304      	adds	r3, #4
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	3308      	adds	r3, #8
 80061bc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80061be:	f001 fc05 	bl	80079cc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80061d4:	e03c      	b.n	8006250 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80061d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80061dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80061e2:	2300      	movs	r3, #0
 80061e4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80061ec:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061f4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d108      	bne.n	8006212 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	4013      	ands	r3, r2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00b      	beq.n	8006224 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800620c:	2301      	movs	r3, #1
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006210:	e008      	b.n	8006224 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	4013      	ands	r3, r2
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	429a      	cmp	r2, r3
 800621e:	d101      	bne.n	8006224 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006220:	2301      	movs	r3, #1
 8006222:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d010      	beq.n	800624c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	4313      	orrs	r3, r2
 800623a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006244:	4619      	mov	r1, r3
 8006246:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006248:	f001 fe8a 	bl	8007f60 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	429a      	cmp	r2, r3
 8006256:	d1be      	bne.n	80061d6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	43db      	mvns	r3, r3
 8006260:	401a      	ands	r2, r3
 8006262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006264:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006266:	f001 fbbf 	bl	80079e8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800626a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626c:	681b      	ldr	r3, [r3, #0]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3738      	adds	r7, #56	; 0x38
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff ff6c 	bl	8006160 <xEventGroupSetBits>
}
 8006288:	bf00      	nop
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7ff feef 	bl	8006080 <xEventGroupClearBits>
}
 80062a2:	bf00      	nop
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80062aa:	b480      	push	{r7}
 80062ac:	b087      	sub	sp, #28
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80062b6:	2300      	movs	r3, #0
 80062b8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d107      	bne.n	80062d0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	4013      	ands	r3, r2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80062ca:	2301      	movs	r3, #1
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	e007      	b.n	80062e0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	4013      	ands	r3, r2
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d101      	bne.n	80062e0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80062dc:	2301      	movs	r3, #1
 80062de:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80062e0:	697b      	ldr	r3, [r7, #20]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
	...

080062f0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	68f9      	ldr	r1, [r7, #12]
 8006302:	4804      	ldr	r0, [pc, #16]	; (8006314 <xEventGroupSetBitsFromISR+0x24>)
 8006304:	f002 fd30 	bl	8008d68 <xTimerPendFunctionCallFromISR>
 8006308:	6178      	str	r0, [r7, #20]

		return xReturn;
 800630a:	697b      	ldr	r3, [r7, #20]
	}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	08006277 	.word	0x08006277

08006318 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f103 0208 	add.w	r2, r3, #8
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f04f 32ff 	mov.w	r2, #4294967295
 8006330:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f103 0208 	add.w	r2, r3, #8
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f103 0208 	add.w	r2, r3, #8
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	601a      	str	r2, [r3, #0]
}
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063ba:	b480      	push	{r7}
 80063bc:	b085      	sub	sp, #20
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d103      	bne.n	80063da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	e00c      	b.n	80063f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	3308      	adds	r3, #8
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	e002      	b.n	80063e8 <vListInsert+0x2e>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d2f6      	bcs.n	80063e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	601a      	str	r2, [r3, #0]
}
 8006420:	bf00      	nop
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6892      	ldr	r2, [r2, #8]
 8006442:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6852      	ldr	r2, [r2, #4]
 800644c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	429a      	cmp	r2, r3
 8006456:	d103      	bne.n	8006460 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	1e5a      	subs	r2, r3, #1
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10a      	bne.n	80064aa <xQueueGenericReset+0x2a>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	60bb      	str	r3, [r7, #8]
}
 80064a6:	bf00      	nop
 80064a8:	e7fe      	b.n	80064a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80064aa:	f002 fdab 	bl	8009004 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b6:	68f9      	ldr	r1, [r7, #12]
 80064b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064ba:	fb01 f303 	mul.w	r3, r1, r3
 80064be:	441a      	add	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064da:	3b01      	subs	r3, #1
 80064dc:	68f9      	ldr	r1, [r7, #12]
 80064de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064e0:	fb01 f303 	mul.w	r3, r1, r3
 80064e4:	441a      	add	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	22ff      	movs	r2, #255	; 0xff
 80064ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	22ff      	movs	r2, #255	; 0xff
 80064f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d114      	bne.n	800652a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d01a      	beq.n	800653e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3310      	adds	r3, #16
 800650c:	4618      	mov	r0, r3
 800650e:	f001 fcc3 	bl	8007e98 <xTaskRemoveFromEventList>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d012      	beq.n	800653e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006518:	4b0c      	ldr	r3, [pc, #48]	; (800654c <xQueueGenericReset+0xcc>)
 800651a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	e009      	b.n	800653e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3310      	adds	r3, #16
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff fef2 	bl	8006318 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3324      	adds	r3, #36	; 0x24
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff feed 	bl	8006318 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800653e:	f002 fd91 	bl	8009064 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006542:	2301      	movs	r3, #1
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08e      	sub	sp, #56	; 0x38
 8006554:	af02      	add	r7, sp, #8
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
 800655c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10a      	bne.n	800657a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10a      	bne.n	8006596 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <xQueueGenericCreateStatic+0x52>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <xQueueGenericCreateStatic+0x56>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <xQueueGenericCreateStatic+0x58>
 80065a6:	2300      	movs	r3, #0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10a      	bne.n	80065c2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	623b      	str	r3, [r7, #32]
}
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d102      	bne.n	80065ce <xQueueGenericCreateStatic+0x7e>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <xQueueGenericCreateStatic+0x82>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e000      	b.n	80065d4 <xQueueGenericCreateStatic+0x84>
 80065d2:	2300      	movs	r3, #0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10a      	bne.n	80065ee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	61fb      	str	r3, [r7, #28]
}
 80065ea:	bf00      	nop
 80065ec:	e7fe      	b.n	80065ec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80065ee:	2350      	movs	r3, #80	; 0x50
 80065f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2b50      	cmp	r3, #80	; 0x50
 80065f6:	d00a      	beq.n	800660e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	61bb      	str	r3, [r7, #24]
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800660e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00d      	beq.n	8006636 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800661a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006622:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	4613      	mov	r3, r2
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	68b9      	ldr	r1, [r7, #8]
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 f83f 	bl	80066b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006638:	4618      	mov	r0, r3
 800663a:	3730      	adds	r7, #48	; 0x30
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08a      	sub	sp, #40	; 0x28
 8006644:	af02      	add	r7, sp, #8
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	4613      	mov	r3, r2
 800664c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10a      	bne.n	800666a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	613b      	str	r3, [r7, #16]
}
 8006666:	bf00      	nop
 8006668:	e7fe      	b.n	8006668 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	fb02 f303 	mul.w	r3, r2, r3
 8006672:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	3350      	adds	r3, #80	; 0x50
 8006678:	4618      	mov	r0, r3
 800667a:	f002 fde5 	bl	8009248 <pvPortMalloc>
 800667e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d011      	beq.n	80066aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	3350      	adds	r3, #80	; 0x50
 800668e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006698:	79fa      	ldrb	r2, [r7, #7]
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	4613      	mov	r3, r2
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	68b9      	ldr	r1, [r7, #8]
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 f805 	bl	80066b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066aa:	69bb      	ldr	r3, [r7, #24]
	}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3720      	adds	r7, #32
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
 80066c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d103      	bne.n	80066d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	e002      	b.n	80066d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80066e2:	2101      	movs	r1, #1
 80066e4:	69b8      	ldr	r0, [r7, #24]
 80066e6:	f7ff fecb 	bl	8006480 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	78fa      	ldrb	r2, [r7, #3]
 80066ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80066f2:	bf00      	nop
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b08a      	sub	sp, #40	; 0x28
 80066fe:	af02      	add	r7, sp, #8
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10a      	bne.n	8006722 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	61bb      	str	r3, [r7, #24]
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	429a      	cmp	r2, r3
 8006728:	d90a      	bls.n	8006740 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	617b      	str	r3, [r7, #20]
}
 800673c:	bf00      	nop
 800673e:	e7fe      	b.n	800673e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006740:	2302      	movs	r3, #2
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	2100      	movs	r1, #0
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f7ff ff00 	bl	8006550 <xQueueGenericCreateStatic>
 8006750:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800675e:	69fb      	ldr	r3, [r7, #28]
	}
 8006760:	4618      	mov	r0, r3
 8006762:	3720      	adds	r7, #32
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10a      	bne.n	800678e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	613b      	str	r3, [r7, #16]
}
 800678a:	bf00      	nop
 800678c:	e7fe      	b.n	800678c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	429a      	cmp	r2, r3
 8006794:	d90a      	bls.n	80067ac <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679a:	f383 8811 	msr	BASEPRI, r3
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f3bf 8f4f 	dsb	sy
 80067a6:	60fb      	str	r3, [r7, #12]
}
 80067a8:	bf00      	nop
 80067aa:	e7fe      	b.n	80067aa <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80067ac:	2202      	movs	r2, #2
 80067ae:	2100      	movs	r1, #0
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff ff45 	bl	8006640 <xQueueGenericCreate>
 80067b6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80067c4:	697b      	ldr	r3, [r7, #20]
	}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08e      	sub	sp, #56	; 0x38
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067de:	2300      	movs	r3, #0
 80067e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <xQueueGenericSend+0x32>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067fe:	bf00      	nop
 8006800:	e7fe      	b.n	8006800 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d103      	bne.n	8006810 <xQueueGenericSend+0x40>
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <xQueueGenericSend+0x44>
 8006810:	2301      	movs	r3, #1
 8006812:	e000      	b.n	8006816 <xQueueGenericSend+0x46>
 8006814:	2300      	movs	r3, #0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10a      	bne.n	8006830 <xQueueGenericSend+0x60>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	2b02      	cmp	r3, #2
 8006834:	d103      	bne.n	800683e <xQueueGenericSend+0x6e>
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683a:	2b01      	cmp	r3, #1
 800683c:	d101      	bne.n	8006842 <xQueueGenericSend+0x72>
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <xQueueGenericSend+0x74>
 8006842:	2300      	movs	r3, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <xQueueGenericSend+0x8e>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	623b      	str	r3, [r7, #32]
}
 800685a:	bf00      	nop
 800685c:	e7fe      	b.n	800685c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800685e:	f001 fd3f 	bl	80082e0 <xTaskGetSchedulerState>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d102      	bne.n	800686e <xQueueGenericSend+0x9e>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <xQueueGenericSend+0xa2>
 800686e:	2301      	movs	r3, #1
 8006870:	e000      	b.n	8006874 <xQueueGenericSend+0xa4>
 8006872:	2300      	movs	r3, #0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10a      	bne.n	800688e <xQueueGenericSend+0xbe>
	__asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	61fb      	str	r3, [r7, #28]
}
 800688a:	bf00      	nop
 800688c:	e7fe      	b.n	800688c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800688e:	f002 fbb9 	bl	8009004 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800689a:	429a      	cmp	r2, r3
 800689c:	d302      	bcc.n	80068a4 <xQueueGenericSend+0xd4>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d129      	bne.n	80068f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068aa:	f000 fc9a 	bl	80071e2 <prvCopyDataToQueue>
 80068ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d010      	beq.n	80068da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	3324      	adds	r3, #36	; 0x24
 80068bc:	4618      	mov	r0, r3
 80068be:	f001 faeb 	bl	8007e98 <xTaskRemoveFromEventList>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d013      	beq.n	80068f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068c8:	4b3f      	ldr	r3, [pc, #252]	; (80069c8 <xQueueGenericSend+0x1f8>)
 80068ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	e00a      	b.n	80068f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d007      	beq.n	80068f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068e0:	4b39      	ldr	r3, [pc, #228]	; (80069c8 <xQueueGenericSend+0x1f8>)
 80068e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e6:	601a      	str	r2, [r3, #0]
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80068f0:	f002 fbb8 	bl	8009064 <vPortExitCritical>
				return pdPASS;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e063      	b.n	80069c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d103      	bne.n	8006906 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068fe:	f002 fbb1 	bl	8009064 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006902:	2300      	movs	r3, #0
 8006904:	e05c      	b.n	80069c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006908:	2b00      	cmp	r3, #0
 800690a:	d106      	bne.n	800691a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800690c:	f107 0314 	add.w	r3, r7, #20
 8006910:	4618      	mov	r0, r3
 8006912:	f001 fb87 	bl	8008024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006916:	2301      	movs	r3, #1
 8006918:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800691a:	f002 fba3 	bl	8009064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800691e:	f001 f855 	bl	80079cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006922:	f002 fb6f 	bl	8009004 <vPortEnterCritical>
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800692c:	b25b      	sxtb	r3, r3
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006932:	d103      	bne.n	800693c <xQueueGenericSend+0x16c>
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006942:	b25b      	sxtb	r3, r3
 8006944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006948:	d103      	bne.n	8006952 <xQueueGenericSend+0x182>
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006952:	f002 fb87 	bl	8009064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006956:	1d3a      	adds	r2, r7, #4
 8006958:	f107 0314 	add.w	r3, r7, #20
 800695c:	4611      	mov	r1, r2
 800695e:	4618      	mov	r0, r3
 8006960:	f001 fb76 	bl	8008050 <xTaskCheckForTimeOut>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d124      	bne.n	80069b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800696a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800696c:	f000 fd31 	bl	80073d2 <prvIsQueueFull>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d018      	beq.n	80069a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	3310      	adds	r3, #16
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	4611      	mov	r1, r2
 800697e:	4618      	mov	r0, r3
 8006980:	f001 f9fe 	bl	8007d80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006986:	f000 fcbc 	bl	8007302 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800698a:	f001 f82d 	bl	80079e8 <xTaskResumeAll>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	f47f af7c 	bne.w	800688e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006996:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <xQueueGenericSend+0x1f8>)
 8006998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	e772      	b.n	800688e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069aa:	f000 fcaa 	bl	8007302 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069ae:	f001 f81b 	bl	80079e8 <xTaskResumeAll>
 80069b2:	e76c      	b.n	800688e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069b6:	f000 fca4 	bl	8007302 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069ba:	f001 f815 	bl	80079e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3738      	adds	r7, #56	; 0x38
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b090      	sub	sp, #64	; 0x40
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d103      	bne.n	8006a08 <xQueueGenericSendFromISR+0x3c>
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <xQueueGenericSendFromISR+0x40>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e000      	b.n	8006a0e <xQueueGenericSendFromISR+0x42>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a24:	bf00      	nop
 8006a26:	e7fe      	b.n	8006a26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d103      	bne.n	8006a36 <xQueueGenericSendFromISR+0x6a>
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <xQueueGenericSendFromISR+0x6e>
 8006a36:	2301      	movs	r3, #1
 8006a38:	e000      	b.n	8006a3c <xQueueGenericSendFromISR+0x70>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	623b      	str	r3, [r7, #32]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a56:	f002 fbb7 	bl	80091c8 <vPortValidateInterruptPriority>
	__asm volatile
 8006a5a:	f3ef 8211 	mrs	r2, BASEPRI
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	61fa      	str	r2, [r7, #28]
 8006a70:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006a72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d302      	bcc.n	8006a88 <xQueueGenericSendFromISR+0xbc>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d12f      	bne.n	8006ae8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	68b9      	ldr	r1, [r7, #8]
 8006a9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a9e:	f000 fba0 	bl	80071e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006aa2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aaa:	d112      	bne.n	8006ad2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d016      	beq.n	8006ae2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	3324      	adds	r3, #36	; 0x24
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f001 f9ed 	bl	8007e98 <xTaskRemoveFromEventList>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00e      	beq.n	8006ae2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00b      	beq.n	8006ae2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	e007      	b.n	8006ae2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ad2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	b25a      	sxtb	r2, r3
 8006adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006ae6:	e001      	b.n	8006aec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aee:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f383 8811 	msr	BASEPRI, r3
}
 8006af6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3740      	adds	r7, #64	; 0x40
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b08e      	sub	sp, #56	; 0x38
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10a      	bne.n	8006b2c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	623b      	str	r3, [r7, #32]
}
 8006b28:	bf00      	nop
 8006b2a:	e7fe      	b.n	8006b2a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00a      	beq.n	8006b4a <xQueueGiveFromISR+0x48>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	61fb      	str	r3, [r7, #28]
}
 8006b46:	bf00      	nop
 8006b48:	e7fe      	b.n	8006b48 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d103      	bne.n	8006b5a <xQueueGiveFromISR+0x58>
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <xQueueGiveFromISR+0x5c>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e000      	b.n	8006b60 <xQueueGiveFromISR+0x5e>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <xQueueGiveFromISR+0x78>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	61bb      	str	r3, [r7, #24]
}
 8006b76:	bf00      	nop
 8006b78:	e7fe      	b.n	8006b78 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b7a:	f002 fb25 	bl	80091c8 <vPortValidateInterruptPriority>
	__asm volatile
 8006b7e:	f3ef 8211 	mrs	r2, BASEPRI
 8006b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	617a      	str	r2, [r7, #20]
 8006b94:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006b96:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d22b      	bcs.n	8006c02 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc4:	d112      	bne.n	8006bec <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d016      	beq.n	8006bfc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	3324      	adds	r3, #36	; 0x24
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 f960 	bl	8007e98 <xTaskRemoveFromEventList>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00e      	beq.n	8006bfc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00b      	beq.n	8006bfc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2201      	movs	r2, #1
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	e007      	b.n	8006bfc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	b25a      	sxtb	r2, r3
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8006c00:	e001      	b.n	8006c06 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	637b      	str	r3, [r7, #52]	; 0x34
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f383 8811 	msr	BASEPRI, r3
}
 8006c10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3738      	adds	r7, #56	; 0x38
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b08c      	sub	sp, #48	; 0x30
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10a      	bne.n	8006c4c <xQueueReceive+0x30>
	__asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	623b      	str	r3, [r7, #32]
}
 8006c48:	bf00      	nop
 8006c4a:	e7fe      	b.n	8006c4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d103      	bne.n	8006c5a <xQueueReceive+0x3e>
 8006c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d101      	bne.n	8006c5e <xQueueReceive+0x42>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e000      	b.n	8006c60 <xQueueReceive+0x44>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <xQueueReceive+0x5e>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	61fb      	str	r3, [r7, #28]
}
 8006c76:	bf00      	nop
 8006c78:	e7fe      	b.n	8006c78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c7a:	f001 fb31 	bl	80082e0 <xTaskGetSchedulerState>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d102      	bne.n	8006c8a <xQueueReceive+0x6e>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <xQueueReceive+0x72>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <xQueueReceive+0x74>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10a      	bne.n	8006caa <xQueueReceive+0x8e>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	61bb      	str	r3, [r7, #24]
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006caa:	f002 f9ab 	bl	8009004 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d01f      	beq.n	8006cfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cba:	68b9      	ldr	r1, [r7, #8]
 8006cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cbe:	f000 fafa 	bl	80072b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	1e5a      	subs	r2, r3, #1
 8006cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00f      	beq.n	8006cf2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	3310      	adds	r3, #16
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 f8de 	bl	8007e98 <xTaskRemoveFromEventList>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d007      	beq.n	8006cf2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ce2:	4b3d      	ldr	r3, [pc, #244]	; (8006dd8 <xQueueReceive+0x1bc>)
 8006ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cf2:	f002 f9b7 	bl	8009064 <vPortExitCritical>
				return pdPASS;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e069      	b.n	8006dce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d103      	bne.n	8006d08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d00:	f002 f9b0 	bl	8009064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d04:	2300      	movs	r3, #0
 8006d06:	e062      	b.n	8006dce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d106      	bne.n	8006d1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d0e:	f107 0310 	add.w	r3, r7, #16
 8006d12:	4618      	mov	r0, r3
 8006d14:	f001 f986 	bl	8008024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d1c:	f002 f9a2 	bl	8009064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d20:	f000 fe54 	bl	80079cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d24:	f002 f96e 	bl	8009004 <vPortEnterCritical>
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d2e:	b25b      	sxtb	r3, r3
 8006d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d34:	d103      	bne.n	8006d3e <xQueueReceive+0x122>
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d44:	b25b      	sxtb	r3, r3
 8006d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4a:	d103      	bne.n	8006d54 <xQueueReceive+0x138>
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d54:	f002 f986 	bl	8009064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d58:	1d3a      	adds	r2, r7, #4
 8006d5a:	f107 0310 	add.w	r3, r7, #16
 8006d5e:	4611      	mov	r1, r2
 8006d60:	4618      	mov	r0, r3
 8006d62:	f001 f975 	bl	8008050 <xTaskCheckForTimeOut>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d123      	bne.n	8006db4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d6e:	f000 fb1a 	bl	80073a6 <prvIsQueueEmpty>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d017      	beq.n	8006da8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	3324      	adds	r3, #36	; 0x24
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	4611      	mov	r1, r2
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 fffd 	bl	8007d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d88:	f000 fabb 	bl	8007302 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d8c:	f000 fe2c 	bl	80079e8 <xTaskResumeAll>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d189      	bne.n	8006caa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006d96:	4b10      	ldr	r3, [pc, #64]	; (8006dd8 <xQueueReceive+0x1bc>)
 8006d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	e780      	b.n	8006caa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006daa:	f000 faaa 	bl	8007302 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dae:	f000 fe1b 	bl	80079e8 <xTaskResumeAll>
 8006db2:	e77a      	b.n	8006caa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006db6:	f000 faa4 	bl	8007302 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dba:	f000 fe15 	bl	80079e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dc0:	f000 faf1 	bl	80073a6 <prvIsQueueEmpty>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f43f af6f 	beq.w	8006caa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006dcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3730      	adds	r7, #48	; 0x30
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08e      	sub	sp, #56	; 0x38
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006de6:	2300      	movs	r3, #0
 8006de8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006dee:	2300      	movs	r3, #0
 8006df0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	623b      	str	r3, [r7, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	e7fe      	b.n	8006e0c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	61fb      	str	r3, [r7, #28]
}
 8006e28:	bf00      	nop
 8006e2a:	e7fe      	b.n	8006e2a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e2c:	f001 fa58 	bl	80082e0 <xTaskGetSchedulerState>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d102      	bne.n	8006e3c <xQueueSemaphoreTake+0x60>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <xQueueSemaphoreTake+0x64>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e000      	b.n	8006e42 <xQueueSemaphoreTake+0x66>
 8006e40:	2300      	movs	r3, #0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10a      	bne.n	8006e5c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	61bb      	str	r3, [r7, #24]
}
 8006e58:	bf00      	nop
 8006e5a:	e7fe      	b.n	8006e5a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e5c:	f002 f8d2 	bl	8009004 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d024      	beq.n	8006eb6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6e:	1e5a      	subs	r2, r3, #1
 8006e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d104      	bne.n	8006e86 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006e7c:	f001 fbbe 	bl	80085fc <pvTaskIncrementMutexHeldCount>
 8006e80:	4602      	mov	r2, r0
 8006e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e84:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00f      	beq.n	8006eae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	3310      	adds	r3, #16
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 f800 	bl	8007e98 <xTaskRemoveFromEventList>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d007      	beq.n	8006eae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e9e:	4b54      	ldr	r3, [pc, #336]	; (8006ff0 <xQueueSemaphoreTake+0x214>)
 8006ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006eae:	f002 f8d9 	bl	8009064 <vPortExitCritical>
				return pdPASS;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e097      	b.n	8006fe6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d111      	bne.n	8006ee0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00a      	beq.n	8006ed8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	617b      	str	r3, [r7, #20]
}
 8006ed4:	bf00      	nop
 8006ed6:	e7fe      	b.n	8006ed6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006ed8:	f002 f8c4 	bl	8009064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006edc:	2300      	movs	r3, #0
 8006ede:	e082      	b.n	8006fe6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ee6:	f107 030c 	add.w	r3, r7, #12
 8006eea:	4618      	mov	r0, r3
 8006eec:	f001 f89a 	bl	8008024 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ef4:	f002 f8b6 	bl	8009064 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ef8:	f000 fd68 	bl	80079cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006efc:	f002 f882 	bl	8009004 <vPortEnterCritical>
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f06:	b25b      	sxtb	r3, r3
 8006f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0c:	d103      	bne.n	8006f16 <xQueueSemaphoreTake+0x13a>
 8006f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f1c:	b25b      	sxtb	r3, r3
 8006f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f22:	d103      	bne.n	8006f2c <xQueueSemaphoreTake+0x150>
 8006f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f2c:	f002 f89a 	bl	8009064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f30:	463a      	mov	r2, r7
 8006f32:	f107 030c 	add.w	r3, r7, #12
 8006f36:	4611      	mov	r1, r2
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 f889 	bl	8008050 <xTaskCheckForTimeOut>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d132      	bne.n	8006faa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f46:	f000 fa2e 	bl	80073a6 <prvIsQueueEmpty>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d026      	beq.n	8006f9e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d109      	bne.n	8006f6c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006f58:	f002 f854 	bl	8009004 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f001 f9db 	bl	800831c <xTaskPriorityInherit>
 8006f66:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006f68:	f002 f87c 	bl	8009064 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6e:	3324      	adds	r3, #36	; 0x24
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	4611      	mov	r1, r2
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 ff03 	bl	8007d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f7c:	f000 f9c1 	bl	8007302 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f80:	f000 fd32 	bl	80079e8 <xTaskResumeAll>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f47f af68 	bne.w	8006e5c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006f8c:	4b18      	ldr	r3, [pc, #96]	; (8006ff0 <xQueueSemaphoreTake+0x214>)
 8006f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	e75e      	b.n	8006e5c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fa0:	f000 f9af 	bl	8007302 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fa4:	f000 fd20 	bl	80079e8 <xTaskResumeAll>
 8006fa8:	e758      	b.n	8006e5c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006faa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fac:	f000 f9a9 	bl	8007302 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fb0:	f000 fd1a 	bl	80079e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fb6:	f000 f9f6 	bl	80073a6 <prvIsQueueEmpty>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f43f af4d 	beq.w	8006e5c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00d      	beq.n	8006fe4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006fc8:	f002 f81c 	bl	8009004 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006fcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fce:	f000 f8f0 	bl	80071b2 <prvGetDisinheritPriorityAfterTimeout>
 8006fd2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 fa74 	bl	80084c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006fe0:	f002 f840 	bl	8009064 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fe4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3738      	adds	r7, #56	; 0x38
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	e000ed04 	.word	0xe000ed04

08006ff4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08e      	sub	sp, #56	; 0x38
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	623b      	str	r3, [r7, #32]
}
 800701c:	bf00      	nop
 800701e:	e7fe      	b.n	800701e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d103      	bne.n	800702e <xQueueReceiveFromISR+0x3a>
 8007026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <xQueueReceiveFromISR+0x3e>
 800702e:	2301      	movs	r3, #1
 8007030:	e000      	b.n	8007034 <xQueueReceiveFromISR+0x40>
 8007032:	2300      	movs	r3, #0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10a      	bne.n	800704e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	61fb      	str	r3, [r7, #28]
}
 800704a:	bf00      	nop
 800704c:	e7fe      	b.n	800704c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800704e:	f002 f8bb 	bl	80091c8 <vPortValidateInterruptPriority>
	__asm volatile
 8007052:	f3ef 8211 	mrs	r2, BASEPRI
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	61ba      	str	r2, [r7, #24]
 8007068:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800706a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800706c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007072:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	2b00      	cmp	r3, #0
 8007078:	d02f      	beq.n	80070da <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007084:	68b9      	ldr	r1, [r7, #8]
 8007086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007088:	f000 f915 	bl	80072b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	1e5a      	subs	r2, r3, #1
 8007090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007092:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007094:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709c:	d112      	bne.n	80070c4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d016      	beq.n	80070d4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	3310      	adds	r3, #16
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 fef4 	bl	8007e98 <xTaskRemoveFromEventList>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00e      	beq.n	80070d4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00b      	beq.n	80070d4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	e007      	b.n	80070d4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80070c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070c8:	3301      	adds	r3, #1
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	b25a      	sxtb	r2, r3
 80070ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80070d4:	2301      	movs	r3, #1
 80070d6:	637b      	str	r3, [r7, #52]	; 0x34
 80070d8:	e001      	b.n	80070de <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80070da:	2300      	movs	r3, #0
 80070dc:	637b      	str	r3, [r7, #52]	; 0x34
 80070de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f383 8811 	msr	BASEPRI, r3
}
 80070e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3738      	adds	r7, #56	; 0x38
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10a      	bne.n	8007118 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	60bb      	str	r3, [r7, #8]
}
 8007114:	bf00      	nop
 8007116:	e7fe      	b.n	8007116 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007118:	f001 ff74 	bl	8009004 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007120:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007122:	f001 ff9f 	bl	8009064 <vPortExitCritical>

	return uxReturn;
 8007126:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10a      	bne.n	8007158 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	60fb      	str	r3, [r7, #12]
}
 8007154:	bf00      	nop
 8007156:	e7fe      	b.n	8007156 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800715e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007160:	4618      	mov	r0, r3
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10a      	bne.n	8007194 <vQueueDelete+0x28>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	60bb      	str	r3, [r7, #8]
}
 8007190:	bf00      	nop
 8007192:	e7fe      	b.n	8007192 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f95f 	bl	8007458 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d102      	bne.n	80071aa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f002 f91b 	bl	80093e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80071b2:	b480      	push	{r7}
 80071b4:	b085      	sub	sp, #20
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d006      	beq.n	80071d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80071cc:	60fb      	str	r3, [r7, #12]
 80071ce:	e001      	b.n	80071d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80071d4:	68fb      	ldr	r3, [r7, #12]
	}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr

080071e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b086      	sub	sp, #24
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071ee:	2300      	movs	r3, #0
 80071f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10d      	bne.n	800721c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d14d      	bne.n	80072a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	4618      	mov	r0, r3
 800720e:	f001 f8ed 	bl	80083ec <xTaskPriorityDisinherit>
 8007212:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	609a      	str	r2, [r3, #8]
 800721a:	e043      	b.n	80072a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d119      	bne.n	8007256 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6858      	ldr	r0, [r3, #4]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	461a      	mov	r2, r3
 800722c:	68b9      	ldr	r1, [r7, #8]
 800722e:	f002 fcce 	bl	8009bce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	441a      	add	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	429a      	cmp	r2, r3
 800724a:	d32b      	bcc.n	80072a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	605a      	str	r2, [r3, #4]
 8007254:	e026      	b.n	80072a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	68d8      	ldr	r0, [r3, #12]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	461a      	mov	r2, r3
 8007260:	68b9      	ldr	r1, [r7, #8]
 8007262:	f002 fcb4 	bl	8009bce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	425b      	negs	r3, r3
 8007270:	441a      	add	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d207      	bcs.n	8007292 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	425b      	negs	r3, r3
 800728c:	441a      	add	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b02      	cmp	r3, #2
 8007296:	d105      	bne.n	80072a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072ac:	697b      	ldr	r3, [r7, #20]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d018      	beq.n	80072fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d0:	441a      	add	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68da      	ldr	r2, [r3, #12]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d303      	bcc.n	80072ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68d9      	ldr	r1, [r3, #12]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	461a      	mov	r2, r3
 80072f4:	6838      	ldr	r0, [r7, #0]
 80072f6:	f002 fc6a 	bl	8009bce <memcpy>
	}
}
 80072fa:	bf00      	nop
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800730a:	f001 fe7b 	bl	8009004 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007314:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007316:	e011      	b.n	800733c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	2b00      	cmp	r3, #0
 800731e:	d012      	beq.n	8007346 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3324      	adds	r3, #36	; 0x24
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fdb7 	bl	8007e98 <xTaskRemoveFromEventList>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007330:	f000 fef0 	bl	8008114 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	3b01      	subs	r3, #1
 8007338:	b2db      	uxtb	r3, r3
 800733a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800733c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007340:	2b00      	cmp	r3, #0
 8007342:	dce9      	bgt.n	8007318 <prvUnlockQueue+0x16>
 8007344:	e000      	b.n	8007348 <prvUnlockQueue+0x46>
					break;
 8007346:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	22ff      	movs	r2, #255	; 0xff
 800734c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007350:	f001 fe88 	bl	8009064 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007354:	f001 fe56 	bl	8009004 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800735e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007360:	e011      	b.n	8007386 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d012      	beq.n	8007390 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	3310      	adds	r3, #16
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fd92 	bl	8007e98 <xTaskRemoveFromEventList>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800737a:	f000 fecb 	bl	8008114 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	3b01      	subs	r3, #1
 8007382:	b2db      	uxtb	r3, r3
 8007384:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007386:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800738a:	2b00      	cmp	r3, #0
 800738c:	dce9      	bgt.n	8007362 <prvUnlockQueue+0x60>
 800738e:	e000      	b.n	8007392 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007390:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	22ff      	movs	r2, #255	; 0xff
 8007396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800739a:	f001 fe63 	bl	8009064 <vPortExitCritical>
}
 800739e:	bf00      	nop
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073ae:	f001 fe29 	bl	8009004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d102      	bne.n	80073c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073ba:	2301      	movs	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	e001      	b.n	80073c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073c0:	2300      	movs	r3, #0
 80073c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073c4:	f001 fe4e 	bl	8009064 <vPortExitCritical>

	return xReturn;
 80073c8:	68fb      	ldr	r3, [r7, #12]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073da:	f001 fe13 	bl	8009004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d102      	bne.n	80073f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073ea:	2301      	movs	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	e001      	b.n	80073f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073f0:	2300      	movs	r3, #0
 80073f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073f4:	f001 fe36 	bl	8009064 <vPortExitCritical>

	return xReturn;
 80073f8:	68fb      	ldr	r3, [r7, #12]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
	...

08007404 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800740e:	2300      	movs	r3, #0
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	e014      	b.n	800743e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007414:	4a0f      	ldr	r2, [pc, #60]	; (8007454 <vQueueAddToRegistry+0x50>)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10b      	bne.n	8007438 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007420:	490c      	ldr	r1, [pc, #48]	; (8007454 <vQueueAddToRegistry+0x50>)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800742a:	4a0a      	ldr	r2, [pc, #40]	; (8007454 <vQueueAddToRegistry+0x50>)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	4413      	add	r3, r2
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007436:	e006      	b.n	8007446 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3301      	adds	r3, #1
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b07      	cmp	r3, #7
 8007442:	d9e7      	bls.n	8007414 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007444:	bf00      	nop
 8007446:	bf00      	nop
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	20000a0c 	.word	0x20000a0c

08007458 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007460:	2300      	movs	r3, #0
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	e016      	b.n	8007494 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007466:	4a10      	ldr	r2, [pc, #64]	; (80074a8 <vQueueUnregisterQueue+0x50>)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	4413      	add	r3, r2
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	429a      	cmp	r2, r3
 8007474:	d10b      	bne.n	800748e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007476:	4a0c      	ldr	r2, [pc, #48]	; (80074a8 <vQueueUnregisterQueue+0x50>)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2100      	movs	r1, #0
 800747c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007480:	4a09      	ldr	r2, [pc, #36]	; (80074a8 <vQueueUnregisterQueue+0x50>)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	00db      	lsls	r3, r3, #3
 8007486:	4413      	add	r3, r2
 8007488:	2200      	movs	r2, #0
 800748a:	605a      	str	r2, [r3, #4]
				break;
 800748c:	e006      	b.n	800749c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3301      	adds	r3, #1
 8007492:	60fb      	str	r3, [r7, #12]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b07      	cmp	r3, #7
 8007498:	d9e5      	bls.n	8007466 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800749a:	bf00      	nop
 800749c:	bf00      	nop
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	20000a0c 	.word	0x20000a0c

080074ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80074bc:	f001 fda2 	bl	8009004 <vPortEnterCritical>
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074c6:	b25b      	sxtb	r3, r3
 80074c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074cc:	d103      	bne.n	80074d6 <vQueueWaitForMessageRestricted+0x2a>
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074dc:	b25b      	sxtb	r3, r3
 80074de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e2:	d103      	bne.n	80074ec <vQueueWaitForMessageRestricted+0x40>
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074ec:	f001 fdba 	bl	8009064 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d106      	bne.n	8007506 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	3324      	adds	r3, #36	; 0x24
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	4618      	mov	r0, r3
 8007502:	f000 fc9d 	bl	8007e40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007506:	6978      	ldr	r0, [r7, #20]
 8007508:	f7ff fefb 	bl	8007302 <prvUnlockQueue>
	}
 800750c:	bf00      	nop
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08e      	sub	sp, #56	; 0x38
 8007518:	af04      	add	r7, sp, #16
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10a      	bne.n	800753e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	623b      	str	r3, [r7, #32]
}
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10a      	bne.n	800755a <xTaskCreateStatic+0x46>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	61fb      	str	r3, [r7, #28]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800755a:	23a8      	movs	r3, #168	; 0xa8
 800755c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	2ba8      	cmp	r3, #168	; 0xa8
 8007562:	d00a      	beq.n	800757a <xTaskCreateStatic+0x66>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	61bb      	str	r3, [r7, #24]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800757a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757e:	2b00      	cmp	r3, #0
 8007580:	d01e      	beq.n	80075c0 <xTaskCreateStatic+0xac>
 8007582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007584:	2b00      	cmp	r3, #0
 8007586:	d01b      	beq.n	80075c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007590:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007594:	2202      	movs	r2, #2
 8007596:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800759a:	2300      	movs	r3, #0
 800759c:	9303      	str	r3, [sp, #12]
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	9302      	str	r3, [sp, #8]
 80075a2:	f107 0314 	add.w	r3, r7, #20
 80075a6:	9301      	str	r3, [sp, #4]
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	68b9      	ldr	r1, [r7, #8]
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f000 f850 	bl	8007658 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075ba:	f000 f8f3 	bl	80077a4 <prvAddNewTaskToReadyList>
 80075be:	e001      	b.n	80075c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80075c0:	2300      	movs	r3, #0
 80075c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075c4:	697b      	ldr	r3, [r7, #20]
	}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3728      	adds	r7, #40	; 0x28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b08c      	sub	sp, #48	; 0x30
 80075d2:	af04      	add	r7, sp, #16
 80075d4:	60f8      	str	r0, [r7, #12]
 80075d6:	60b9      	str	r1, [r7, #8]
 80075d8:	603b      	str	r3, [r7, #0]
 80075da:	4613      	mov	r3, r2
 80075dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80075de:	88fb      	ldrh	r3, [r7, #6]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4618      	mov	r0, r3
 80075e4:	f001 fe30 	bl	8009248 <pvPortMalloc>
 80075e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00e      	beq.n	800760e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80075f0:	20a8      	movs	r0, #168	; 0xa8
 80075f2:	f001 fe29 	bl	8009248 <pvPortMalloc>
 80075f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	631a      	str	r2, [r3, #48]	; 0x30
 8007604:	e005      	b.n	8007612 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007606:	6978      	ldr	r0, [r7, #20]
 8007608:	f001 feea 	bl	80093e0 <vPortFree>
 800760c:	e001      	b.n	8007612 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800760e:	2300      	movs	r3, #0
 8007610:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d017      	beq.n	8007648 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007620:	88fa      	ldrh	r2, [r7, #6]
 8007622:	2300      	movs	r3, #0
 8007624:	9303      	str	r3, [sp, #12]
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	9302      	str	r3, [sp, #8]
 800762a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68b9      	ldr	r1, [r7, #8]
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f000 f80e 	bl	8007658 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800763c:	69f8      	ldr	r0, [r7, #28]
 800763e:	f000 f8b1 	bl	80077a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007642:	2301      	movs	r3, #1
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	e002      	b.n	800764e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007648:	f04f 33ff 	mov.w	r3, #4294967295
 800764c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800764e:	69bb      	ldr	r3, [r7, #24]
	}
 8007650:	4618      	mov	r0, r3
 8007652:	3720      	adds	r7, #32
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	461a      	mov	r2, r3
 8007670:	21a5      	movs	r1, #165	; 0xa5
 8007672:	f002 f9db 	bl	8009a2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007680:	3b01      	subs	r3, #1
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	f023 0307 	bic.w	r3, r3, #7
 800768e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	f003 0307 	and.w	r3, r3, #7
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	617b      	str	r3, [r7, #20]
}
 80076ac:	bf00      	nop
 80076ae:	e7fe      	b.n	80076ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d01f      	beq.n	80076f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076b6:	2300      	movs	r3, #0
 80076b8:	61fb      	str	r3, [r7, #28]
 80076ba:	e012      	b.n	80076e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	4413      	add	r3, r2
 80076c2:	7819      	ldrb	r1, [r3, #0]
 80076c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	4413      	add	r3, r2
 80076ca:	3334      	adds	r3, #52	; 0x34
 80076cc:	460a      	mov	r2, r1
 80076ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	4413      	add	r3, r2
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d006      	beq.n	80076ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	3301      	adds	r3, #1
 80076e0:	61fb      	str	r3, [r7, #28]
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	2b0f      	cmp	r3, #15
 80076e6:	d9e9      	bls.n	80076bc <prvInitialiseNewTask+0x64>
 80076e8:	e000      	b.n	80076ec <prvInitialiseNewTask+0x94>
			{
				break;
 80076ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076f4:	e003      	b.n	80076fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	2b37      	cmp	r3, #55	; 0x37
 8007702:	d901      	bls.n	8007708 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007704:	2337      	movs	r3, #55	; 0x37
 8007706:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800770c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007712:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	2200      	movs	r2, #0
 8007718:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	3304      	adds	r3, #4
 800771e:	4618      	mov	r0, r3
 8007720:	f7fe fe1a 	bl	8006358 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	3318      	adds	r3, #24
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fe15 	bl	8006358 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007732:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007742:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	2200      	movs	r2, #0
 8007748:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774e:	2200      	movs	r2, #0
 8007750:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	3354      	adds	r3, #84	; 0x54
 8007758:	224c      	movs	r2, #76	; 0x4c
 800775a:	2100      	movs	r1, #0
 800775c:	4618      	mov	r0, r3
 800775e:	f002 f965 	bl	8009a2c <memset>
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	4a0c      	ldr	r2, [pc, #48]	; (8007798 <prvInitialiseNewTask+0x140>)
 8007766:	659a      	str	r2, [r3, #88]	; 0x58
 8007768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776a:	4a0c      	ldr	r2, [pc, #48]	; (800779c <prvInitialiseNewTask+0x144>)
 800776c:	65da      	str	r2, [r3, #92]	; 0x5c
 800776e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007770:	4a0b      	ldr	r2, [pc, #44]	; (80077a0 <prvInitialiseNewTask+0x148>)
 8007772:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	68f9      	ldr	r1, [r7, #12]
 8007778:	69b8      	ldr	r0, [r7, #24]
 800777a:	f001 fb15 	bl	8008da8 <pxPortInitialiseStack>
 800777e:	4602      	mov	r2, r0
 8007780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007782:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800778e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007790:	bf00      	nop
 8007792:	3720      	adds	r7, #32
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	20004ca0 	.word	0x20004ca0
 800779c:	20004d08 	.word	0x20004d08
 80077a0:	20004d70 	.word	0x20004d70

080077a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077ac:	f001 fc2a 	bl	8009004 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077b0:	4b2d      	ldr	r3, [pc, #180]	; (8007868 <prvAddNewTaskToReadyList+0xc4>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3301      	adds	r3, #1
 80077b6:	4a2c      	ldr	r2, [pc, #176]	; (8007868 <prvAddNewTaskToReadyList+0xc4>)
 80077b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077ba:	4b2c      	ldr	r3, [pc, #176]	; (800786c <prvAddNewTaskToReadyList+0xc8>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d109      	bne.n	80077d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077c2:	4a2a      	ldr	r2, [pc, #168]	; (800786c <prvAddNewTaskToReadyList+0xc8>)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077c8:	4b27      	ldr	r3, [pc, #156]	; (8007868 <prvAddNewTaskToReadyList+0xc4>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d110      	bne.n	80077f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077d0:	f000 fcc4 	bl	800815c <prvInitialiseTaskLists>
 80077d4:	e00d      	b.n	80077f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077d6:	4b26      	ldr	r3, [pc, #152]	; (8007870 <prvAddNewTaskToReadyList+0xcc>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d109      	bne.n	80077f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077de:	4b23      	ldr	r3, [pc, #140]	; (800786c <prvAddNewTaskToReadyList+0xc8>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d802      	bhi.n	80077f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077ec:	4a1f      	ldr	r2, [pc, #124]	; (800786c <prvAddNewTaskToReadyList+0xc8>)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077f2:	4b20      	ldr	r3, [pc, #128]	; (8007874 <prvAddNewTaskToReadyList+0xd0>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3301      	adds	r3, #1
 80077f8:	4a1e      	ldr	r2, [pc, #120]	; (8007874 <prvAddNewTaskToReadyList+0xd0>)
 80077fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80077fc:	4b1d      	ldr	r3, [pc, #116]	; (8007874 <prvAddNewTaskToReadyList+0xd0>)
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007808:	4b1b      	ldr	r3, [pc, #108]	; (8007878 <prvAddNewTaskToReadyList+0xd4>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d903      	bls.n	8007818 <prvAddNewTaskToReadyList+0x74>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	4a18      	ldr	r2, [pc, #96]	; (8007878 <prvAddNewTaskToReadyList+0xd4>)
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4a15      	ldr	r2, [pc, #84]	; (800787c <prvAddNewTaskToReadyList+0xd8>)
 8007826:	441a      	add	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3304      	adds	r3, #4
 800782c:	4619      	mov	r1, r3
 800782e:	4610      	mov	r0, r2
 8007830:	f7fe fd9f 	bl	8006372 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007834:	f001 fc16 	bl	8009064 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007838:	4b0d      	ldr	r3, [pc, #52]	; (8007870 <prvAddNewTaskToReadyList+0xcc>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00e      	beq.n	800785e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007840:	4b0a      	ldr	r3, [pc, #40]	; (800786c <prvAddNewTaskToReadyList+0xc8>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784a:	429a      	cmp	r2, r3
 800784c:	d207      	bcs.n	800785e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800784e:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <prvAddNewTaskToReadyList+0xdc>)
 8007850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800785e:	bf00      	nop
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20000f20 	.word	0x20000f20
 800786c:	20000a4c 	.word	0x20000a4c
 8007870:	20000f2c 	.word	0x20000f2c
 8007874:	20000f3c 	.word	0x20000f3c
 8007878:	20000f28 	.word	0x20000f28
 800787c:	20000a50 	.word	0x20000a50
 8007880:	e000ed04 	.word	0xe000ed04

08007884 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800788c:	2300      	movs	r3, #0
 800788e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d017      	beq.n	80078c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007896:	4b13      	ldr	r3, [pc, #76]	; (80078e4 <vTaskDelay+0x60>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <vTaskDelay+0x30>
	__asm volatile
 800789e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	60bb      	str	r3, [r7, #8]
}
 80078b0:	bf00      	nop
 80078b2:	e7fe      	b.n	80078b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80078b4:	f000 f88a 	bl	80079cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078b8:	2100      	movs	r1, #0
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 feb2 	bl	8008624 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078c0:	f000 f892 	bl	80079e8 <xTaskResumeAll>
 80078c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d107      	bne.n	80078dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80078cc:	4b06      	ldr	r3, [pc, #24]	; (80078e8 <vTaskDelay+0x64>)
 80078ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078dc:	bf00      	nop
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	20000f48 	.word	0x20000f48
 80078e8:	e000ed04 	.word	0xe000ed04

080078ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08a      	sub	sp, #40	; 0x28
 80078f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078fa:	463a      	mov	r2, r7
 80078fc:	1d39      	adds	r1, r7, #4
 80078fe:	f107 0308 	add.w	r3, r7, #8
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe fa68 	bl	8005dd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	9202      	str	r2, [sp, #8]
 8007910:	9301      	str	r3, [sp, #4]
 8007912:	2300      	movs	r3, #0
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	2300      	movs	r3, #0
 8007918:	460a      	mov	r2, r1
 800791a:	4924      	ldr	r1, [pc, #144]	; (80079ac <vTaskStartScheduler+0xc0>)
 800791c:	4824      	ldr	r0, [pc, #144]	; (80079b0 <vTaskStartScheduler+0xc4>)
 800791e:	f7ff fdf9 	bl	8007514 <xTaskCreateStatic>
 8007922:	4603      	mov	r3, r0
 8007924:	4a23      	ldr	r2, [pc, #140]	; (80079b4 <vTaskStartScheduler+0xc8>)
 8007926:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007928:	4b22      	ldr	r3, [pc, #136]	; (80079b4 <vTaskStartScheduler+0xc8>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007930:	2301      	movs	r3, #1
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e001      	b.n	800793a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d102      	bne.n	8007946 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007940:	f000 fec4 	bl	80086cc <xTimerCreateTimerTask>
 8007944:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d11b      	bne.n	8007984 <vTaskStartScheduler+0x98>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	613b      	str	r3, [r7, #16]
}
 800795e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007960:	4b15      	ldr	r3, [pc, #84]	; (80079b8 <vTaskStartScheduler+0xcc>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	3354      	adds	r3, #84	; 0x54
 8007966:	4a15      	ldr	r2, [pc, #84]	; (80079bc <vTaskStartScheduler+0xd0>)
 8007968:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800796a:	4b15      	ldr	r3, [pc, #84]	; (80079c0 <vTaskStartScheduler+0xd4>)
 800796c:	f04f 32ff 	mov.w	r2, #4294967295
 8007970:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007972:	4b14      	ldr	r3, [pc, #80]	; (80079c4 <vTaskStartScheduler+0xd8>)
 8007974:	2201      	movs	r2, #1
 8007976:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007978:	4b13      	ldr	r3, [pc, #76]	; (80079c8 <vTaskStartScheduler+0xdc>)
 800797a:	2200      	movs	r2, #0
 800797c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800797e:	f001 fa9f 	bl	8008ec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007982:	e00e      	b.n	80079a2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798a:	d10a      	bne.n	80079a2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800798c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	60fb      	str	r3, [r7, #12]
}
 800799e:	bf00      	nop
 80079a0:	e7fe      	b.n	80079a0 <vTaskStartScheduler+0xb4>
}
 80079a2:	bf00      	nop
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	0800a6f8 	.word	0x0800a6f8
 80079b0:	0800812d 	.word	0x0800812d
 80079b4:	20000f44 	.word	0x20000f44
 80079b8:	20000a4c 	.word	0x20000a4c
 80079bc:	2000009c 	.word	0x2000009c
 80079c0:	20000f40 	.word	0x20000f40
 80079c4:	20000f2c 	.word	0x20000f2c
 80079c8:	20000f24 	.word	0x20000f24

080079cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079cc:	b480      	push	{r7}
 80079ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80079d0:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <vTaskSuspendAll+0x18>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3301      	adds	r3, #1
 80079d6:	4a03      	ldr	r2, [pc, #12]	; (80079e4 <vTaskSuspendAll+0x18>)
 80079d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80079da:	bf00      	nop
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	20000f48 	.word	0x20000f48

080079e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079f6:	4b42      	ldr	r3, [pc, #264]	; (8007b00 <xTaskResumeAll+0x118>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10a      	bne.n	8007a14 <xTaskResumeAll+0x2c>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	603b      	str	r3, [r7, #0]
}
 8007a10:	bf00      	nop
 8007a12:	e7fe      	b.n	8007a12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a14:	f001 faf6 	bl	8009004 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a18:	4b39      	ldr	r3, [pc, #228]	; (8007b00 <xTaskResumeAll+0x118>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	4a38      	ldr	r2, [pc, #224]	; (8007b00 <xTaskResumeAll+0x118>)
 8007a20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a22:	4b37      	ldr	r3, [pc, #220]	; (8007b00 <xTaskResumeAll+0x118>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d162      	bne.n	8007af0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a2a:	4b36      	ldr	r3, [pc, #216]	; (8007b04 <xTaskResumeAll+0x11c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d05e      	beq.n	8007af0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a32:	e02f      	b.n	8007a94 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a34:	4b34      	ldr	r3, [pc, #208]	; (8007b08 <xTaskResumeAll+0x120>)
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3318      	adds	r3, #24
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe fcf3 	bl	800642c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fe fcee 	bl	800642c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a54:	4b2d      	ldr	r3, [pc, #180]	; (8007b0c <xTaskResumeAll+0x124>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d903      	bls.n	8007a64 <xTaskResumeAll+0x7c>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	4a2a      	ldr	r2, [pc, #168]	; (8007b0c <xTaskResumeAll+0x124>)
 8007a62:	6013      	str	r3, [r2, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a68:	4613      	mov	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4a27      	ldr	r2, [pc, #156]	; (8007b10 <xTaskResumeAll+0x128>)
 8007a72:	441a      	add	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3304      	adds	r3, #4
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	f7fe fc79 	bl	8006372 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a84:	4b23      	ldr	r3, [pc, #140]	; (8007b14 <xTaskResumeAll+0x12c>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d302      	bcc.n	8007a94 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a8e:	4b22      	ldr	r3, [pc, #136]	; (8007b18 <xTaskResumeAll+0x130>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a94:	4b1c      	ldr	r3, [pc, #112]	; (8007b08 <xTaskResumeAll+0x120>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1cb      	bne.n	8007a34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007aa2:	f000 fbfd 	bl	80082a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007aa6:	4b1d      	ldr	r3, [pc, #116]	; (8007b1c <xTaskResumeAll+0x134>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d010      	beq.n	8007ad4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ab2:	f000 f847 	bl	8007b44 <xTaskIncrementTick>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007abc:	4b16      	ldr	r3, [pc, #88]	; (8007b18 <xTaskResumeAll+0x130>)
 8007abe:	2201      	movs	r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1f1      	bne.n	8007ab2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <xTaskResumeAll+0x134>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ad4:	4b10      	ldr	r3, [pc, #64]	; (8007b18 <xTaskResumeAll+0x130>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d009      	beq.n	8007af0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007adc:	2301      	movs	r3, #1
 8007ade:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ae0:	4b0f      	ldr	r3, [pc, #60]	; (8007b20 <xTaskResumeAll+0x138>)
 8007ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007af0:	f001 fab8 	bl	8009064 <vPortExitCritical>

	return xAlreadyYielded;
 8007af4:	68bb      	ldr	r3, [r7, #8]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	20000f48 	.word	0x20000f48
 8007b04:	20000f20 	.word	0x20000f20
 8007b08:	20000ee0 	.word	0x20000ee0
 8007b0c:	20000f28 	.word	0x20000f28
 8007b10:	20000a50 	.word	0x20000a50
 8007b14:	20000a4c 	.word	0x20000a4c
 8007b18:	20000f34 	.word	0x20000f34
 8007b1c:	20000f30 	.word	0x20000f30
 8007b20:	e000ed04 	.word	0xe000ed04

08007b24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b2a:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <xTaskGetTickCount+0x1c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b30:	687b      	ldr	r3, [r7, #4]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000f24 	.word	0x20000f24

08007b44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b4e:	4b4f      	ldr	r3, [pc, #316]	; (8007c8c <xTaskIncrementTick+0x148>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f040 808f 	bne.w	8007c76 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b58:	4b4d      	ldr	r3, [pc, #308]	; (8007c90 <xTaskIncrementTick+0x14c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b60:	4a4b      	ldr	r2, [pc, #300]	; (8007c90 <xTaskIncrementTick+0x14c>)
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d120      	bne.n	8007bae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b6c:	4b49      	ldr	r3, [pc, #292]	; (8007c94 <xTaskIncrementTick+0x150>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00a      	beq.n	8007b8c <xTaskIncrementTick+0x48>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	603b      	str	r3, [r7, #0]
}
 8007b88:	bf00      	nop
 8007b8a:	e7fe      	b.n	8007b8a <xTaskIncrementTick+0x46>
 8007b8c:	4b41      	ldr	r3, [pc, #260]	; (8007c94 <xTaskIncrementTick+0x150>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	60fb      	str	r3, [r7, #12]
 8007b92:	4b41      	ldr	r3, [pc, #260]	; (8007c98 <xTaskIncrementTick+0x154>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a3f      	ldr	r2, [pc, #252]	; (8007c94 <xTaskIncrementTick+0x150>)
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	4a3f      	ldr	r2, [pc, #252]	; (8007c98 <xTaskIncrementTick+0x154>)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	4b3e      	ldr	r3, [pc, #248]	; (8007c9c <xTaskIncrementTick+0x158>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	4a3d      	ldr	r2, [pc, #244]	; (8007c9c <xTaskIncrementTick+0x158>)
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	f000 fb79 	bl	80082a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007bae:	4b3c      	ldr	r3, [pc, #240]	; (8007ca0 <xTaskIncrementTick+0x15c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d349      	bcc.n	8007c4c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bb8:	4b36      	ldr	r3, [pc, #216]	; (8007c94 <xTaskIncrementTick+0x150>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d104      	bne.n	8007bcc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bc2:	4b37      	ldr	r3, [pc, #220]	; (8007ca0 <xTaskIncrementTick+0x15c>)
 8007bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bc8:	601a      	str	r2, [r3, #0]
					break;
 8007bca:	e03f      	b.n	8007c4c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bcc:	4b31      	ldr	r3, [pc, #196]	; (8007c94 <xTaskIncrementTick+0x150>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d203      	bcs.n	8007bec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007be4:	4a2e      	ldr	r2, [pc, #184]	; (8007ca0 <xTaskIncrementTick+0x15c>)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bea:	e02f      	b.n	8007c4c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	3304      	adds	r3, #4
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fe fc1b 	bl	800642c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d004      	beq.n	8007c08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	3318      	adds	r3, #24
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe fc12 	bl	800642c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0c:	4b25      	ldr	r3, [pc, #148]	; (8007ca4 <xTaskIncrementTick+0x160>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d903      	bls.n	8007c1c <xTaskIncrementTick+0xd8>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c18:	4a22      	ldr	r2, [pc, #136]	; (8007ca4 <xTaskIncrementTick+0x160>)
 8007c1a:	6013      	str	r3, [r2, #0]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4a1f      	ldr	r2, [pc, #124]	; (8007ca8 <xTaskIncrementTick+0x164>)
 8007c2a:	441a      	add	r2, r3
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	4619      	mov	r1, r3
 8007c32:	4610      	mov	r0, r2
 8007c34:	f7fe fb9d 	bl	8006372 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3c:	4b1b      	ldr	r3, [pc, #108]	; (8007cac <xTaskIncrementTick+0x168>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d3b8      	bcc.n	8007bb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c46:	2301      	movs	r3, #1
 8007c48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c4a:	e7b5      	b.n	8007bb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c4c:	4b17      	ldr	r3, [pc, #92]	; (8007cac <xTaskIncrementTick+0x168>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c52:	4915      	ldr	r1, [pc, #84]	; (8007ca8 <xTaskIncrementTick+0x164>)
 8007c54:	4613      	mov	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	440b      	add	r3, r1
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d901      	bls.n	8007c68 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c64:	2301      	movs	r3, #1
 8007c66:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c68:	4b11      	ldr	r3, [pc, #68]	; (8007cb0 <xTaskIncrementTick+0x16c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d007      	beq.n	8007c80 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c70:	2301      	movs	r3, #1
 8007c72:	617b      	str	r3, [r7, #20]
 8007c74:	e004      	b.n	8007c80 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c76:	4b0f      	ldr	r3, [pc, #60]	; (8007cb4 <xTaskIncrementTick+0x170>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	4a0d      	ldr	r2, [pc, #52]	; (8007cb4 <xTaskIncrementTick+0x170>)
 8007c7e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c80:	697b      	ldr	r3, [r7, #20]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20000f48 	.word	0x20000f48
 8007c90:	20000f24 	.word	0x20000f24
 8007c94:	20000ed8 	.word	0x20000ed8
 8007c98:	20000edc 	.word	0x20000edc
 8007c9c:	20000f38 	.word	0x20000f38
 8007ca0:	20000f40 	.word	0x20000f40
 8007ca4:	20000f28 	.word	0x20000f28
 8007ca8:	20000a50 	.word	0x20000a50
 8007cac:	20000a4c 	.word	0x20000a4c
 8007cb0:	20000f34 	.word	0x20000f34
 8007cb4:	20000f30 	.word	0x20000f30

08007cb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007cbe:	4b2a      	ldr	r3, [pc, #168]	; (8007d68 <vTaskSwitchContext+0xb0>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d003      	beq.n	8007cce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cc6:	4b29      	ldr	r3, [pc, #164]	; (8007d6c <vTaskSwitchContext+0xb4>)
 8007cc8:	2201      	movs	r2, #1
 8007cca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ccc:	e046      	b.n	8007d5c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007cce:	4b27      	ldr	r3, [pc, #156]	; (8007d6c <vTaskSwitchContext+0xb4>)
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cd4:	4b26      	ldr	r3, [pc, #152]	; (8007d70 <vTaskSwitchContext+0xb8>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	e010      	b.n	8007cfe <vTaskSwitchContext+0x46>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <vTaskSwitchContext+0x40>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	607b      	str	r3, [r7, #4]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <vTaskSwitchContext+0x3e>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	60fb      	str	r3, [r7, #12]
 8007cfe:	491d      	ldr	r1, [pc, #116]	; (8007d74 <vTaskSwitchContext+0xbc>)
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0e4      	beq.n	8007cdc <vTaskSwitchContext+0x24>
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4a15      	ldr	r2, [pc, #84]	; (8007d74 <vTaskSwitchContext+0xbc>)
 8007d1e:	4413      	add	r3, r2
 8007d20:	60bb      	str	r3, [r7, #8]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	605a      	str	r2, [r3, #4]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	3308      	adds	r3, #8
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d104      	bne.n	8007d42 <vTaskSwitchContext+0x8a>
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	605a      	str	r2, [r3, #4]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	4a0b      	ldr	r2, [pc, #44]	; (8007d78 <vTaskSwitchContext+0xc0>)
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	4a08      	ldr	r2, [pc, #32]	; (8007d70 <vTaskSwitchContext+0xb8>)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d52:	4b09      	ldr	r3, [pc, #36]	; (8007d78 <vTaskSwitchContext+0xc0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3354      	adds	r3, #84	; 0x54
 8007d58:	4a08      	ldr	r2, [pc, #32]	; (8007d7c <vTaskSwitchContext+0xc4>)
 8007d5a:	6013      	str	r3, [r2, #0]
}
 8007d5c:	bf00      	nop
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	20000f48 	.word	0x20000f48
 8007d6c:	20000f34 	.word	0x20000f34
 8007d70:	20000f28 	.word	0x20000f28
 8007d74:	20000a50 	.word	0x20000a50
 8007d78:	20000a4c 	.word	0x20000a4c
 8007d7c:	2000009c 	.word	0x2000009c

08007d80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10a      	bne.n	8007da6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	60fb      	str	r3, [r7, #12]
}
 8007da2:	bf00      	nop
 8007da4:	e7fe      	b.n	8007da4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007da6:	4b07      	ldr	r3, [pc, #28]	; (8007dc4 <vTaskPlaceOnEventList+0x44>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3318      	adds	r3, #24
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7fe fb03 	bl	80063ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007db4:	2101      	movs	r1, #1
 8007db6:	6838      	ldr	r0, [r7, #0]
 8007db8:	f000 fc34 	bl	8008624 <prvAddCurrentTaskToDelayedList>
}
 8007dbc:	bf00      	nop
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	20000a4c 	.word	0x20000a4c

08007dc8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10a      	bne.n	8007df0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	617b      	str	r3, [r7, #20]
}
 8007dec:	bf00      	nop
 8007dee:	e7fe      	b.n	8007dee <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007df0:	4b11      	ldr	r3, [pc, #68]	; (8007e38 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10a      	bne.n	8007e0e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	613b      	str	r3, [r7, #16]
}
 8007e0a:	bf00      	nop
 8007e0c:	e7fe      	b.n	8007e0c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007e0e:	4b0b      	ldr	r3, [pc, #44]	; (8007e3c <vTaskPlaceOnUnorderedEventList+0x74>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007e18:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e1a:	4b08      	ldr	r3, [pc, #32]	; (8007e3c <vTaskPlaceOnUnorderedEventList+0x74>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3318      	adds	r3, #24
 8007e20:	4619      	mov	r1, r3
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f7fe faa5 	bl	8006372 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e28:	2101      	movs	r1, #1
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fbfa 	bl	8008624 <prvAddCurrentTaskToDelayedList>
}
 8007e30:	bf00      	nop
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	20000f48 	.word	0x20000f48
 8007e3c:	20000a4c 	.word	0x20000a4c

08007e40 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10a      	bne.n	8007e68 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	617b      	str	r3, [r7, #20]
}
 8007e64:	bf00      	nop
 8007e66:	e7fe      	b.n	8007e66 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e68:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <vTaskPlaceOnEventListRestricted+0x54>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3318      	adds	r3, #24
 8007e6e:	4619      	mov	r1, r3
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f7fe fa7e 	bl	8006372 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e80:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e82:	6879      	ldr	r1, [r7, #4]
 8007e84:	68b8      	ldr	r0, [r7, #8]
 8007e86:	f000 fbcd 	bl	8008624 <prvAddCurrentTaskToDelayedList>
	}
 8007e8a:	bf00      	nop
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20000a4c 	.word	0x20000a4c

08007e98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10a      	bne.n	8007ec4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	60fb      	str	r3, [r7, #12]
}
 8007ec0:	bf00      	nop
 8007ec2:	e7fe      	b.n	8007ec2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	3318      	adds	r3, #24
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fe faaf 	bl	800642c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ece:	4b1e      	ldr	r3, [pc, #120]	; (8007f48 <xTaskRemoveFromEventList+0xb0>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d11d      	bne.n	8007f12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	3304      	adds	r3, #4
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fe faa6 	bl	800642c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee4:	4b19      	ldr	r3, [pc, #100]	; (8007f4c <xTaskRemoveFromEventList+0xb4>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d903      	bls.n	8007ef4 <xTaskRemoveFromEventList+0x5c>
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef0:	4a16      	ldr	r2, [pc, #88]	; (8007f4c <xTaskRemoveFromEventList+0xb4>)
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef8:	4613      	mov	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4a13      	ldr	r2, [pc, #76]	; (8007f50 <xTaskRemoveFromEventList+0xb8>)
 8007f02:	441a      	add	r2, r3
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	3304      	adds	r3, #4
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	f7fe fa31 	bl	8006372 <vListInsertEnd>
 8007f10:	e005      	b.n	8007f1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	3318      	adds	r3, #24
 8007f16:	4619      	mov	r1, r3
 8007f18:	480e      	ldr	r0, [pc, #56]	; (8007f54 <xTaskRemoveFromEventList+0xbc>)
 8007f1a:	f7fe fa2a 	bl	8006372 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f22:	4b0d      	ldr	r3, [pc, #52]	; (8007f58 <xTaskRemoveFromEventList+0xc0>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d905      	bls.n	8007f38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007f30:	4b0a      	ldr	r3, [pc, #40]	; (8007f5c <xTaskRemoveFromEventList+0xc4>)
 8007f32:	2201      	movs	r2, #1
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	e001      	b.n	8007f3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007f3c:	697b      	ldr	r3, [r7, #20]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20000f48 	.word	0x20000f48
 8007f4c:	20000f28 	.word	0x20000f28
 8007f50:	20000a50 	.word	0x20000a50
 8007f54:	20000ee0 	.word	0x20000ee0
 8007f58:	20000a4c 	.word	0x20000a4c
 8007f5c:	20000f34 	.word	0x20000f34

08007f60 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007f6a:	4b29      	ldr	r3, [pc, #164]	; (8008010 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10a      	bne.n	8007f88 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	613b      	str	r3, [r7, #16]
}
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10a      	bne.n	8007fb4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	60fb      	str	r3, [r7, #12]
}
 8007fb0:	bf00      	nop
 8007fb2:	e7fe      	b.n	8007fb2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7fe fa39 	bl	800642c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fe fa34 	bl	800642c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc8:	4b12      	ldr	r3, [pc, #72]	; (8008014 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d903      	bls.n	8007fd8 <vTaskRemoveFromUnorderedEventList+0x78>
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	4a0f      	ldr	r2, [pc, #60]	; (8008014 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fdc:	4613      	mov	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4a0c      	ldr	r2, [pc, #48]	; (8008018 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007fe6:	441a      	add	r2, r3
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	3304      	adds	r3, #4
 8007fec:	4619      	mov	r1, r3
 8007fee:	4610      	mov	r0, r2
 8007ff0:	f7fe f9bf 	bl	8006372 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff8:	4b08      	ldr	r3, [pc, #32]	; (800801c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d902      	bls.n	8008008 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008002:	4b07      	ldr	r3, [pc, #28]	; (8008020 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8008004:	2201      	movs	r2, #1
 8008006:	601a      	str	r2, [r3, #0]
	}
}
 8008008:	bf00      	nop
 800800a:	3718      	adds	r7, #24
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	20000f48 	.word	0x20000f48
 8008014:	20000f28 	.word	0x20000f28
 8008018:	20000a50 	.word	0x20000a50
 800801c:	20000a4c 	.word	0x20000a4c
 8008020:	20000f34 	.word	0x20000f34

08008024 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800802c:	4b06      	ldr	r3, [pc, #24]	; (8008048 <vTaskInternalSetTimeOutState+0x24>)
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008034:	4b05      	ldr	r3, [pc, #20]	; (800804c <vTaskInternalSetTimeOutState+0x28>)
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	605a      	str	r2, [r3, #4]
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	20000f38 	.word	0x20000f38
 800804c:	20000f24 	.word	0x20000f24

08008050 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10a      	bne.n	8008076 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	613b      	str	r3, [r7, #16]
}
 8008072:	bf00      	nop
 8008074:	e7fe      	b.n	8008074 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	60fb      	str	r3, [r7, #12]
}
 800808e:	bf00      	nop
 8008090:	e7fe      	b.n	8008090 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008092:	f000 ffb7 	bl	8009004 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008096:	4b1d      	ldr	r3, [pc, #116]	; (800810c <xTaskCheckForTimeOut+0xbc>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ae:	d102      	bne.n	80080b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080b0:	2300      	movs	r3, #0
 80080b2:	61fb      	str	r3, [r7, #28]
 80080b4:	e023      	b.n	80080fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	4b15      	ldr	r3, [pc, #84]	; (8008110 <xTaskCheckForTimeOut+0xc0>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d007      	beq.n	80080d2 <xTaskCheckForTimeOut+0x82>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	69ba      	ldr	r2, [r7, #24]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d302      	bcc.n	80080d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80080cc:	2301      	movs	r3, #1
 80080ce:	61fb      	str	r3, [r7, #28]
 80080d0:	e015      	b.n	80080fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d20b      	bcs.n	80080f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	1ad2      	subs	r2, r2, r3
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff ff9b 	bl	8008024 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080ee:	2300      	movs	r3, #0
 80080f0:	61fb      	str	r3, [r7, #28]
 80080f2:	e004      	b.n	80080fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2200      	movs	r2, #0
 80080f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080fa:	2301      	movs	r3, #1
 80080fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080fe:	f000 ffb1 	bl	8009064 <vPortExitCritical>

	return xReturn;
 8008102:	69fb      	ldr	r3, [r7, #28]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3720      	adds	r7, #32
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	20000f24 	.word	0x20000f24
 8008110:	20000f38 	.word	0x20000f38

08008114 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008118:	4b03      	ldr	r3, [pc, #12]	; (8008128 <vTaskMissedYield+0x14>)
 800811a:	2201      	movs	r2, #1
 800811c:	601a      	str	r2, [r3, #0]
}
 800811e:	bf00      	nop
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	20000f34 	.word	0x20000f34

0800812c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008134:	f000 f852 	bl	80081dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008138:	4b06      	ldr	r3, [pc, #24]	; (8008154 <prvIdleTask+0x28>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d9f9      	bls.n	8008134 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008140:	4b05      	ldr	r3, [pc, #20]	; (8008158 <prvIdleTask+0x2c>)
 8008142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008150:	e7f0      	b.n	8008134 <prvIdleTask+0x8>
 8008152:	bf00      	nop
 8008154:	20000a50 	.word	0x20000a50
 8008158:	e000ed04 	.word	0xe000ed04

0800815c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008162:	2300      	movs	r3, #0
 8008164:	607b      	str	r3, [r7, #4]
 8008166:	e00c      	b.n	8008182 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4a12      	ldr	r2, [pc, #72]	; (80081bc <prvInitialiseTaskLists+0x60>)
 8008174:	4413      	add	r3, r2
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe f8ce 	bl	8006318 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3301      	adds	r3, #1
 8008180:	607b      	str	r3, [r7, #4]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b37      	cmp	r3, #55	; 0x37
 8008186:	d9ef      	bls.n	8008168 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008188:	480d      	ldr	r0, [pc, #52]	; (80081c0 <prvInitialiseTaskLists+0x64>)
 800818a:	f7fe f8c5 	bl	8006318 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800818e:	480d      	ldr	r0, [pc, #52]	; (80081c4 <prvInitialiseTaskLists+0x68>)
 8008190:	f7fe f8c2 	bl	8006318 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008194:	480c      	ldr	r0, [pc, #48]	; (80081c8 <prvInitialiseTaskLists+0x6c>)
 8008196:	f7fe f8bf 	bl	8006318 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800819a:	480c      	ldr	r0, [pc, #48]	; (80081cc <prvInitialiseTaskLists+0x70>)
 800819c:	f7fe f8bc 	bl	8006318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081a0:	480b      	ldr	r0, [pc, #44]	; (80081d0 <prvInitialiseTaskLists+0x74>)
 80081a2:	f7fe f8b9 	bl	8006318 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081a6:	4b0b      	ldr	r3, [pc, #44]	; (80081d4 <prvInitialiseTaskLists+0x78>)
 80081a8:	4a05      	ldr	r2, [pc, #20]	; (80081c0 <prvInitialiseTaskLists+0x64>)
 80081aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081ac:	4b0a      	ldr	r3, [pc, #40]	; (80081d8 <prvInitialiseTaskLists+0x7c>)
 80081ae:	4a05      	ldr	r2, [pc, #20]	; (80081c4 <prvInitialiseTaskLists+0x68>)
 80081b0:	601a      	str	r2, [r3, #0]
}
 80081b2:	bf00      	nop
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000a50 	.word	0x20000a50
 80081c0:	20000eb0 	.word	0x20000eb0
 80081c4:	20000ec4 	.word	0x20000ec4
 80081c8:	20000ee0 	.word	0x20000ee0
 80081cc:	20000ef4 	.word	0x20000ef4
 80081d0:	20000f0c 	.word	0x20000f0c
 80081d4:	20000ed8 	.word	0x20000ed8
 80081d8:	20000edc 	.word	0x20000edc

080081dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081e2:	e019      	b.n	8008218 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081e4:	f000 ff0e 	bl	8009004 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081e8:	4b10      	ldr	r3, [pc, #64]	; (800822c <prvCheckTasksWaitingTermination+0x50>)
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3304      	adds	r3, #4
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fe f919 	bl	800642c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081fa:	4b0d      	ldr	r3, [pc, #52]	; (8008230 <prvCheckTasksWaitingTermination+0x54>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3b01      	subs	r3, #1
 8008200:	4a0b      	ldr	r2, [pc, #44]	; (8008230 <prvCheckTasksWaitingTermination+0x54>)
 8008202:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008204:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <prvCheckTasksWaitingTermination+0x58>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3b01      	subs	r3, #1
 800820a:	4a0a      	ldr	r2, [pc, #40]	; (8008234 <prvCheckTasksWaitingTermination+0x58>)
 800820c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800820e:	f000 ff29 	bl	8009064 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f810 	bl	8008238 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008218:	4b06      	ldr	r3, [pc, #24]	; (8008234 <prvCheckTasksWaitingTermination+0x58>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e1      	bne.n	80081e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20000ef4 	.word	0x20000ef4
 8008230:	20000f20 	.word	0x20000f20
 8008234:	20000f08 	.word	0x20000f08

08008238 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3354      	adds	r3, #84	; 0x54
 8008244:	4618      	mov	r0, r3
 8008246:	f001 fc09 	bl	8009a5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008250:	2b00      	cmp	r3, #0
 8008252:	d108      	bne.n	8008266 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008258:	4618      	mov	r0, r3
 800825a:	f001 f8c1 	bl	80093e0 <vPortFree>
				vPortFree( pxTCB );
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f001 f8be 	bl	80093e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008264:	e018      	b.n	8008298 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800826c:	2b01      	cmp	r3, #1
 800826e:	d103      	bne.n	8008278 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f001 f8b5 	bl	80093e0 <vPortFree>
	}
 8008276:	e00f      	b.n	8008298 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800827e:	2b02      	cmp	r3, #2
 8008280:	d00a      	beq.n	8008298 <prvDeleteTCB+0x60>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	60fb      	str	r3, [r7, #12]
}
 8008294:	bf00      	nop
 8008296:	e7fe      	b.n	8008296 <prvDeleteTCB+0x5e>
	}
 8008298:	bf00      	nop
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082a6:	4b0c      	ldr	r3, [pc, #48]	; (80082d8 <prvResetNextTaskUnblockTime+0x38>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d104      	bne.n	80082ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082b0:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <prvResetNextTaskUnblockTime+0x3c>)
 80082b2:	f04f 32ff 	mov.w	r2, #4294967295
 80082b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80082b8:	e008      	b.n	80082cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ba:	4b07      	ldr	r3, [pc, #28]	; (80082d8 <prvResetNextTaskUnblockTime+0x38>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	4a04      	ldr	r2, [pc, #16]	; (80082dc <prvResetNextTaskUnblockTime+0x3c>)
 80082ca:	6013      	str	r3, [r2, #0]
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	20000ed8 	.word	0x20000ed8
 80082dc:	20000f40 	.word	0x20000f40

080082e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082e6:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <xTaskGetSchedulerState+0x34>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d102      	bne.n	80082f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082ee:	2301      	movs	r3, #1
 80082f0:	607b      	str	r3, [r7, #4]
 80082f2:	e008      	b.n	8008306 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082f4:	4b08      	ldr	r3, [pc, #32]	; (8008318 <xTaskGetSchedulerState+0x38>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082fc:	2302      	movs	r3, #2
 80082fe:	607b      	str	r3, [r7, #4]
 8008300:	e001      	b.n	8008306 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008302:	2300      	movs	r3, #0
 8008304:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008306:	687b      	ldr	r3, [r7, #4]
	}
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	20000f2c 	.word	0x20000f2c
 8008318:	20000f48 	.word	0x20000f48

0800831c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008328:	2300      	movs	r3, #0
 800832a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d051      	beq.n	80083d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008336:	4b2a      	ldr	r3, [pc, #168]	; (80083e0 <xTaskPriorityInherit+0xc4>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833c:	429a      	cmp	r2, r3
 800833e:	d241      	bcs.n	80083c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	db06      	blt.n	8008356 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008348:	4b25      	ldr	r3, [pc, #148]	; (80083e0 <xTaskPriorityInherit+0xc4>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	6959      	ldr	r1, [r3, #20]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800835e:	4613      	mov	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4a1f      	ldr	r2, [pc, #124]	; (80083e4 <xTaskPriorityInherit+0xc8>)
 8008368:	4413      	add	r3, r2
 800836a:	4299      	cmp	r1, r3
 800836c:	d122      	bne.n	80083b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	3304      	adds	r3, #4
 8008372:	4618      	mov	r0, r3
 8008374:	f7fe f85a 	bl	800642c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008378:	4b19      	ldr	r3, [pc, #100]	; (80083e0 <xTaskPriorityInherit+0xc4>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008386:	4b18      	ldr	r3, [pc, #96]	; (80083e8 <xTaskPriorityInherit+0xcc>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	429a      	cmp	r2, r3
 800838c:	d903      	bls.n	8008396 <xTaskPriorityInherit+0x7a>
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008392:	4a15      	ldr	r2, [pc, #84]	; (80083e8 <xTaskPriorityInherit+0xcc>)
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839a:	4613      	mov	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4a10      	ldr	r2, [pc, #64]	; (80083e4 <xTaskPriorityInherit+0xc8>)
 80083a4:	441a      	add	r2, r3
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	3304      	adds	r3, #4
 80083aa:	4619      	mov	r1, r3
 80083ac:	4610      	mov	r0, r2
 80083ae:	f7fd ffe0 	bl	8006372 <vListInsertEnd>
 80083b2:	e004      	b.n	80083be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80083b4:	4b0a      	ldr	r3, [pc, #40]	; (80083e0 <xTaskPriorityInherit+0xc4>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80083be:	2301      	movs	r3, #1
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	e008      	b.n	80083d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083c8:	4b05      	ldr	r3, [pc, #20]	; (80083e0 <xTaskPriorityInherit+0xc4>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d201      	bcs.n	80083d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80083d2:	2301      	movs	r3, #1
 80083d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083d6:	68fb      	ldr	r3, [r7, #12]
	}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	20000a4c 	.word	0x20000a4c
 80083e4:	20000a50 	.word	0x20000a50
 80083e8:	20000f28 	.word	0x20000f28

080083ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80083f8:	2300      	movs	r3, #0
 80083fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d056      	beq.n	80084b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008402:	4b2e      	ldr	r3, [pc, #184]	; (80084bc <xTaskPriorityDisinherit+0xd0>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	429a      	cmp	r2, r3
 800840a:	d00a      	beq.n	8008422 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	60fb      	str	r3, [r7, #12]
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10a      	bne.n	8008440 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	60bb      	str	r3, [r7, #8]
}
 800843c:	bf00      	nop
 800843e:	e7fe      	b.n	800843e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008444:	1e5a      	subs	r2, r3, #1
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008452:	429a      	cmp	r2, r3
 8008454:	d02c      	beq.n	80084b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845a:	2b00      	cmp	r3, #0
 800845c:	d128      	bne.n	80084b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	3304      	adds	r3, #4
 8008462:	4618      	mov	r0, r3
 8008464:	f7fd ffe2 	bl	800642c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008474:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008480:	4b0f      	ldr	r3, [pc, #60]	; (80084c0 <xTaskPriorityDisinherit+0xd4>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	429a      	cmp	r2, r3
 8008486:	d903      	bls.n	8008490 <xTaskPriorityDisinherit+0xa4>
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848c:	4a0c      	ldr	r2, [pc, #48]	; (80084c0 <xTaskPriorityDisinherit+0xd4>)
 800848e:	6013      	str	r3, [r2, #0]
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008494:	4613      	mov	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4a09      	ldr	r2, [pc, #36]	; (80084c4 <xTaskPriorityDisinherit+0xd8>)
 800849e:	441a      	add	r2, r3
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	3304      	adds	r3, #4
 80084a4:	4619      	mov	r1, r3
 80084a6:	4610      	mov	r0, r2
 80084a8:	f7fd ff63 	bl	8006372 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80084ac:	2301      	movs	r3, #1
 80084ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084b0:	697b      	ldr	r3, [r7, #20]
	}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3718      	adds	r7, #24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20000a4c 	.word	0x20000a4c
 80084c0:	20000f28 	.word	0x20000f28
 80084c4:	20000a50 	.word	0x20000a50

080084c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b088      	sub	sp, #32
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80084d6:	2301      	movs	r3, #1
 80084d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d06a      	beq.n	80085b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10a      	bne.n	80084fe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	60fb      	str	r3, [r7, #12]
}
 80084fa:	bf00      	nop
 80084fc:	e7fe      	b.n	80084fc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	429a      	cmp	r2, r3
 8008506:	d902      	bls.n	800850e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	61fb      	str	r3, [r7, #28]
 800850c:	e002      	b.n	8008514 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008512:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008518:	69fa      	ldr	r2, [r7, #28]
 800851a:	429a      	cmp	r2, r3
 800851c:	d04b      	beq.n	80085b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	429a      	cmp	r2, r3
 8008526:	d146      	bne.n	80085b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008528:	4b25      	ldr	r3, [pc, #148]	; (80085c0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	429a      	cmp	r2, r3
 8008530:	d10a      	bne.n	8008548 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	60bb      	str	r3, [r7, #8]
}
 8008544:	bf00      	nop
 8008546:	e7fe      	b.n	8008546 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	69fa      	ldr	r2, [r7, #28]
 8008552:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	2b00      	cmp	r3, #0
 800855a:	db04      	blt.n	8008566 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	6959      	ldr	r1, [r3, #20]
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	4613      	mov	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4a13      	ldr	r2, [pc, #76]	; (80085c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008576:	4413      	add	r3, r2
 8008578:	4299      	cmp	r1, r3
 800857a:	d11c      	bne.n	80085b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	3304      	adds	r3, #4
 8008580:	4618      	mov	r0, r3
 8008582:	f7fd ff53 	bl	800642c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858a:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	429a      	cmp	r2, r3
 8008590:	d903      	bls.n	800859a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008596:	4a0c      	ldr	r2, [pc, #48]	; (80085c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859e:	4613      	mov	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4a07      	ldr	r2, [pc, #28]	; (80085c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80085a8:	441a      	add	r2, r3
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	3304      	adds	r3, #4
 80085ae:	4619      	mov	r1, r3
 80085b0:	4610      	mov	r0, r2
 80085b2:	f7fd fede 	bl	8006372 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085b6:	bf00      	nop
 80085b8:	3720      	adds	r7, #32
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	20000a4c 	.word	0x20000a4c
 80085c4:	20000a50 	.word	0x20000a50
 80085c8:	20000f28 	.word	0x20000f28

080085cc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80085d2:	4b09      	ldr	r3, [pc, #36]	; (80085f8 <uxTaskResetEventItemValue+0x2c>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085da:	4b07      	ldr	r3, [pc, #28]	; (80085f8 <uxTaskResetEventItemValue+0x2c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e0:	4b05      	ldr	r3, [pc, #20]	; (80085f8 <uxTaskResetEventItemValue+0x2c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80085e8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80085ea:	687b      	ldr	r3, [r7, #4]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	20000a4c 	.word	0x20000a4c

080085fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80085fc:	b480      	push	{r7}
 80085fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008600:	4b07      	ldr	r3, [pc, #28]	; (8008620 <pvTaskIncrementMutexHeldCount+0x24>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d004      	beq.n	8008612 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008608:	4b05      	ldr	r3, [pc, #20]	; (8008620 <pvTaskIncrementMutexHeldCount+0x24>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800860e:	3201      	adds	r2, #1
 8008610:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008612:	4b03      	ldr	r3, [pc, #12]	; (8008620 <pvTaskIncrementMutexHeldCount+0x24>)
 8008614:	681b      	ldr	r3, [r3, #0]
	}
 8008616:	4618      	mov	r0, r3
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr
 8008620:	20000a4c 	.word	0x20000a4c

08008624 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800862e:	4b21      	ldr	r3, [pc, #132]	; (80086b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008634:	4b20      	ldr	r3, [pc, #128]	; (80086b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3304      	adds	r3, #4
 800863a:	4618      	mov	r0, r3
 800863c:	f7fd fef6 	bl	800642c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008646:	d10a      	bne.n	800865e <prvAddCurrentTaskToDelayedList+0x3a>
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d007      	beq.n	800865e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800864e:	4b1a      	ldr	r3, [pc, #104]	; (80086b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3304      	adds	r3, #4
 8008654:	4619      	mov	r1, r3
 8008656:	4819      	ldr	r0, [pc, #100]	; (80086bc <prvAddCurrentTaskToDelayedList+0x98>)
 8008658:	f7fd fe8b 	bl	8006372 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800865c:	e026      	b.n	80086ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4413      	add	r3, r2
 8008664:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008666:	4b14      	ldr	r3, [pc, #80]	; (80086b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	429a      	cmp	r2, r3
 8008674:	d209      	bcs.n	800868a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008676:	4b12      	ldr	r3, [pc, #72]	; (80086c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	4b0f      	ldr	r3, [pc, #60]	; (80086b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3304      	adds	r3, #4
 8008680:	4619      	mov	r1, r3
 8008682:	4610      	mov	r0, r2
 8008684:	f7fd fe99 	bl	80063ba <vListInsert>
}
 8008688:	e010      	b.n	80086ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800868a:	4b0e      	ldr	r3, [pc, #56]	; (80086c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	3304      	adds	r3, #4
 8008694:	4619      	mov	r1, r3
 8008696:	4610      	mov	r0, r2
 8008698:	f7fd fe8f 	bl	80063ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800869c:	4b0a      	ldr	r3, [pc, #40]	; (80086c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d202      	bcs.n	80086ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80086a6:	4a08      	ldr	r2, [pc, #32]	; (80086c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	6013      	str	r3, [r2, #0]
}
 80086ac:	bf00      	nop
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	20000f24 	.word	0x20000f24
 80086b8:	20000a4c 	.word	0x20000a4c
 80086bc:	20000f0c 	.word	0x20000f0c
 80086c0:	20000edc 	.word	0x20000edc
 80086c4:	20000ed8 	.word	0x20000ed8
 80086c8:	20000f40 	.word	0x20000f40

080086cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b08a      	sub	sp, #40	; 0x28
 80086d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80086d6:	f000 fb07 	bl	8008ce8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80086da:	4b1c      	ldr	r3, [pc, #112]	; (800874c <xTimerCreateTimerTask+0x80>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d021      	beq.n	8008726 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80086e2:	2300      	movs	r3, #0
 80086e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80086e6:	2300      	movs	r3, #0
 80086e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80086ea:	1d3a      	adds	r2, r7, #4
 80086ec:	f107 0108 	add.w	r1, r7, #8
 80086f0:	f107 030c 	add.w	r3, r7, #12
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7fd fb89 	bl	8005e0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	9202      	str	r2, [sp, #8]
 8008702:	9301      	str	r3, [sp, #4]
 8008704:	2302      	movs	r3, #2
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	2300      	movs	r3, #0
 800870a:	460a      	mov	r2, r1
 800870c:	4910      	ldr	r1, [pc, #64]	; (8008750 <xTimerCreateTimerTask+0x84>)
 800870e:	4811      	ldr	r0, [pc, #68]	; (8008754 <xTimerCreateTimerTask+0x88>)
 8008710:	f7fe ff00 	bl	8007514 <xTaskCreateStatic>
 8008714:	4603      	mov	r3, r0
 8008716:	4a10      	ldr	r2, [pc, #64]	; (8008758 <xTimerCreateTimerTask+0x8c>)
 8008718:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800871a:	4b0f      	ldr	r3, [pc, #60]	; (8008758 <xTimerCreateTimerTask+0x8c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008722:	2301      	movs	r3, #1
 8008724:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10a      	bne.n	8008742 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	613b      	str	r3, [r7, #16]
}
 800873e:	bf00      	nop
 8008740:	e7fe      	b.n	8008740 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008742:	697b      	ldr	r3, [r7, #20]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	20000f7c 	.word	0x20000f7c
 8008750:	0800a700 	.word	0x0800a700
 8008754:	08008891 	.word	0x08008891
 8008758:	20000f80 	.word	0x20000f80

0800875c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08a      	sub	sp, #40	; 0x28
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800876a:	2300      	movs	r3, #0
 800876c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10a      	bne.n	800878a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	623b      	str	r3, [r7, #32]
}
 8008786:	bf00      	nop
 8008788:	e7fe      	b.n	8008788 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800878a:	4b1a      	ldr	r3, [pc, #104]	; (80087f4 <xTimerGenericCommand+0x98>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d02a      	beq.n	80087e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b05      	cmp	r3, #5
 80087a2:	dc18      	bgt.n	80087d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087a4:	f7ff fd9c 	bl	80082e0 <xTaskGetSchedulerState>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d109      	bne.n	80087c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087ae:	4b11      	ldr	r3, [pc, #68]	; (80087f4 <xTimerGenericCommand+0x98>)
 80087b0:	6818      	ldr	r0, [r3, #0]
 80087b2:	f107 0110 	add.w	r1, r7, #16
 80087b6:	2300      	movs	r3, #0
 80087b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ba:	f7fe f809 	bl	80067d0 <xQueueGenericSend>
 80087be:	6278      	str	r0, [r7, #36]	; 0x24
 80087c0:	e012      	b.n	80087e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80087c2:	4b0c      	ldr	r3, [pc, #48]	; (80087f4 <xTimerGenericCommand+0x98>)
 80087c4:	6818      	ldr	r0, [r3, #0]
 80087c6:	f107 0110 	add.w	r1, r7, #16
 80087ca:	2300      	movs	r3, #0
 80087cc:	2200      	movs	r2, #0
 80087ce:	f7fd ffff 	bl	80067d0 <xQueueGenericSend>
 80087d2:	6278      	str	r0, [r7, #36]	; 0x24
 80087d4:	e008      	b.n	80087e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80087d6:	4b07      	ldr	r3, [pc, #28]	; (80087f4 <xTimerGenericCommand+0x98>)
 80087d8:	6818      	ldr	r0, [r3, #0]
 80087da:	f107 0110 	add.w	r1, r7, #16
 80087de:	2300      	movs	r3, #0
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	f7fe f8f3 	bl	80069cc <xQueueGenericSendFromISR>
 80087e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3728      	adds	r7, #40	; 0x28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20000f7c 	.word	0x20000f7c

080087f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af02      	add	r7, sp, #8
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008802:	4b22      	ldr	r3, [pc, #136]	; (800888c <prvProcessExpiredTimer+0x94>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	3304      	adds	r3, #4
 8008810:	4618      	mov	r0, r3
 8008812:	f7fd fe0b 	bl	800642c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800881c:	f003 0304 	and.w	r3, r3, #4
 8008820:	2b00      	cmp	r3, #0
 8008822:	d022      	beq.n	800886a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	699a      	ldr	r2, [r3, #24]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	18d1      	adds	r1, r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	683a      	ldr	r2, [r7, #0]
 8008830:	6978      	ldr	r0, [r7, #20]
 8008832:	f000 f8d1 	bl	80089d8 <prvInsertTimerInActiveList>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d01f      	beq.n	800887c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800883c:	2300      	movs	r3, #0
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	2300      	movs	r3, #0
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	2100      	movs	r1, #0
 8008846:	6978      	ldr	r0, [r7, #20]
 8008848:	f7ff ff88 	bl	800875c <xTimerGenericCommand>
 800884c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d113      	bne.n	800887c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	60fb      	str	r3, [r7, #12]
}
 8008866:	bf00      	nop
 8008868:	e7fe      	b.n	8008868 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008870:	f023 0301 	bic.w	r3, r3, #1
 8008874:	b2da      	uxtb	r2, r3
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	6a1b      	ldr	r3, [r3, #32]
 8008880:	6978      	ldr	r0, [r7, #20]
 8008882:	4798      	blx	r3
}
 8008884:	bf00      	nop
 8008886:	3718      	adds	r7, #24
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	20000f74 	.word	0x20000f74

08008890 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008898:	f107 0308 	add.w	r3, r7, #8
 800889c:	4618      	mov	r0, r3
 800889e:	f000 f857 	bl	8008950 <prvGetNextExpireTime>
 80088a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	4619      	mov	r1, r3
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 f803 	bl	80088b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80088ae:	f000 f8d5 	bl	8008a5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088b2:	e7f1      	b.n	8008898 <prvTimerTask+0x8>

080088b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088be:	f7ff f885 	bl	80079cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088c2:	f107 0308 	add.w	r3, r7, #8
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 f866 	bl	8008998 <prvSampleTimeNow>
 80088cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d130      	bne.n	8008936 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10a      	bne.n	80088f0 <prvProcessTimerOrBlockTask+0x3c>
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d806      	bhi.n	80088f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80088e2:	f7ff f881 	bl	80079e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80088e6:	68f9      	ldr	r1, [r7, #12]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7ff ff85 	bl	80087f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80088ee:	e024      	b.n	800893a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d008      	beq.n	8008908 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80088f6:	4b13      	ldr	r3, [pc, #76]	; (8008944 <prvProcessTimerOrBlockTask+0x90>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d101      	bne.n	8008904 <prvProcessTimerOrBlockTask+0x50>
 8008900:	2301      	movs	r3, #1
 8008902:	e000      	b.n	8008906 <prvProcessTimerOrBlockTask+0x52>
 8008904:	2300      	movs	r3, #0
 8008906:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008908:	4b0f      	ldr	r3, [pc, #60]	; (8008948 <prvProcessTimerOrBlockTask+0x94>)
 800890a:	6818      	ldr	r0, [r3, #0]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	4619      	mov	r1, r3
 8008916:	f7fe fdc9 	bl	80074ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800891a:	f7ff f865 	bl	80079e8 <xTaskResumeAll>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10a      	bne.n	800893a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008924:	4b09      	ldr	r3, [pc, #36]	; (800894c <prvProcessTimerOrBlockTask+0x98>)
 8008926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	f3bf 8f6f 	isb	sy
}
 8008934:	e001      	b.n	800893a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008936:	f7ff f857 	bl	80079e8 <xTaskResumeAll>
}
 800893a:	bf00      	nop
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20000f78 	.word	0x20000f78
 8008948:	20000f7c 	.word	0x20000f7c
 800894c:	e000ed04 	.word	0xe000ed04

08008950 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008958:	4b0e      	ldr	r3, [pc, #56]	; (8008994 <prvGetNextExpireTime+0x44>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <prvGetNextExpireTime+0x16>
 8008962:	2201      	movs	r2, #1
 8008964:	e000      	b.n	8008968 <prvGetNextExpireTime+0x18>
 8008966:	2200      	movs	r2, #0
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d105      	bne.n	8008980 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008974:	4b07      	ldr	r3, [pc, #28]	; (8008994 <prvGetNextExpireTime+0x44>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	60fb      	str	r3, [r7, #12]
 800897e:	e001      	b.n	8008984 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008984:	68fb      	ldr	r3, [r7, #12]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	20000f74 	.word	0x20000f74

08008998 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80089a0:	f7ff f8c0 	bl	8007b24 <xTaskGetTickCount>
 80089a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80089a6:	4b0b      	ldr	r3, [pc, #44]	; (80089d4 <prvSampleTimeNow+0x3c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d205      	bcs.n	80089bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089b0:	f000 f936 	bl	8008c20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	e002      	b.n	80089c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80089c2:	4a04      	ldr	r2, [pc, #16]	; (80089d4 <prvSampleTimeNow+0x3c>)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80089c8:	68fb      	ldr	r3, [r7, #12]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20000f84 	.word	0x20000f84

080089d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
 80089e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80089e6:	2300      	movs	r3, #0
 80089e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d812      	bhi.n	8008a24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	1ad2      	subs	r2, r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d302      	bcc.n	8008a12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	617b      	str	r3, [r7, #20]
 8008a10:	e01b      	b.n	8008a4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a12:	4b10      	ldr	r3, [pc, #64]	; (8008a54 <prvInsertTimerInActiveList+0x7c>)
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3304      	adds	r3, #4
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	f7fd fccc 	bl	80063ba <vListInsert>
 8008a22:	e012      	b.n	8008a4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d206      	bcs.n	8008a3a <prvInsertTimerInActiveList+0x62>
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d302      	bcc.n	8008a3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a34:	2301      	movs	r3, #1
 8008a36:	617b      	str	r3, [r7, #20]
 8008a38:	e007      	b.n	8008a4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a3a:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <prvInsertTimerInActiveList+0x80>)
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3304      	adds	r3, #4
 8008a42:	4619      	mov	r1, r3
 8008a44:	4610      	mov	r0, r2
 8008a46:	f7fd fcb8 	bl	80063ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a4a:	697b      	ldr	r3, [r7, #20]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	20000f78 	.word	0x20000f78
 8008a58:	20000f74 	.word	0x20000f74

08008a5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08e      	sub	sp, #56	; 0x38
 8008a60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a62:	e0ca      	b.n	8008bfa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	da18      	bge.n	8008a9c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a6a:	1d3b      	adds	r3, r7, #4
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10a      	bne.n	8008a8c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	61fb      	str	r3, [r7, #28]
}
 8008a88:	bf00      	nop
 8008a8a:	e7fe      	b.n	8008a8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a92:	6850      	ldr	r0, [r2, #4]
 8008a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a96:	6892      	ldr	r2, [r2, #8]
 8008a98:	4611      	mov	r1, r2
 8008a9a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f2c0 80ab 	blt.w	8008bfa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d004      	beq.n	8008aba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fd fcb9 	bl	800642c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008aba:	463b      	mov	r3, r7
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7ff ff6b 	bl	8008998 <prvSampleTimeNow>
 8008ac2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b09      	cmp	r3, #9
 8008ac8:	f200 8096 	bhi.w	8008bf8 <prvProcessReceivedCommands+0x19c>
 8008acc:	a201      	add	r2, pc, #4	; (adr r2, 8008ad4 <prvProcessReceivedCommands+0x78>)
 8008ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad2:	bf00      	nop
 8008ad4:	08008afd 	.word	0x08008afd
 8008ad8:	08008afd 	.word	0x08008afd
 8008adc:	08008afd 	.word	0x08008afd
 8008ae0:	08008b71 	.word	0x08008b71
 8008ae4:	08008b85 	.word	0x08008b85
 8008ae8:	08008bcf 	.word	0x08008bcf
 8008aec:	08008afd 	.word	0x08008afd
 8008af0:	08008afd 	.word	0x08008afd
 8008af4:	08008b71 	.word	0x08008b71
 8008af8:	08008b85 	.word	0x08008b85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b02:	f043 0301 	orr.w	r3, r3, #1
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	18d1      	adds	r1, r2, r3
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b1c:	f7ff ff5c 	bl	80089d8 <prvInsertTimerInActiveList>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d069      	beq.n	8008bfa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b34:	f003 0304 	and.w	r3, r3, #4
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d05e      	beq.n	8008bfa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	441a      	add	r2, r3
 8008b44:	2300      	movs	r3, #0
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	2300      	movs	r3, #0
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b4e:	f7ff fe05 	bl	800875c <xTimerGenericCommand>
 8008b52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d14f      	bne.n	8008bfa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	61bb      	str	r3, [r7, #24]
}
 8008b6c:	bf00      	nop
 8008b6e:	e7fe      	b.n	8008b6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b76:	f023 0301 	bic.w	r3, r3, #1
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008b82:	e03a      	b.n	8008bfa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b8a:	f043 0301 	orr.w	r3, r3, #1
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b96:	68ba      	ldr	r2, [r7, #8]
 8008b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10a      	bne.n	8008bba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	617b      	str	r3, [r7, #20]
}
 8008bb6:	bf00      	nop
 8008bb8:	e7fe      	b.n	8008bb8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbc:	699a      	ldr	r2, [r3, #24]
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	18d1      	adds	r1, r2, r3
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bc8:	f7ff ff06 	bl	80089d8 <prvInsertTimerInActiveList>
					break;
 8008bcc:	e015      	b.n	8008bfa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d103      	bne.n	8008be4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bde:	f000 fbff 	bl	80093e0 <vPortFree>
 8008be2:	e00a      	b.n	8008bfa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bea:	f023 0301 	bic.w	r3, r3, #1
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008bf6:	e000      	b.n	8008bfa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008bf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008bfa:	4b08      	ldr	r3, [pc, #32]	; (8008c1c <prvProcessReceivedCommands+0x1c0>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	1d39      	adds	r1, r7, #4
 8008c00:	2200      	movs	r2, #0
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fe f80a 	bl	8006c1c <xQueueReceive>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f47f af2a 	bne.w	8008a64 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008c10:	bf00      	nop
 8008c12:	bf00      	nop
 8008c14:	3730      	adds	r7, #48	; 0x30
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	20000f7c 	.word	0x20000f7c

08008c20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b088      	sub	sp, #32
 8008c24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c26:	e048      	b.n	8008cba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c28:	4b2d      	ldr	r3, [pc, #180]	; (8008ce0 <prvSwitchTimerLists+0xc0>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c32:	4b2b      	ldr	r3, [pc, #172]	; (8008ce0 <prvSwitchTimerLists+0xc0>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	3304      	adds	r3, #4
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7fd fbf3 	bl	800642c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d02e      	beq.n	8008cba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	4413      	add	r3, r2
 8008c64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d90e      	bls.n	8008c8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c7a:	4b19      	ldr	r3, [pc, #100]	; (8008ce0 <prvSwitchTimerLists+0xc0>)
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	3304      	adds	r3, #4
 8008c82:	4619      	mov	r1, r3
 8008c84:	4610      	mov	r0, r2
 8008c86:	f7fd fb98 	bl	80063ba <vListInsert>
 8008c8a:	e016      	b.n	8008cba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	2300      	movs	r3, #0
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	2100      	movs	r1, #0
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f7ff fd60 	bl	800875c <xTimerGenericCommand>
 8008c9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10a      	bne.n	8008cba <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	603b      	str	r3, [r7, #0]
}
 8008cb6:	bf00      	nop
 8008cb8:	e7fe      	b.n	8008cb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cba:	4b09      	ldr	r3, [pc, #36]	; (8008ce0 <prvSwitchTimerLists+0xc0>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1b1      	bne.n	8008c28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008cc4:	4b06      	ldr	r3, [pc, #24]	; (8008ce0 <prvSwitchTimerLists+0xc0>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008cca:	4b06      	ldr	r3, [pc, #24]	; (8008ce4 <prvSwitchTimerLists+0xc4>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a04      	ldr	r2, [pc, #16]	; (8008ce0 <prvSwitchTimerLists+0xc0>)
 8008cd0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008cd2:	4a04      	ldr	r2, [pc, #16]	; (8008ce4 <prvSwitchTimerLists+0xc4>)
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	6013      	str	r3, [r2, #0]
}
 8008cd8:	bf00      	nop
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	20000f74 	.word	0x20000f74
 8008ce4:	20000f78 	.word	0x20000f78

08008ce8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008cee:	f000 f989 	bl	8009004 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008cf2:	4b15      	ldr	r3, [pc, #84]	; (8008d48 <prvCheckForValidListAndQueue+0x60>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d120      	bne.n	8008d3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008cfa:	4814      	ldr	r0, [pc, #80]	; (8008d4c <prvCheckForValidListAndQueue+0x64>)
 8008cfc:	f7fd fb0c 	bl	8006318 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d00:	4813      	ldr	r0, [pc, #76]	; (8008d50 <prvCheckForValidListAndQueue+0x68>)
 8008d02:	f7fd fb09 	bl	8006318 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d06:	4b13      	ldr	r3, [pc, #76]	; (8008d54 <prvCheckForValidListAndQueue+0x6c>)
 8008d08:	4a10      	ldr	r2, [pc, #64]	; (8008d4c <prvCheckForValidListAndQueue+0x64>)
 8008d0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d0c:	4b12      	ldr	r3, [pc, #72]	; (8008d58 <prvCheckForValidListAndQueue+0x70>)
 8008d0e:	4a10      	ldr	r2, [pc, #64]	; (8008d50 <prvCheckForValidListAndQueue+0x68>)
 8008d10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d12:	2300      	movs	r3, #0
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	4b11      	ldr	r3, [pc, #68]	; (8008d5c <prvCheckForValidListAndQueue+0x74>)
 8008d18:	4a11      	ldr	r2, [pc, #68]	; (8008d60 <prvCheckForValidListAndQueue+0x78>)
 8008d1a:	2110      	movs	r1, #16
 8008d1c:	200a      	movs	r0, #10
 8008d1e:	f7fd fc17 	bl	8006550 <xQueueGenericCreateStatic>
 8008d22:	4603      	mov	r3, r0
 8008d24:	4a08      	ldr	r2, [pc, #32]	; (8008d48 <prvCheckForValidListAndQueue+0x60>)
 8008d26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d28:	4b07      	ldr	r3, [pc, #28]	; (8008d48 <prvCheckForValidListAndQueue+0x60>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d005      	beq.n	8008d3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d30:	4b05      	ldr	r3, [pc, #20]	; (8008d48 <prvCheckForValidListAndQueue+0x60>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	490b      	ldr	r1, [pc, #44]	; (8008d64 <prvCheckForValidListAndQueue+0x7c>)
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fe fb64 	bl	8007404 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d3c:	f000 f992 	bl	8009064 <vPortExitCritical>
}
 8008d40:	bf00      	nop
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20000f7c 	.word	0x20000f7c
 8008d4c:	20000f4c 	.word	0x20000f4c
 8008d50:	20000f60 	.word	0x20000f60
 8008d54:	20000f74 	.word	0x20000f74
 8008d58:	20000f78 	.word	0x20000f78
 8008d5c:	20001028 	.word	0x20001028
 8008d60:	20000f88 	.word	0x20000f88
 8008d64:	0800a708 	.word	0x0800a708

08008d68 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08a      	sub	sp, #40	; 0x28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
 8008d74:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008d76:	f06f 0301 	mvn.w	r3, #1
 8008d7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d88:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <xTimerPendFunctionCallFromISR+0x3c>)
 8008d8a:	6818      	ldr	r0, [r3, #0]
 8008d8c:	f107 0114 	add.w	r1, r7, #20
 8008d90:	2300      	movs	r3, #0
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	f7fd fe1a 	bl	80069cc <xQueueGenericSendFromISR>
 8008d98:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3728      	adds	r7, #40	; 0x28
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	20000f7c 	.word	0x20000f7c

08008da8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3b04      	subs	r3, #4
 8008db8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008dc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	3b04      	subs	r3, #4
 8008dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	f023 0201 	bic.w	r2, r3, #1
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	3b04      	subs	r3, #4
 8008dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008dd8:	4a0c      	ldr	r2, [pc, #48]	; (8008e0c <pxPortInitialiseStack+0x64>)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	3b14      	subs	r3, #20
 8008de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3b04      	subs	r3, #4
 8008dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f06f 0202 	mvn.w	r2, #2
 8008df6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	3b20      	subs	r3, #32
 8008dfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	08008e11 	.word	0x08008e11

08008e10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e1a:	4b12      	ldr	r3, [pc, #72]	; (8008e64 <prvTaskExitError+0x54>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e22:	d00a      	beq.n	8008e3a <prvTaskExitError+0x2a>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	60fb      	str	r3, [r7, #12]
}
 8008e36:	bf00      	nop
 8008e38:	e7fe      	b.n	8008e38 <prvTaskExitError+0x28>
	__asm volatile
 8008e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3e:	f383 8811 	msr	BASEPRI, r3
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	60bb      	str	r3, [r7, #8]
}
 8008e4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e4e:	bf00      	nop
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d0fc      	beq.n	8008e50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e56:	bf00      	nop
 8008e58:	bf00      	nop
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	20000040 	.word	0x20000040
	...

08008e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e70:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <pxCurrentTCBConst2>)
 8008e72:	6819      	ldr	r1, [r3, #0]
 8008e74:	6808      	ldr	r0, [r1, #0]
 8008e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7a:	f380 8809 	msr	PSP, r0
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f04f 0000 	mov.w	r0, #0
 8008e86:	f380 8811 	msr	BASEPRI, r0
 8008e8a:	4770      	bx	lr
 8008e8c:	f3af 8000 	nop.w

08008e90 <pxCurrentTCBConst2>:
 8008e90:	20000a4c 	.word	0x20000a4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e94:	bf00      	nop
 8008e96:	bf00      	nop

08008e98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e98:	4808      	ldr	r0, [pc, #32]	; (8008ebc <prvPortStartFirstTask+0x24>)
 8008e9a:	6800      	ldr	r0, [r0, #0]
 8008e9c:	6800      	ldr	r0, [r0, #0]
 8008e9e:	f380 8808 	msr	MSP, r0
 8008ea2:	f04f 0000 	mov.w	r0, #0
 8008ea6:	f380 8814 	msr	CONTROL, r0
 8008eaa:	b662      	cpsie	i
 8008eac:	b661      	cpsie	f
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	df00      	svc	0
 8008eb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008eba:	bf00      	nop
 8008ebc:	e000ed08 	.word	0xe000ed08

08008ec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b086      	sub	sp, #24
 8008ec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ec6:	4b46      	ldr	r3, [pc, #280]	; (8008fe0 <xPortStartScheduler+0x120>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a46      	ldr	r2, [pc, #280]	; (8008fe4 <xPortStartScheduler+0x124>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d10a      	bne.n	8008ee6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	613b      	str	r3, [r7, #16]
}
 8008ee2:	bf00      	nop
 8008ee4:	e7fe      	b.n	8008ee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ee6:	4b3e      	ldr	r3, [pc, #248]	; (8008fe0 <xPortStartScheduler+0x120>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a3f      	ldr	r2, [pc, #252]	; (8008fe8 <xPortStartScheduler+0x128>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d10a      	bne.n	8008f06 <xPortStartScheduler+0x46>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	60fb      	str	r3, [r7, #12]
}
 8008f02:	bf00      	nop
 8008f04:	e7fe      	b.n	8008f04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f06:	4b39      	ldr	r3, [pc, #228]	; (8008fec <xPortStartScheduler+0x12c>)
 8008f08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	22ff      	movs	r2, #255	; 0xff
 8008f16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f20:	78fb      	ldrb	r3, [r7, #3]
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	4b31      	ldr	r3, [pc, #196]	; (8008ff0 <xPortStartScheduler+0x130>)
 8008f2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f2e:	4b31      	ldr	r3, [pc, #196]	; (8008ff4 <xPortStartScheduler+0x134>)
 8008f30:	2207      	movs	r2, #7
 8008f32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f34:	e009      	b.n	8008f4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f36:	4b2f      	ldr	r3, [pc, #188]	; (8008ff4 <xPortStartScheduler+0x134>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	4a2d      	ldr	r2, [pc, #180]	; (8008ff4 <xPortStartScheduler+0x134>)
 8008f3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f40:	78fb      	ldrb	r3, [r7, #3]
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	005b      	lsls	r3, r3, #1
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f4a:	78fb      	ldrb	r3, [r7, #3]
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f52:	2b80      	cmp	r3, #128	; 0x80
 8008f54:	d0ef      	beq.n	8008f36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f56:	4b27      	ldr	r3, [pc, #156]	; (8008ff4 <xPortStartScheduler+0x134>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f1c3 0307 	rsb	r3, r3, #7
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	d00a      	beq.n	8008f78 <xPortStartScheduler+0xb8>
	__asm volatile
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	60bb      	str	r3, [r7, #8]
}
 8008f74:	bf00      	nop
 8008f76:	e7fe      	b.n	8008f76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f78:	4b1e      	ldr	r3, [pc, #120]	; (8008ff4 <xPortStartScheduler+0x134>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	021b      	lsls	r3, r3, #8
 8008f7e:	4a1d      	ldr	r2, [pc, #116]	; (8008ff4 <xPortStartScheduler+0x134>)
 8008f80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f82:	4b1c      	ldr	r3, [pc, #112]	; (8008ff4 <xPortStartScheduler+0x134>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f8a:	4a1a      	ldr	r2, [pc, #104]	; (8008ff4 <xPortStartScheduler+0x134>)
 8008f8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f96:	4b18      	ldr	r3, [pc, #96]	; (8008ff8 <xPortStartScheduler+0x138>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a17      	ldr	r2, [pc, #92]	; (8008ff8 <xPortStartScheduler+0x138>)
 8008f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fa2:	4b15      	ldr	r3, [pc, #84]	; (8008ff8 <xPortStartScheduler+0x138>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a14      	ldr	r2, [pc, #80]	; (8008ff8 <xPortStartScheduler+0x138>)
 8008fa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fae:	f000 f8dd 	bl	800916c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fb2:	4b12      	ldr	r3, [pc, #72]	; (8008ffc <xPortStartScheduler+0x13c>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008fb8:	f000 f8fc 	bl	80091b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008fbc:	4b10      	ldr	r3, [pc, #64]	; (8009000 <xPortStartScheduler+0x140>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a0f      	ldr	r2, [pc, #60]	; (8009000 <xPortStartScheduler+0x140>)
 8008fc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008fc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fc8:	f7ff ff66 	bl	8008e98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fcc:	f7fe fe74 	bl	8007cb8 <vTaskSwitchContext>
	prvTaskExitError();
 8008fd0:	f7ff ff1e 	bl	8008e10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	e000ed00 	.word	0xe000ed00
 8008fe4:	410fc271 	.word	0x410fc271
 8008fe8:	410fc270 	.word	0x410fc270
 8008fec:	e000e400 	.word	0xe000e400
 8008ff0:	20001078 	.word	0x20001078
 8008ff4:	2000107c 	.word	0x2000107c
 8008ff8:	e000ed20 	.word	0xe000ed20
 8008ffc:	20000040 	.word	0x20000040
 8009000:	e000ef34 	.word	0xe000ef34

08009004 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	607b      	str	r3, [r7, #4]
}
 800901c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800901e:	4b0f      	ldr	r3, [pc, #60]	; (800905c <vPortEnterCritical+0x58>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3301      	adds	r3, #1
 8009024:	4a0d      	ldr	r2, [pc, #52]	; (800905c <vPortEnterCritical+0x58>)
 8009026:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009028:	4b0c      	ldr	r3, [pc, #48]	; (800905c <vPortEnterCritical+0x58>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d10f      	bne.n	8009050 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009030:	4b0b      	ldr	r3, [pc, #44]	; (8009060 <vPortEnterCritical+0x5c>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00a      	beq.n	8009050 <vPortEnterCritical+0x4c>
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	603b      	str	r3, [r7, #0]
}
 800904c:	bf00      	nop
 800904e:	e7fe      	b.n	800904e <vPortEnterCritical+0x4a>
	}
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr
 800905c:	20000040 	.word	0x20000040
 8009060:	e000ed04 	.word	0xe000ed04

08009064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800906a:	4b12      	ldr	r3, [pc, #72]	; (80090b4 <vPortExitCritical+0x50>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10a      	bne.n	8009088 <vPortExitCritical+0x24>
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	607b      	str	r3, [r7, #4]
}
 8009084:	bf00      	nop
 8009086:	e7fe      	b.n	8009086 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009088:	4b0a      	ldr	r3, [pc, #40]	; (80090b4 <vPortExitCritical+0x50>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3b01      	subs	r3, #1
 800908e:	4a09      	ldr	r2, [pc, #36]	; (80090b4 <vPortExitCritical+0x50>)
 8009090:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009092:	4b08      	ldr	r3, [pc, #32]	; (80090b4 <vPortExitCritical+0x50>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d105      	bne.n	80090a6 <vPortExitCritical+0x42>
 800909a:	2300      	movs	r3, #0
 800909c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	f383 8811 	msr	BASEPRI, r3
}
 80090a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090a6:	bf00      	nop
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	20000040 	.word	0x20000040
	...

080090c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090c0:	f3ef 8009 	mrs	r0, PSP
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	4b15      	ldr	r3, [pc, #84]	; (8009120 <pxCurrentTCBConst>)
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	f01e 0f10 	tst.w	lr, #16
 80090d0:	bf08      	it	eq
 80090d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090da:	6010      	str	r0, [r2, #0]
 80090dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090e4:	f380 8811 	msr	BASEPRI, r0
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f7fe fde2 	bl	8007cb8 <vTaskSwitchContext>
 80090f4:	f04f 0000 	mov.w	r0, #0
 80090f8:	f380 8811 	msr	BASEPRI, r0
 80090fc:	bc09      	pop	{r0, r3}
 80090fe:	6819      	ldr	r1, [r3, #0]
 8009100:	6808      	ldr	r0, [r1, #0]
 8009102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009106:	f01e 0f10 	tst.w	lr, #16
 800910a:	bf08      	it	eq
 800910c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009110:	f380 8809 	msr	PSP, r0
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	f3af 8000 	nop.w

08009120 <pxCurrentTCBConst>:
 8009120:	20000a4c 	.word	0x20000a4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009124:	bf00      	nop
 8009126:	bf00      	nop

08009128 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
	__asm volatile
 800912e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009132:	f383 8811 	msr	BASEPRI, r3
 8009136:	f3bf 8f6f 	isb	sy
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	607b      	str	r3, [r7, #4]
}
 8009140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009142:	f7fe fcff 	bl	8007b44 <xTaskIncrementTick>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d003      	beq.n	8009154 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800914c:	4b06      	ldr	r3, [pc, #24]	; (8009168 <xPortSysTickHandler+0x40>)
 800914e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	2300      	movs	r3, #0
 8009156:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	f383 8811 	msr	BASEPRI, r3
}
 800915e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009160:	bf00      	nop
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	e000ed04 	.word	0xe000ed04

0800916c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800916c:	b480      	push	{r7}
 800916e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009170:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <vPortSetupTimerInterrupt+0x34>)
 8009172:	2200      	movs	r2, #0
 8009174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009176:	4b0b      	ldr	r3, [pc, #44]	; (80091a4 <vPortSetupTimerInterrupt+0x38>)
 8009178:	2200      	movs	r2, #0
 800917a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800917c:	4b0a      	ldr	r3, [pc, #40]	; (80091a8 <vPortSetupTimerInterrupt+0x3c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a0a      	ldr	r2, [pc, #40]	; (80091ac <vPortSetupTimerInterrupt+0x40>)
 8009182:	fba2 2303 	umull	r2, r3, r2, r3
 8009186:	099b      	lsrs	r3, r3, #6
 8009188:	4a09      	ldr	r2, [pc, #36]	; (80091b0 <vPortSetupTimerInterrupt+0x44>)
 800918a:	3b01      	subs	r3, #1
 800918c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800918e:	4b04      	ldr	r3, [pc, #16]	; (80091a0 <vPortSetupTimerInterrupt+0x34>)
 8009190:	2207      	movs	r2, #7
 8009192:	601a      	str	r2, [r3, #0]
}
 8009194:	bf00      	nop
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	e000e010 	.word	0xe000e010
 80091a4:	e000e018 	.word	0xe000e018
 80091a8:	20000034 	.word	0x20000034
 80091ac:	10624dd3 	.word	0x10624dd3
 80091b0:	e000e014 	.word	0xe000e014

080091b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80091c4 <vPortEnableVFP+0x10>
 80091b8:	6801      	ldr	r1, [r0, #0]
 80091ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091be:	6001      	str	r1, [r0, #0]
 80091c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091c2:	bf00      	nop
 80091c4:	e000ed88 	.word	0xe000ed88

080091c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091ce:	f3ef 8305 	mrs	r3, IPSR
 80091d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2b0f      	cmp	r3, #15
 80091d8:	d914      	bls.n	8009204 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091da:	4a17      	ldr	r2, [pc, #92]	; (8009238 <vPortValidateInterruptPriority+0x70>)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4413      	add	r3, r2
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091e4:	4b15      	ldr	r3, [pc, #84]	; (800923c <vPortValidateInterruptPriority+0x74>)
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	7afa      	ldrb	r2, [r7, #11]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d20a      	bcs.n	8009204 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80091ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	607b      	str	r3, [r7, #4]
}
 8009200:	bf00      	nop
 8009202:	e7fe      	b.n	8009202 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009204:	4b0e      	ldr	r3, [pc, #56]	; (8009240 <vPortValidateInterruptPriority+0x78>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800920c:	4b0d      	ldr	r3, [pc, #52]	; (8009244 <vPortValidateInterruptPriority+0x7c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	429a      	cmp	r2, r3
 8009212:	d90a      	bls.n	800922a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	603b      	str	r3, [r7, #0]
}
 8009226:	bf00      	nop
 8009228:	e7fe      	b.n	8009228 <vPortValidateInterruptPriority+0x60>
	}
 800922a:	bf00      	nop
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	e000e3f0 	.word	0xe000e3f0
 800923c:	20001078 	.word	0x20001078
 8009240:	e000ed0c 	.word	0xe000ed0c
 8009244:	2000107c 	.word	0x2000107c

08009248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08a      	sub	sp, #40	; 0x28
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009250:	2300      	movs	r3, #0
 8009252:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009254:	f7fe fbba 	bl	80079cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009258:	4b5b      	ldr	r3, [pc, #364]	; (80093c8 <pvPortMalloc+0x180>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009260:	f000 f920 	bl	80094a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009264:	4b59      	ldr	r3, [pc, #356]	; (80093cc <pvPortMalloc+0x184>)
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4013      	ands	r3, r2
 800926c:	2b00      	cmp	r3, #0
 800926e:	f040 8093 	bne.w	8009398 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d01d      	beq.n	80092b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009278:	2208      	movs	r2, #8
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4413      	add	r3, r2
 800927e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f003 0307 	and.w	r3, r3, #7
 8009286:	2b00      	cmp	r3, #0
 8009288:	d014      	beq.n	80092b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f023 0307 	bic.w	r3, r3, #7
 8009290:	3308      	adds	r3, #8
 8009292:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f003 0307 	and.w	r3, r3, #7
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00a      	beq.n	80092b4 <pvPortMalloc+0x6c>
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	617b      	str	r3, [r7, #20]
}
 80092b0:	bf00      	nop
 80092b2:	e7fe      	b.n	80092b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d06e      	beq.n	8009398 <pvPortMalloc+0x150>
 80092ba:	4b45      	ldr	r3, [pc, #276]	; (80093d0 <pvPortMalloc+0x188>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d869      	bhi.n	8009398 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092c4:	4b43      	ldr	r3, [pc, #268]	; (80093d4 <pvPortMalloc+0x18c>)
 80092c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092c8:	4b42      	ldr	r3, [pc, #264]	; (80093d4 <pvPortMalloc+0x18c>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092ce:	e004      	b.n	80092da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d903      	bls.n	80092ec <pvPortMalloc+0xa4>
 80092e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1f1      	bne.n	80092d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092ec:	4b36      	ldr	r3, [pc, #216]	; (80093c8 <pvPortMalloc+0x180>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d050      	beq.n	8009398 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2208      	movs	r2, #8
 80092fc:	4413      	add	r3, r2
 80092fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	1ad2      	subs	r2, r2, r3
 8009310:	2308      	movs	r3, #8
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	429a      	cmp	r2, r3
 8009316:	d91f      	bls.n	8009358 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4413      	add	r3, r2
 800931e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	f003 0307 	and.w	r3, r3, #7
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <pvPortMalloc+0xf8>
	__asm volatile
 800932a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	613b      	str	r3, [r7, #16]
}
 800933c:	bf00      	nop
 800933e:	e7fe      	b.n	800933e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	1ad2      	subs	r2, r2, r3
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009352:	69b8      	ldr	r0, [r7, #24]
 8009354:	f000 f908 	bl	8009568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009358:	4b1d      	ldr	r3, [pc, #116]	; (80093d0 <pvPortMalloc+0x188>)
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	4a1b      	ldr	r2, [pc, #108]	; (80093d0 <pvPortMalloc+0x188>)
 8009364:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009366:	4b1a      	ldr	r3, [pc, #104]	; (80093d0 <pvPortMalloc+0x188>)
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	4b1b      	ldr	r3, [pc, #108]	; (80093d8 <pvPortMalloc+0x190>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	429a      	cmp	r2, r3
 8009370:	d203      	bcs.n	800937a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009372:	4b17      	ldr	r3, [pc, #92]	; (80093d0 <pvPortMalloc+0x188>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a18      	ldr	r2, [pc, #96]	; (80093d8 <pvPortMalloc+0x190>)
 8009378:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800937a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	4b13      	ldr	r3, [pc, #76]	; (80093cc <pvPortMalloc+0x184>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	431a      	orrs	r2, r3
 8009384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009386:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	2200      	movs	r2, #0
 800938c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800938e:	4b13      	ldr	r3, [pc, #76]	; (80093dc <pvPortMalloc+0x194>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	3301      	adds	r3, #1
 8009394:	4a11      	ldr	r2, [pc, #68]	; (80093dc <pvPortMalloc+0x194>)
 8009396:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009398:	f7fe fb26 	bl	80079e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	f003 0307 	and.w	r3, r3, #7
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00a      	beq.n	80093bc <pvPortMalloc+0x174>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	60fb      	str	r3, [r7, #12]
}
 80093b8:	bf00      	nop
 80093ba:	e7fe      	b.n	80093ba <pvPortMalloc+0x172>
	return pvReturn;
 80093bc:	69fb      	ldr	r3, [r7, #28]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3728      	adds	r7, #40	; 0x28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	20004c88 	.word	0x20004c88
 80093cc:	20004c9c 	.word	0x20004c9c
 80093d0:	20004c8c 	.word	0x20004c8c
 80093d4:	20004c80 	.word	0x20004c80
 80093d8:	20004c90 	.word	0x20004c90
 80093dc:	20004c94 	.word	0x20004c94

080093e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d04d      	beq.n	800948e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093f2:	2308      	movs	r3, #8
 80093f4:	425b      	negs	r3, r3
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	4413      	add	r3, r2
 80093fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	4b24      	ldr	r3, [pc, #144]	; (8009498 <vPortFree+0xb8>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4013      	ands	r3, r2
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10a      	bne.n	8009424 <vPortFree+0x44>
	__asm volatile
 800940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	60fb      	str	r3, [r7, #12]
}
 8009420:	bf00      	nop
 8009422:	e7fe      	b.n	8009422 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00a      	beq.n	8009442 <vPortFree+0x62>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	60bb      	str	r3, [r7, #8]
}
 800943e:	bf00      	nop
 8009440:	e7fe      	b.n	8009440 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	685a      	ldr	r2, [r3, #4]
 8009446:	4b14      	ldr	r3, [pc, #80]	; (8009498 <vPortFree+0xb8>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4013      	ands	r3, r2
 800944c:	2b00      	cmp	r3, #0
 800944e:	d01e      	beq.n	800948e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d11a      	bne.n	800948e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	4b0e      	ldr	r3, [pc, #56]	; (8009498 <vPortFree+0xb8>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	43db      	mvns	r3, r3
 8009462:	401a      	ands	r2, r3
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009468:	f7fe fab0 	bl	80079cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	4b0a      	ldr	r3, [pc, #40]	; (800949c <vPortFree+0xbc>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4413      	add	r3, r2
 8009476:	4a09      	ldr	r2, [pc, #36]	; (800949c <vPortFree+0xbc>)
 8009478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800947a:	6938      	ldr	r0, [r7, #16]
 800947c:	f000 f874 	bl	8009568 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009480:	4b07      	ldr	r3, [pc, #28]	; (80094a0 <vPortFree+0xc0>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3301      	adds	r3, #1
 8009486:	4a06      	ldr	r2, [pc, #24]	; (80094a0 <vPortFree+0xc0>)
 8009488:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800948a:	f7fe faad 	bl	80079e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800948e:	bf00      	nop
 8009490:	3718      	adds	r7, #24
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20004c9c 	.word	0x20004c9c
 800949c:	20004c8c 	.word	0x20004c8c
 80094a0:	20004c98 	.word	0x20004c98

080094a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80094ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094b0:	4b27      	ldr	r3, [pc, #156]	; (8009550 <prvHeapInit+0xac>)
 80094b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f003 0307 	and.w	r3, r3, #7
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00c      	beq.n	80094d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3307      	adds	r3, #7
 80094c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f023 0307 	bic.w	r3, r3, #7
 80094ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	4a1f      	ldr	r2, [pc, #124]	; (8009550 <prvHeapInit+0xac>)
 80094d4:	4413      	add	r3, r2
 80094d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094dc:	4a1d      	ldr	r2, [pc, #116]	; (8009554 <prvHeapInit+0xb0>)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094e2:	4b1c      	ldr	r3, [pc, #112]	; (8009554 <prvHeapInit+0xb0>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	4413      	add	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094f0:	2208      	movs	r2, #8
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	1a9b      	subs	r3, r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f023 0307 	bic.w	r3, r3, #7
 80094fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	4a15      	ldr	r2, [pc, #84]	; (8009558 <prvHeapInit+0xb4>)
 8009504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009506:	4b14      	ldr	r3, [pc, #80]	; (8009558 <prvHeapInit+0xb4>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2200      	movs	r2, #0
 800950c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800950e:	4b12      	ldr	r3, [pc, #72]	; (8009558 <prvHeapInit+0xb4>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2200      	movs	r2, #0
 8009514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	1ad2      	subs	r2, r2, r3
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009524:	4b0c      	ldr	r3, [pc, #48]	; (8009558 <prvHeapInit+0xb4>)
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	4a0a      	ldr	r2, [pc, #40]	; (800955c <prvHeapInit+0xb8>)
 8009532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	4a09      	ldr	r2, [pc, #36]	; (8009560 <prvHeapInit+0xbc>)
 800953a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800953c:	4b09      	ldr	r3, [pc, #36]	; (8009564 <prvHeapInit+0xc0>)
 800953e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009542:	601a      	str	r2, [r3, #0]
}
 8009544:	bf00      	nop
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	20001080 	.word	0x20001080
 8009554:	20004c80 	.word	0x20004c80
 8009558:	20004c88 	.word	0x20004c88
 800955c:	20004c90 	.word	0x20004c90
 8009560:	20004c8c 	.word	0x20004c8c
 8009564:	20004c9c 	.word	0x20004c9c

08009568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009570:	4b28      	ldr	r3, [pc, #160]	; (8009614 <prvInsertBlockIntoFreeList+0xac>)
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	e002      	b.n	800957c <prvInsertBlockIntoFreeList+0x14>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	429a      	cmp	r2, r3
 8009584:	d8f7      	bhi.n	8009576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	4413      	add	r3, r2
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	429a      	cmp	r2, r3
 8009596:	d108      	bne.n	80095aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	685a      	ldr	r2, [r3, #4]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	441a      	add	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	441a      	add	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d118      	bne.n	80095f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	4b15      	ldr	r3, [pc, #84]	; (8009618 <prvInsertBlockIntoFreeList+0xb0>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d00d      	beq.n	80095e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	441a      	add	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	e008      	b.n	80095f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095e6:	4b0c      	ldr	r3, [pc, #48]	; (8009618 <prvInsertBlockIntoFreeList+0xb0>)
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	e003      	b.n	80095f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d002      	beq.n	8009606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009606:	bf00      	nop
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	20004c80 	.word	0x20004c80
 8009618:	20004c88 	.word	0x20004c88

0800961c <std>:
 800961c:	2300      	movs	r3, #0
 800961e:	b510      	push	{r4, lr}
 8009620:	4604      	mov	r4, r0
 8009622:	e9c0 3300 	strd	r3, r3, [r0]
 8009626:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800962a:	6083      	str	r3, [r0, #8]
 800962c:	8181      	strh	r1, [r0, #12]
 800962e:	6643      	str	r3, [r0, #100]	; 0x64
 8009630:	81c2      	strh	r2, [r0, #14]
 8009632:	6183      	str	r3, [r0, #24]
 8009634:	4619      	mov	r1, r3
 8009636:	2208      	movs	r2, #8
 8009638:	305c      	adds	r0, #92	; 0x5c
 800963a:	f000 f9f7 	bl	8009a2c <memset>
 800963e:	4b0d      	ldr	r3, [pc, #52]	; (8009674 <std+0x58>)
 8009640:	6263      	str	r3, [r4, #36]	; 0x24
 8009642:	4b0d      	ldr	r3, [pc, #52]	; (8009678 <std+0x5c>)
 8009644:	62a3      	str	r3, [r4, #40]	; 0x28
 8009646:	4b0d      	ldr	r3, [pc, #52]	; (800967c <std+0x60>)
 8009648:	62e3      	str	r3, [r4, #44]	; 0x2c
 800964a:	4b0d      	ldr	r3, [pc, #52]	; (8009680 <std+0x64>)
 800964c:	6323      	str	r3, [r4, #48]	; 0x30
 800964e:	4b0d      	ldr	r3, [pc, #52]	; (8009684 <std+0x68>)
 8009650:	6224      	str	r4, [r4, #32]
 8009652:	429c      	cmp	r4, r3
 8009654:	d006      	beq.n	8009664 <std+0x48>
 8009656:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800965a:	4294      	cmp	r4, r2
 800965c:	d002      	beq.n	8009664 <std+0x48>
 800965e:	33d0      	adds	r3, #208	; 0xd0
 8009660:	429c      	cmp	r4, r3
 8009662:	d105      	bne.n	8009670 <std+0x54>
 8009664:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800966c:	f000 baac 	b.w	8009bc8 <__retarget_lock_init_recursive>
 8009670:	bd10      	pop	{r4, pc}
 8009672:	bf00      	nop
 8009674:	0800987d 	.word	0x0800987d
 8009678:	0800989f 	.word	0x0800989f
 800967c:	080098d7 	.word	0x080098d7
 8009680:	080098fb 	.word	0x080098fb
 8009684:	20004ca0 	.word	0x20004ca0

08009688 <stdio_exit_handler>:
 8009688:	4a02      	ldr	r2, [pc, #8]	; (8009694 <stdio_exit_handler+0xc>)
 800968a:	4903      	ldr	r1, [pc, #12]	; (8009698 <stdio_exit_handler+0x10>)
 800968c:	4803      	ldr	r0, [pc, #12]	; (800969c <stdio_exit_handler+0x14>)
 800968e:	f000 b869 	b.w	8009764 <_fwalk_sglue>
 8009692:	bf00      	nop
 8009694:	20000044 	.word	0x20000044
 8009698:	0800a491 	.word	0x0800a491
 800969c:	20000050 	.word	0x20000050

080096a0 <cleanup_stdio>:
 80096a0:	6841      	ldr	r1, [r0, #4]
 80096a2:	4b0c      	ldr	r3, [pc, #48]	; (80096d4 <cleanup_stdio+0x34>)
 80096a4:	4299      	cmp	r1, r3
 80096a6:	b510      	push	{r4, lr}
 80096a8:	4604      	mov	r4, r0
 80096aa:	d001      	beq.n	80096b0 <cleanup_stdio+0x10>
 80096ac:	f000 fef0 	bl	800a490 <_fflush_r>
 80096b0:	68a1      	ldr	r1, [r4, #8]
 80096b2:	4b09      	ldr	r3, [pc, #36]	; (80096d8 <cleanup_stdio+0x38>)
 80096b4:	4299      	cmp	r1, r3
 80096b6:	d002      	beq.n	80096be <cleanup_stdio+0x1e>
 80096b8:	4620      	mov	r0, r4
 80096ba:	f000 fee9 	bl	800a490 <_fflush_r>
 80096be:	68e1      	ldr	r1, [r4, #12]
 80096c0:	4b06      	ldr	r3, [pc, #24]	; (80096dc <cleanup_stdio+0x3c>)
 80096c2:	4299      	cmp	r1, r3
 80096c4:	d004      	beq.n	80096d0 <cleanup_stdio+0x30>
 80096c6:	4620      	mov	r0, r4
 80096c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096cc:	f000 bee0 	b.w	800a490 <_fflush_r>
 80096d0:	bd10      	pop	{r4, pc}
 80096d2:	bf00      	nop
 80096d4:	20004ca0 	.word	0x20004ca0
 80096d8:	20004d08 	.word	0x20004d08
 80096dc:	20004d70 	.word	0x20004d70

080096e0 <global_stdio_init.part.0>:
 80096e0:	b510      	push	{r4, lr}
 80096e2:	4b0b      	ldr	r3, [pc, #44]	; (8009710 <global_stdio_init.part.0+0x30>)
 80096e4:	4c0b      	ldr	r4, [pc, #44]	; (8009714 <global_stdio_init.part.0+0x34>)
 80096e6:	4a0c      	ldr	r2, [pc, #48]	; (8009718 <global_stdio_init.part.0+0x38>)
 80096e8:	601a      	str	r2, [r3, #0]
 80096ea:	4620      	mov	r0, r4
 80096ec:	2200      	movs	r2, #0
 80096ee:	2104      	movs	r1, #4
 80096f0:	f7ff ff94 	bl	800961c <std>
 80096f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80096f8:	2201      	movs	r2, #1
 80096fa:	2109      	movs	r1, #9
 80096fc:	f7ff ff8e 	bl	800961c <std>
 8009700:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009704:	2202      	movs	r2, #2
 8009706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800970a:	2112      	movs	r1, #18
 800970c:	f7ff bf86 	b.w	800961c <std>
 8009710:	20004dd8 	.word	0x20004dd8
 8009714:	20004ca0 	.word	0x20004ca0
 8009718:	08009689 	.word	0x08009689

0800971c <__sfp_lock_acquire>:
 800971c:	4801      	ldr	r0, [pc, #4]	; (8009724 <__sfp_lock_acquire+0x8>)
 800971e:	f000 ba54 	b.w	8009bca <__retarget_lock_acquire_recursive>
 8009722:	bf00      	nop
 8009724:	20004de1 	.word	0x20004de1

08009728 <__sfp_lock_release>:
 8009728:	4801      	ldr	r0, [pc, #4]	; (8009730 <__sfp_lock_release+0x8>)
 800972a:	f000 ba4f 	b.w	8009bcc <__retarget_lock_release_recursive>
 800972e:	bf00      	nop
 8009730:	20004de1 	.word	0x20004de1

08009734 <__sinit>:
 8009734:	b510      	push	{r4, lr}
 8009736:	4604      	mov	r4, r0
 8009738:	f7ff fff0 	bl	800971c <__sfp_lock_acquire>
 800973c:	6a23      	ldr	r3, [r4, #32]
 800973e:	b11b      	cbz	r3, 8009748 <__sinit+0x14>
 8009740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009744:	f7ff bff0 	b.w	8009728 <__sfp_lock_release>
 8009748:	4b04      	ldr	r3, [pc, #16]	; (800975c <__sinit+0x28>)
 800974a:	6223      	str	r3, [r4, #32]
 800974c:	4b04      	ldr	r3, [pc, #16]	; (8009760 <__sinit+0x2c>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1f5      	bne.n	8009740 <__sinit+0xc>
 8009754:	f7ff ffc4 	bl	80096e0 <global_stdio_init.part.0>
 8009758:	e7f2      	b.n	8009740 <__sinit+0xc>
 800975a:	bf00      	nop
 800975c:	080096a1 	.word	0x080096a1
 8009760:	20004dd8 	.word	0x20004dd8

08009764 <_fwalk_sglue>:
 8009764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009768:	4607      	mov	r7, r0
 800976a:	4688      	mov	r8, r1
 800976c:	4614      	mov	r4, r2
 800976e:	2600      	movs	r6, #0
 8009770:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009774:	f1b9 0901 	subs.w	r9, r9, #1
 8009778:	d505      	bpl.n	8009786 <_fwalk_sglue+0x22>
 800977a:	6824      	ldr	r4, [r4, #0]
 800977c:	2c00      	cmp	r4, #0
 800977e:	d1f7      	bne.n	8009770 <_fwalk_sglue+0xc>
 8009780:	4630      	mov	r0, r6
 8009782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009786:	89ab      	ldrh	r3, [r5, #12]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d907      	bls.n	800979c <_fwalk_sglue+0x38>
 800978c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009790:	3301      	adds	r3, #1
 8009792:	d003      	beq.n	800979c <_fwalk_sglue+0x38>
 8009794:	4629      	mov	r1, r5
 8009796:	4638      	mov	r0, r7
 8009798:	47c0      	blx	r8
 800979a:	4306      	orrs	r6, r0
 800979c:	3568      	adds	r5, #104	; 0x68
 800979e:	e7e9      	b.n	8009774 <_fwalk_sglue+0x10>

080097a0 <iprintf>:
 80097a0:	b40f      	push	{r0, r1, r2, r3}
 80097a2:	b507      	push	{r0, r1, r2, lr}
 80097a4:	4906      	ldr	r1, [pc, #24]	; (80097c0 <iprintf+0x20>)
 80097a6:	ab04      	add	r3, sp, #16
 80097a8:	6808      	ldr	r0, [r1, #0]
 80097aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80097ae:	6881      	ldr	r1, [r0, #8]
 80097b0:	9301      	str	r3, [sp, #4]
 80097b2:	f000 fb3d 	bl	8009e30 <_vfiprintf_r>
 80097b6:	b003      	add	sp, #12
 80097b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097bc:	b004      	add	sp, #16
 80097be:	4770      	bx	lr
 80097c0:	2000009c 	.word	0x2000009c

080097c4 <_puts_r>:
 80097c4:	6a03      	ldr	r3, [r0, #32]
 80097c6:	b570      	push	{r4, r5, r6, lr}
 80097c8:	6884      	ldr	r4, [r0, #8]
 80097ca:	4605      	mov	r5, r0
 80097cc:	460e      	mov	r6, r1
 80097ce:	b90b      	cbnz	r3, 80097d4 <_puts_r+0x10>
 80097d0:	f7ff ffb0 	bl	8009734 <__sinit>
 80097d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097d6:	07db      	lsls	r3, r3, #31
 80097d8:	d405      	bmi.n	80097e6 <_puts_r+0x22>
 80097da:	89a3      	ldrh	r3, [r4, #12]
 80097dc:	0598      	lsls	r0, r3, #22
 80097de:	d402      	bmi.n	80097e6 <_puts_r+0x22>
 80097e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097e2:	f000 f9f2 	bl	8009bca <__retarget_lock_acquire_recursive>
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	0719      	lsls	r1, r3, #28
 80097ea:	d513      	bpl.n	8009814 <_puts_r+0x50>
 80097ec:	6923      	ldr	r3, [r4, #16]
 80097ee:	b18b      	cbz	r3, 8009814 <_puts_r+0x50>
 80097f0:	3e01      	subs	r6, #1
 80097f2:	68a3      	ldr	r3, [r4, #8]
 80097f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80097f8:	3b01      	subs	r3, #1
 80097fa:	60a3      	str	r3, [r4, #8]
 80097fc:	b9e9      	cbnz	r1, 800983a <_puts_r+0x76>
 80097fe:	2b00      	cmp	r3, #0
 8009800:	da2e      	bge.n	8009860 <_puts_r+0x9c>
 8009802:	4622      	mov	r2, r4
 8009804:	210a      	movs	r1, #10
 8009806:	4628      	mov	r0, r5
 8009808:	f000 f87b 	bl	8009902 <__swbuf_r>
 800980c:	3001      	adds	r0, #1
 800980e:	d007      	beq.n	8009820 <_puts_r+0x5c>
 8009810:	250a      	movs	r5, #10
 8009812:	e007      	b.n	8009824 <_puts_r+0x60>
 8009814:	4621      	mov	r1, r4
 8009816:	4628      	mov	r0, r5
 8009818:	f000 f8b0 	bl	800997c <__swsetup_r>
 800981c:	2800      	cmp	r0, #0
 800981e:	d0e7      	beq.n	80097f0 <_puts_r+0x2c>
 8009820:	f04f 35ff 	mov.w	r5, #4294967295
 8009824:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009826:	07da      	lsls	r2, r3, #31
 8009828:	d405      	bmi.n	8009836 <_puts_r+0x72>
 800982a:	89a3      	ldrh	r3, [r4, #12]
 800982c:	059b      	lsls	r3, r3, #22
 800982e:	d402      	bmi.n	8009836 <_puts_r+0x72>
 8009830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009832:	f000 f9cb 	bl	8009bcc <__retarget_lock_release_recursive>
 8009836:	4628      	mov	r0, r5
 8009838:	bd70      	pop	{r4, r5, r6, pc}
 800983a:	2b00      	cmp	r3, #0
 800983c:	da04      	bge.n	8009848 <_puts_r+0x84>
 800983e:	69a2      	ldr	r2, [r4, #24]
 8009840:	429a      	cmp	r2, r3
 8009842:	dc06      	bgt.n	8009852 <_puts_r+0x8e>
 8009844:	290a      	cmp	r1, #10
 8009846:	d004      	beq.n	8009852 <_puts_r+0x8e>
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	6022      	str	r2, [r4, #0]
 800984e:	7019      	strb	r1, [r3, #0]
 8009850:	e7cf      	b.n	80097f2 <_puts_r+0x2e>
 8009852:	4622      	mov	r2, r4
 8009854:	4628      	mov	r0, r5
 8009856:	f000 f854 	bl	8009902 <__swbuf_r>
 800985a:	3001      	adds	r0, #1
 800985c:	d1c9      	bne.n	80097f2 <_puts_r+0x2e>
 800985e:	e7df      	b.n	8009820 <_puts_r+0x5c>
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	250a      	movs	r5, #10
 8009864:	1c5a      	adds	r2, r3, #1
 8009866:	6022      	str	r2, [r4, #0]
 8009868:	701d      	strb	r5, [r3, #0]
 800986a:	e7db      	b.n	8009824 <_puts_r+0x60>

0800986c <puts>:
 800986c:	4b02      	ldr	r3, [pc, #8]	; (8009878 <puts+0xc>)
 800986e:	4601      	mov	r1, r0
 8009870:	6818      	ldr	r0, [r3, #0]
 8009872:	f7ff bfa7 	b.w	80097c4 <_puts_r>
 8009876:	bf00      	nop
 8009878:	2000009c 	.word	0x2000009c

0800987c <__sread>:
 800987c:	b510      	push	{r4, lr}
 800987e:	460c      	mov	r4, r1
 8009880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009884:	f000 f952 	bl	8009b2c <_read_r>
 8009888:	2800      	cmp	r0, #0
 800988a:	bfab      	itete	ge
 800988c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800988e:	89a3      	ldrhlt	r3, [r4, #12]
 8009890:	181b      	addge	r3, r3, r0
 8009892:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009896:	bfac      	ite	ge
 8009898:	6563      	strge	r3, [r4, #84]	; 0x54
 800989a:	81a3      	strhlt	r3, [r4, #12]
 800989c:	bd10      	pop	{r4, pc}

0800989e <__swrite>:
 800989e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a2:	461f      	mov	r7, r3
 80098a4:	898b      	ldrh	r3, [r1, #12]
 80098a6:	05db      	lsls	r3, r3, #23
 80098a8:	4605      	mov	r5, r0
 80098aa:	460c      	mov	r4, r1
 80098ac:	4616      	mov	r6, r2
 80098ae:	d505      	bpl.n	80098bc <__swrite+0x1e>
 80098b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b4:	2302      	movs	r3, #2
 80098b6:	2200      	movs	r2, #0
 80098b8:	f000 f926 	bl	8009b08 <_lseek_r>
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098c6:	81a3      	strh	r3, [r4, #12]
 80098c8:	4632      	mov	r2, r6
 80098ca:	463b      	mov	r3, r7
 80098cc:	4628      	mov	r0, r5
 80098ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098d2:	f000 b93d 	b.w	8009b50 <_write_r>

080098d6 <__sseek>:
 80098d6:	b510      	push	{r4, lr}
 80098d8:	460c      	mov	r4, r1
 80098da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098de:	f000 f913 	bl	8009b08 <_lseek_r>
 80098e2:	1c43      	adds	r3, r0, #1
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	bf15      	itete	ne
 80098e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80098ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098f2:	81a3      	strheq	r3, [r4, #12]
 80098f4:	bf18      	it	ne
 80098f6:	81a3      	strhne	r3, [r4, #12]
 80098f8:	bd10      	pop	{r4, pc}

080098fa <__sclose>:
 80098fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098fe:	f000 b89d 	b.w	8009a3c <_close_r>

08009902 <__swbuf_r>:
 8009902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009904:	460e      	mov	r6, r1
 8009906:	4614      	mov	r4, r2
 8009908:	4605      	mov	r5, r0
 800990a:	b118      	cbz	r0, 8009914 <__swbuf_r+0x12>
 800990c:	6a03      	ldr	r3, [r0, #32]
 800990e:	b90b      	cbnz	r3, 8009914 <__swbuf_r+0x12>
 8009910:	f7ff ff10 	bl	8009734 <__sinit>
 8009914:	69a3      	ldr	r3, [r4, #24]
 8009916:	60a3      	str	r3, [r4, #8]
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	071a      	lsls	r2, r3, #28
 800991c:	d525      	bpl.n	800996a <__swbuf_r+0x68>
 800991e:	6923      	ldr	r3, [r4, #16]
 8009920:	b31b      	cbz	r3, 800996a <__swbuf_r+0x68>
 8009922:	6823      	ldr	r3, [r4, #0]
 8009924:	6922      	ldr	r2, [r4, #16]
 8009926:	1a98      	subs	r0, r3, r2
 8009928:	6963      	ldr	r3, [r4, #20]
 800992a:	b2f6      	uxtb	r6, r6
 800992c:	4283      	cmp	r3, r0
 800992e:	4637      	mov	r7, r6
 8009930:	dc04      	bgt.n	800993c <__swbuf_r+0x3a>
 8009932:	4621      	mov	r1, r4
 8009934:	4628      	mov	r0, r5
 8009936:	f000 fdab 	bl	800a490 <_fflush_r>
 800993a:	b9e0      	cbnz	r0, 8009976 <__swbuf_r+0x74>
 800993c:	68a3      	ldr	r3, [r4, #8]
 800993e:	3b01      	subs	r3, #1
 8009940:	60a3      	str	r3, [r4, #8]
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	1c5a      	adds	r2, r3, #1
 8009946:	6022      	str	r2, [r4, #0]
 8009948:	701e      	strb	r6, [r3, #0]
 800994a:	6962      	ldr	r2, [r4, #20]
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	429a      	cmp	r2, r3
 8009950:	d004      	beq.n	800995c <__swbuf_r+0x5a>
 8009952:	89a3      	ldrh	r3, [r4, #12]
 8009954:	07db      	lsls	r3, r3, #31
 8009956:	d506      	bpl.n	8009966 <__swbuf_r+0x64>
 8009958:	2e0a      	cmp	r6, #10
 800995a:	d104      	bne.n	8009966 <__swbuf_r+0x64>
 800995c:	4621      	mov	r1, r4
 800995e:	4628      	mov	r0, r5
 8009960:	f000 fd96 	bl	800a490 <_fflush_r>
 8009964:	b938      	cbnz	r0, 8009976 <__swbuf_r+0x74>
 8009966:	4638      	mov	r0, r7
 8009968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800996a:	4621      	mov	r1, r4
 800996c:	4628      	mov	r0, r5
 800996e:	f000 f805 	bl	800997c <__swsetup_r>
 8009972:	2800      	cmp	r0, #0
 8009974:	d0d5      	beq.n	8009922 <__swbuf_r+0x20>
 8009976:	f04f 37ff 	mov.w	r7, #4294967295
 800997a:	e7f4      	b.n	8009966 <__swbuf_r+0x64>

0800997c <__swsetup_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4b2a      	ldr	r3, [pc, #168]	; (8009a28 <__swsetup_r+0xac>)
 8009980:	4605      	mov	r5, r0
 8009982:	6818      	ldr	r0, [r3, #0]
 8009984:	460c      	mov	r4, r1
 8009986:	b118      	cbz	r0, 8009990 <__swsetup_r+0x14>
 8009988:	6a03      	ldr	r3, [r0, #32]
 800998a:	b90b      	cbnz	r3, 8009990 <__swsetup_r+0x14>
 800998c:	f7ff fed2 	bl	8009734 <__sinit>
 8009990:	89a3      	ldrh	r3, [r4, #12]
 8009992:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009996:	0718      	lsls	r0, r3, #28
 8009998:	d422      	bmi.n	80099e0 <__swsetup_r+0x64>
 800999a:	06d9      	lsls	r1, r3, #27
 800999c:	d407      	bmi.n	80099ae <__swsetup_r+0x32>
 800999e:	2309      	movs	r3, #9
 80099a0:	602b      	str	r3, [r5, #0]
 80099a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099a6:	81a3      	strh	r3, [r4, #12]
 80099a8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ac:	e034      	b.n	8009a18 <__swsetup_r+0x9c>
 80099ae:	0758      	lsls	r0, r3, #29
 80099b0:	d512      	bpl.n	80099d8 <__swsetup_r+0x5c>
 80099b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099b4:	b141      	cbz	r1, 80099c8 <__swsetup_r+0x4c>
 80099b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099ba:	4299      	cmp	r1, r3
 80099bc:	d002      	beq.n	80099c4 <__swsetup_r+0x48>
 80099be:	4628      	mov	r0, r5
 80099c0:	f000 f914 	bl	8009bec <_free_r>
 80099c4:	2300      	movs	r3, #0
 80099c6:	6363      	str	r3, [r4, #52]	; 0x34
 80099c8:	89a3      	ldrh	r3, [r4, #12]
 80099ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099ce:	81a3      	strh	r3, [r4, #12]
 80099d0:	2300      	movs	r3, #0
 80099d2:	6063      	str	r3, [r4, #4]
 80099d4:	6923      	ldr	r3, [r4, #16]
 80099d6:	6023      	str	r3, [r4, #0]
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	f043 0308 	orr.w	r3, r3, #8
 80099de:	81a3      	strh	r3, [r4, #12]
 80099e0:	6923      	ldr	r3, [r4, #16]
 80099e2:	b94b      	cbnz	r3, 80099f8 <__swsetup_r+0x7c>
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099ee:	d003      	beq.n	80099f8 <__swsetup_r+0x7c>
 80099f0:	4621      	mov	r1, r4
 80099f2:	4628      	mov	r0, r5
 80099f4:	f000 fd9a 	bl	800a52c <__smakebuf_r>
 80099f8:	89a0      	ldrh	r0, [r4, #12]
 80099fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099fe:	f010 0301 	ands.w	r3, r0, #1
 8009a02:	d00a      	beq.n	8009a1a <__swsetup_r+0x9e>
 8009a04:	2300      	movs	r3, #0
 8009a06:	60a3      	str	r3, [r4, #8]
 8009a08:	6963      	ldr	r3, [r4, #20]
 8009a0a:	425b      	negs	r3, r3
 8009a0c:	61a3      	str	r3, [r4, #24]
 8009a0e:	6923      	ldr	r3, [r4, #16]
 8009a10:	b943      	cbnz	r3, 8009a24 <__swsetup_r+0xa8>
 8009a12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a16:	d1c4      	bne.n	80099a2 <__swsetup_r+0x26>
 8009a18:	bd38      	pop	{r3, r4, r5, pc}
 8009a1a:	0781      	lsls	r1, r0, #30
 8009a1c:	bf58      	it	pl
 8009a1e:	6963      	ldrpl	r3, [r4, #20]
 8009a20:	60a3      	str	r3, [r4, #8]
 8009a22:	e7f4      	b.n	8009a0e <__swsetup_r+0x92>
 8009a24:	2000      	movs	r0, #0
 8009a26:	e7f7      	b.n	8009a18 <__swsetup_r+0x9c>
 8009a28:	2000009c 	.word	0x2000009c

08009a2c <memset>:
 8009a2c:	4402      	add	r2, r0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d100      	bne.n	8009a36 <memset+0xa>
 8009a34:	4770      	bx	lr
 8009a36:	f803 1b01 	strb.w	r1, [r3], #1
 8009a3a:	e7f9      	b.n	8009a30 <memset+0x4>

08009a3c <_close_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4d06      	ldr	r5, [pc, #24]	; (8009a58 <_close_r+0x1c>)
 8009a40:	2300      	movs	r3, #0
 8009a42:	4604      	mov	r4, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	602b      	str	r3, [r5, #0]
 8009a48:	f7f7 fbad 	bl	80011a6 <_close>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d102      	bne.n	8009a56 <_close_r+0x1a>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	b103      	cbz	r3, 8009a56 <_close_r+0x1a>
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	20004ddc 	.word	0x20004ddc

08009a5c <_reclaim_reent>:
 8009a5c:	4b29      	ldr	r3, [pc, #164]	; (8009b04 <_reclaim_reent+0xa8>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4283      	cmp	r3, r0
 8009a62:	b570      	push	{r4, r5, r6, lr}
 8009a64:	4604      	mov	r4, r0
 8009a66:	d04b      	beq.n	8009b00 <_reclaim_reent+0xa4>
 8009a68:	69c3      	ldr	r3, [r0, #28]
 8009a6a:	b143      	cbz	r3, 8009a7e <_reclaim_reent+0x22>
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d144      	bne.n	8009afc <_reclaim_reent+0xa0>
 8009a72:	69e3      	ldr	r3, [r4, #28]
 8009a74:	6819      	ldr	r1, [r3, #0]
 8009a76:	b111      	cbz	r1, 8009a7e <_reclaim_reent+0x22>
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f000 f8b7 	bl	8009bec <_free_r>
 8009a7e:	6961      	ldr	r1, [r4, #20]
 8009a80:	b111      	cbz	r1, 8009a88 <_reclaim_reent+0x2c>
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 f8b2 	bl	8009bec <_free_r>
 8009a88:	69e1      	ldr	r1, [r4, #28]
 8009a8a:	b111      	cbz	r1, 8009a92 <_reclaim_reent+0x36>
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f000 f8ad 	bl	8009bec <_free_r>
 8009a92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009a94:	b111      	cbz	r1, 8009a9c <_reclaim_reent+0x40>
 8009a96:	4620      	mov	r0, r4
 8009a98:	f000 f8a8 	bl	8009bec <_free_r>
 8009a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a9e:	b111      	cbz	r1, 8009aa6 <_reclaim_reent+0x4a>
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f000 f8a3 	bl	8009bec <_free_r>
 8009aa6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009aa8:	b111      	cbz	r1, 8009ab0 <_reclaim_reent+0x54>
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f000 f89e 	bl	8009bec <_free_r>
 8009ab0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009ab2:	b111      	cbz	r1, 8009aba <_reclaim_reent+0x5e>
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f000 f899 	bl	8009bec <_free_r>
 8009aba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009abc:	b111      	cbz	r1, 8009ac4 <_reclaim_reent+0x68>
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f000 f894 	bl	8009bec <_free_r>
 8009ac4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009ac6:	b111      	cbz	r1, 8009ace <_reclaim_reent+0x72>
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f000 f88f 	bl	8009bec <_free_r>
 8009ace:	6a23      	ldr	r3, [r4, #32]
 8009ad0:	b1b3      	cbz	r3, 8009b00 <_reclaim_reent+0xa4>
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ad8:	4718      	bx	r3
 8009ada:	5949      	ldr	r1, [r1, r5]
 8009adc:	b941      	cbnz	r1, 8009af0 <_reclaim_reent+0x94>
 8009ade:	3504      	adds	r5, #4
 8009ae0:	69e3      	ldr	r3, [r4, #28]
 8009ae2:	2d80      	cmp	r5, #128	; 0x80
 8009ae4:	68d9      	ldr	r1, [r3, #12]
 8009ae6:	d1f8      	bne.n	8009ada <_reclaim_reent+0x7e>
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f000 f87f 	bl	8009bec <_free_r>
 8009aee:	e7c0      	b.n	8009a72 <_reclaim_reent+0x16>
 8009af0:	680e      	ldr	r6, [r1, #0]
 8009af2:	4620      	mov	r0, r4
 8009af4:	f000 f87a 	bl	8009bec <_free_r>
 8009af8:	4631      	mov	r1, r6
 8009afa:	e7ef      	b.n	8009adc <_reclaim_reent+0x80>
 8009afc:	2500      	movs	r5, #0
 8009afe:	e7ef      	b.n	8009ae0 <_reclaim_reent+0x84>
 8009b00:	bd70      	pop	{r4, r5, r6, pc}
 8009b02:	bf00      	nop
 8009b04:	2000009c 	.word	0x2000009c

08009b08 <_lseek_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4d07      	ldr	r5, [pc, #28]	; (8009b28 <_lseek_r+0x20>)
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	4608      	mov	r0, r1
 8009b10:	4611      	mov	r1, r2
 8009b12:	2200      	movs	r2, #0
 8009b14:	602a      	str	r2, [r5, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	f7f7 fb6c 	bl	80011f4 <_lseek>
 8009b1c:	1c43      	adds	r3, r0, #1
 8009b1e:	d102      	bne.n	8009b26 <_lseek_r+0x1e>
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	b103      	cbz	r3, 8009b26 <_lseek_r+0x1e>
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	bd38      	pop	{r3, r4, r5, pc}
 8009b28:	20004ddc 	.word	0x20004ddc

08009b2c <_read_r>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	4d07      	ldr	r5, [pc, #28]	; (8009b4c <_read_r+0x20>)
 8009b30:	4604      	mov	r4, r0
 8009b32:	4608      	mov	r0, r1
 8009b34:	4611      	mov	r1, r2
 8009b36:	2200      	movs	r2, #0
 8009b38:	602a      	str	r2, [r5, #0]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	f7f7 fb16 	bl	800116c <_read>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_read_r+0x1e>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_read_r+0x1e>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	20004ddc 	.word	0x20004ddc

08009b50 <_write_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d07      	ldr	r5, [pc, #28]	; (8009b70 <_write_r+0x20>)
 8009b54:	4604      	mov	r4, r0
 8009b56:	4608      	mov	r0, r1
 8009b58:	4611      	mov	r1, r2
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	602a      	str	r2, [r5, #0]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f7f6 fd3b 	bl	80005da <_write>
 8009b64:	1c43      	adds	r3, r0, #1
 8009b66:	d102      	bne.n	8009b6e <_write_r+0x1e>
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	b103      	cbz	r3, 8009b6e <_write_r+0x1e>
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	bd38      	pop	{r3, r4, r5, pc}
 8009b70:	20004ddc 	.word	0x20004ddc

08009b74 <__errno>:
 8009b74:	4b01      	ldr	r3, [pc, #4]	; (8009b7c <__errno+0x8>)
 8009b76:	6818      	ldr	r0, [r3, #0]
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	2000009c 	.word	0x2000009c

08009b80 <__libc_init_array>:
 8009b80:	b570      	push	{r4, r5, r6, lr}
 8009b82:	4d0d      	ldr	r5, [pc, #52]	; (8009bb8 <__libc_init_array+0x38>)
 8009b84:	4c0d      	ldr	r4, [pc, #52]	; (8009bbc <__libc_init_array+0x3c>)
 8009b86:	1b64      	subs	r4, r4, r5
 8009b88:	10a4      	asrs	r4, r4, #2
 8009b8a:	2600      	movs	r6, #0
 8009b8c:	42a6      	cmp	r6, r4
 8009b8e:	d109      	bne.n	8009ba4 <__libc_init_array+0x24>
 8009b90:	4d0b      	ldr	r5, [pc, #44]	; (8009bc0 <__libc_init_array+0x40>)
 8009b92:	4c0c      	ldr	r4, [pc, #48]	; (8009bc4 <__libc_init_array+0x44>)
 8009b94:	f000 fd38 	bl	800a608 <_init>
 8009b98:	1b64      	subs	r4, r4, r5
 8009b9a:	10a4      	asrs	r4, r4, #2
 8009b9c:	2600      	movs	r6, #0
 8009b9e:	42a6      	cmp	r6, r4
 8009ba0:	d105      	bne.n	8009bae <__libc_init_array+0x2e>
 8009ba2:	bd70      	pop	{r4, r5, r6, pc}
 8009ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba8:	4798      	blx	r3
 8009baa:	3601      	adds	r6, #1
 8009bac:	e7ee      	b.n	8009b8c <__libc_init_array+0xc>
 8009bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bb2:	4798      	blx	r3
 8009bb4:	3601      	adds	r6, #1
 8009bb6:	e7f2      	b.n	8009b9e <__libc_init_array+0x1e>
 8009bb8:	0800a7f8 	.word	0x0800a7f8
 8009bbc:	0800a7f8 	.word	0x0800a7f8
 8009bc0:	0800a7f8 	.word	0x0800a7f8
 8009bc4:	0800a7fc 	.word	0x0800a7fc

08009bc8 <__retarget_lock_init_recursive>:
 8009bc8:	4770      	bx	lr

08009bca <__retarget_lock_acquire_recursive>:
 8009bca:	4770      	bx	lr

08009bcc <__retarget_lock_release_recursive>:
 8009bcc:	4770      	bx	lr

08009bce <memcpy>:
 8009bce:	440a      	add	r2, r1
 8009bd0:	4291      	cmp	r1, r2
 8009bd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bd6:	d100      	bne.n	8009bda <memcpy+0xc>
 8009bd8:	4770      	bx	lr
 8009bda:	b510      	push	{r4, lr}
 8009bdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009be0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009be4:	4291      	cmp	r1, r2
 8009be6:	d1f9      	bne.n	8009bdc <memcpy+0xe>
 8009be8:	bd10      	pop	{r4, pc}
	...

08009bec <_free_r>:
 8009bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bee:	2900      	cmp	r1, #0
 8009bf0:	d044      	beq.n	8009c7c <_free_r+0x90>
 8009bf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf6:	9001      	str	r0, [sp, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f1a1 0404 	sub.w	r4, r1, #4
 8009bfe:	bfb8      	it	lt
 8009c00:	18e4      	addlt	r4, r4, r3
 8009c02:	f000 f8df 	bl	8009dc4 <__malloc_lock>
 8009c06:	4a1e      	ldr	r2, [pc, #120]	; (8009c80 <_free_r+0x94>)
 8009c08:	9801      	ldr	r0, [sp, #4]
 8009c0a:	6813      	ldr	r3, [r2, #0]
 8009c0c:	b933      	cbnz	r3, 8009c1c <_free_r+0x30>
 8009c0e:	6063      	str	r3, [r4, #4]
 8009c10:	6014      	str	r4, [r2, #0]
 8009c12:	b003      	add	sp, #12
 8009c14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c18:	f000 b8da 	b.w	8009dd0 <__malloc_unlock>
 8009c1c:	42a3      	cmp	r3, r4
 8009c1e:	d908      	bls.n	8009c32 <_free_r+0x46>
 8009c20:	6825      	ldr	r5, [r4, #0]
 8009c22:	1961      	adds	r1, r4, r5
 8009c24:	428b      	cmp	r3, r1
 8009c26:	bf01      	itttt	eq
 8009c28:	6819      	ldreq	r1, [r3, #0]
 8009c2a:	685b      	ldreq	r3, [r3, #4]
 8009c2c:	1949      	addeq	r1, r1, r5
 8009c2e:	6021      	streq	r1, [r4, #0]
 8009c30:	e7ed      	b.n	8009c0e <_free_r+0x22>
 8009c32:	461a      	mov	r2, r3
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	b10b      	cbz	r3, 8009c3c <_free_r+0x50>
 8009c38:	42a3      	cmp	r3, r4
 8009c3a:	d9fa      	bls.n	8009c32 <_free_r+0x46>
 8009c3c:	6811      	ldr	r1, [r2, #0]
 8009c3e:	1855      	adds	r5, r2, r1
 8009c40:	42a5      	cmp	r5, r4
 8009c42:	d10b      	bne.n	8009c5c <_free_r+0x70>
 8009c44:	6824      	ldr	r4, [r4, #0]
 8009c46:	4421      	add	r1, r4
 8009c48:	1854      	adds	r4, r2, r1
 8009c4a:	42a3      	cmp	r3, r4
 8009c4c:	6011      	str	r1, [r2, #0]
 8009c4e:	d1e0      	bne.n	8009c12 <_free_r+0x26>
 8009c50:	681c      	ldr	r4, [r3, #0]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	6053      	str	r3, [r2, #4]
 8009c56:	440c      	add	r4, r1
 8009c58:	6014      	str	r4, [r2, #0]
 8009c5a:	e7da      	b.n	8009c12 <_free_r+0x26>
 8009c5c:	d902      	bls.n	8009c64 <_free_r+0x78>
 8009c5e:	230c      	movs	r3, #12
 8009c60:	6003      	str	r3, [r0, #0]
 8009c62:	e7d6      	b.n	8009c12 <_free_r+0x26>
 8009c64:	6825      	ldr	r5, [r4, #0]
 8009c66:	1961      	adds	r1, r4, r5
 8009c68:	428b      	cmp	r3, r1
 8009c6a:	bf04      	itt	eq
 8009c6c:	6819      	ldreq	r1, [r3, #0]
 8009c6e:	685b      	ldreq	r3, [r3, #4]
 8009c70:	6063      	str	r3, [r4, #4]
 8009c72:	bf04      	itt	eq
 8009c74:	1949      	addeq	r1, r1, r5
 8009c76:	6021      	streq	r1, [r4, #0]
 8009c78:	6054      	str	r4, [r2, #4]
 8009c7a:	e7ca      	b.n	8009c12 <_free_r+0x26>
 8009c7c:	b003      	add	sp, #12
 8009c7e:	bd30      	pop	{r4, r5, pc}
 8009c80:	20004de4 	.word	0x20004de4

08009c84 <sbrk_aligned>:
 8009c84:	b570      	push	{r4, r5, r6, lr}
 8009c86:	4e0e      	ldr	r6, [pc, #56]	; (8009cc0 <sbrk_aligned+0x3c>)
 8009c88:	460c      	mov	r4, r1
 8009c8a:	6831      	ldr	r1, [r6, #0]
 8009c8c:	4605      	mov	r5, r0
 8009c8e:	b911      	cbnz	r1, 8009c96 <sbrk_aligned+0x12>
 8009c90:	f000 fcaa 	bl	800a5e8 <_sbrk_r>
 8009c94:	6030      	str	r0, [r6, #0]
 8009c96:	4621      	mov	r1, r4
 8009c98:	4628      	mov	r0, r5
 8009c9a:	f000 fca5 	bl	800a5e8 <_sbrk_r>
 8009c9e:	1c43      	adds	r3, r0, #1
 8009ca0:	d00a      	beq.n	8009cb8 <sbrk_aligned+0x34>
 8009ca2:	1cc4      	adds	r4, r0, #3
 8009ca4:	f024 0403 	bic.w	r4, r4, #3
 8009ca8:	42a0      	cmp	r0, r4
 8009caa:	d007      	beq.n	8009cbc <sbrk_aligned+0x38>
 8009cac:	1a21      	subs	r1, r4, r0
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f000 fc9a 	bl	800a5e8 <_sbrk_r>
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d101      	bne.n	8009cbc <sbrk_aligned+0x38>
 8009cb8:	f04f 34ff 	mov.w	r4, #4294967295
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	bd70      	pop	{r4, r5, r6, pc}
 8009cc0:	20004de8 	.word	0x20004de8

08009cc4 <_malloc_r>:
 8009cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cc8:	1ccd      	adds	r5, r1, #3
 8009cca:	f025 0503 	bic.w	r5, r5, #3
 8009cce:	3508      	adds	r5, #8
 8009cd0:	2d0c      	cmp	r5, #12
 8009cd2:	bf38      	it	cc
 8009cd4:	250c      	movcc	r5, #12
 8009cd6:	2d00      	cmp	r5, #0
 8009cd8:	4607      	mov	r7, r0
 8009cda:	db01      	blt.n	8009ce0 <_malloc_r+0x1c>
 8009cdc:	42a9      	cmp	r1, r5
 8009cde:	d905      	bls.n	8009cec <_malloc_r+0x28>
 8009ce0:	230c      	movs	r3, #12
 8009ce2:	603b      	str	r3, [r7, #0]
 8009ce4:	2600      	movs	r6, #0
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009dc0 <_malloc_r+0xfc>
 8009cf0:	f000 f868 	bl	8009dc4 <__malloc_lock>
 8009cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8009cf8:	461c      	mov	r4, r3
 8009cfa:	bb5c      	cbnz	r4, 8009d54 <_malloc_r+0x90>
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	4638      	mov	r0, r7
 8009d00:	f7ff ffc0 	bl	8009c84 <sbrk_aligned>
 8009d04:	1c43      	adds	r3, r0, #1
 8009d06:	4604      	mov	r4, r0
 8009d08:	d155      	bne.n	8009db6 <_malloc_r+0xf2>
 8009d0a:	f8d8 4000 	ldr.w	r4, [r8]
 8009d0e:	4626      	mov	r6, r4
 8009d10:	2e00      	cmp	r6, #0
 8009d12:	d145      	bne.n	8009da0 <_malloc_r+0xdc>
 8009d14:	2c00      	cmp	r4, #0
 8009d16:	d048      	beq.n	8009daa <_malloc_r+0xe6>
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	4638      	mov	r0, r7
 8009d1e:	eb04 0903 	add.w	r9, r4, r3
 8009d22:	f000 fc61 	bl	800a5e8 <_sbrk_r>
 8009d26:	4581      	cmp	r9, r0
 8009d28:	d13f      	bne.n	8009daa <_malloc_r+0xe6>
 8009d2a:	6821      	ldr	r1, [r4, #0]
 8009d2c:	1a6d      	subs	r5, r5, r1
 8009d2e:	4629      	mov	r1, r5
 8009d30:	4638      	mov	r0, r7
 8009d32:	f7ff ffa7 	bl	8009c84 <sbrk_aligned>
 8009d36:	3001      	adds	r0, #1
 8009d38:	d037      	beq.n	8009daa <_malloc_r+0xe6>
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	442b      	add	r3, r5
 8009d3e:	6023      	str	r3, [r4, #0]
 8009d40:	f8d8 3000 	ldr.w	r3, [r8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d038      	beq.n	8009dba <_malloc_r+0xf6>
 8009d48:	685a      	ldr	r2, [r3, #4]
 8009d4a:	42a2      	cmp	r2, r4
 8009d4c:	d12b      	bne.n	8009da6 <_malloc_r+0xe2>
 8009d4e:	2200      	movs	r2, #0
 8009d50:	605a      	str	r2, [r3, #4]
 8009d52:	e00f      	b.n	8009d74 <_malloc_r+0xb0>
 8009d54:	6822      	ldr	r2, [r4, #0]
 8009d56:	1b52      	subs	r2, r2, r5
 8009d58:	d41f      	bmi.n	8009d9a <_malloc_r+0xd6>
 8009d5a:	2a0b      	cmp	r2, #11
 8009d5c:	d917      	bls.n	8009d8e <_malloc_r+0xca>
 8009d5e:	1961      	adds	r1, r4, r5
 8009d60:	42a3      	cmp	r3, r4
 8009d62:	6025      	str	r5, [r4, #0]
 8009d64:	bf18      	it	ne
 8009d66:	6059      	strne	r1, [r3, #4]
 8009d68:	6863      	ldr	r3, [r4, #4]
 8009d6a:	bf08      	it	eq
 8009d6c:	f8c8 1000 	streq.w	r1, [r8]
 8009d70:	5162      	str	r2, [r4, r5]
 8009d72:	604b      	str	r3, [r1, #4]
 8009d74:	4638      	mov	r0, r7
 8009d76:	f104 060b 	add.w	r6, r4, #11
 8009d7a:	f000 f829 	bl	8009dd0 <__malloc_unlock>
 8009d7e:	f026 0607 	bic.w	r6, r6, #7
 8009d82:	1d23      	adds	r3, r4, #4
 8009d84:	1af2      	subs	r2, r6, r3
 8009d86:	d0ae      	beq.n	8009ce6 <_malloc_r+0x22>
 8009d88:	1b9b      	subs	r3, r3, r6
 8009d8a:	50a3      	str	r3, [r4, r2]
 8009d8c:	e7ab      	b.n	8009ce6 <_malloc_r+0x22>
 8009d8e:	42a3      	cmp	r3, r4
 8009d90:	6862      	ldr	r2, [r4, #4]
 8009d92:	d1dd      	bne.n	8009d50 <_malloc_r+0x8c>
 8009d94:	f8c8 2000 	str.w	r2, [r8]
 8009d98:	e7ec      	b.n	8009d74 <_malloc_r+0xb0>
 8009d9a:	4623      	mov	r3, r4
 8009d9c:	6864      	ldr	r4, [r4, #4]
 8009d9e:	e7ac      	b.n	8009cfa <_malloc_r+0x36>
 8009da0:	4634      	mov	r4, r6
 8009da2:	6876      	ldr	r6, [r6, #4]
 8009da4:	e7b4      	b.n	8009d10 <_malloc_r+0x4c>
 8009da6:	4613      	mov	r3, r2
 8009da8:	e7cc      	b.n	8009d44 <_malloc_r+0x80>
 8009daa:	230c      	movs	r3, #12
 8009dac:	603b      	str	r3, [r7, #0]
 8009dae:	4638      	mov	r0, r7
 8009db0:	f000 f80e 	bl	8009dd0 <__malloc_unlock>
 8009db4:	e797      	b.n	8009ce6 <_malloc_r+0x22>
 8009db6:	6025      	str	r5, [r4, #0]
 8009db8:	e7dc      	b.n	8009d74 <_malloc_r+0xb0>
 8009dba:	605b      	str	r3, [r3, #4]
 8009dbc:	deff      	udf	#255	; 0xff
 8009dbe:	bf00      	nop
 8009dc0:	20004de4 	.word	0x20004de4

08009dc4 <__malloc_lock>:
 8009dc4:	4801      	ldr	r0, [pc, #4]	; (8009dcc <__malloc_lock+0x8>)
 8009dc6:	f7ff bf00 	b.w	8009bca <__retarget_lock_acquire_recursive>
 8009dca:	bf00      	nop
 8009dcc:	20004de0 	.word	0x20004de0

08009dd0 <__malloc_unlock>:
 8009dd0:	4801      	ldr	r0, [pc, #4]	; (8009dd8 <__malloc_unlock+0x8>)
 8009dd2:	f7ff befb 	b.w	8009bcc <__retarget_lock_release_recursive>
 8009dd6:	bf00      	nop
 8009dd8:	20004de0 	.word	0x20004de0

08009ddc <__sfputc_r>:
 8009ddc:	6893      	ldr	r3, [r2, #8]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	b410      	push	{r4}
 8009de4:	6093      	str	r3, [r2, #8]
 8009de6:	da08      	bge.n	8009dfa <__sfputc_r+0x1e>
 8009de8:	6994      	ldr	r4, [r2, #24]
 8009dea:	42a3      	cmp	r3, r4
 8009dec:	db01      	blt.n	8009df2 <__sfputc_r+0x16>
 8009dee:	290a      	cmp	r1, #10
 8009df0:	d103      	bne.n	8009dfa <__sfputc_r+0x1e>
 8009df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009df6:	f7ff bd84 	b.w	8009902 <__swbuf_r>
 8009dfa:	6813      	ldr	r3, [r2, #0]
 8009dfc:	1c58      	adds	r0, r3, #1
 8009dfe:	6010      	str	r0, [r2, #0]
 8009e00:	7019      	strb	r1, [r3, #0]
 8009e02:	4608      	mov	r0, r1
 8009e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <__sfputs_r>:
 8009e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0c:	4606      	mov	r6, r0
 8009e0e:	460f      	mov	r7, r1
 8009e10:	4614      	mov	r4, r2
 8009e12:	18d5      	adds	r5, r2, r3
 8009e14:	42ac      	cmp	r4, r5
 8009e16:	d101      	bne.n	8009e1c <__sfputs_r+0x12>
 8009e18:	2000      	movs	r0, #0
 8009e1a:	e007      	b.n	8009e2c <__sfputs_r+0x22>
 8009e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e20:	463a      	mov	r2, r7
 8009e22:	4630      	mov	r0, r6
 8009e24:	f7ff ffda 	bl	8009ddc <__sfputc_r>
 8009e28:	1c43      	adds	r3, r0, #1
 8009e2a:	d1f3      	bne.n	8009e14 <__sfputs_r+0xa>
 8009e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e30 <_vfiprintf_r>:
 8009e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e34:	460d      	mov	r5, r1
 8009e36:	b09d      	sub	sp, #116	; 0x74
 8009e38:	4614      	mov	r4, r2
 8009e3a:	4698      	mov	r8, r3
 8009e3c:	4606      	mov	r6, r0
 8009e3e:	b118      	cbz	r0, 8009e48 <_vfiprintf_r+0x18>
 8009e40:	6a03      	ldr	r3, [r0, #32]
 8009e42:	b90b      	cbnz	r3, 8009e48 <_vfiprintf_r+0x18>
 8009e44:	f7ff fc76 	bl	8009734 <__sinit>
 8009e48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e4a:	07d9      	lsls	r1, r3, #31
 8009e4c:	d405      	bmi.n	8009e5a <_vfiprintf_r+0x2a>
 8009e4e:	89ab      	ldrh	r3, [r5, #12]
 8009e50:	059a      	lsls	r2, r3, #22
 8009e52:	d402      	bmi.n	8009e5a <_vfiprintf_r+0x2a>
 8009e54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e56:	f7ff feb8 	bl	8009bca <__retarget_lock_acquire_recursive>
 8009e5a:	89ab      	ldrh	r3, [r5, #12]
 8009e5c:	071b      	lsls	r3, r3, #28
 8009e5e:	d501      	bpl.n	8009e64 <_vfiprintf_r+0x34>
 8009e60:	692b      	ldr	r3, [r5, #16]
 8009e62:	b99b      	cbnz	r3, 8009e8c <_vfiprintf_r+0x5c>
 8009e64:	4629      	mov	r1, r5
 8009e66:	4630      	mov	r0, r6
 8009e68:	f7ff fd88 	bl	800997c <__swsetup_r>
 8009e6c:	b170      	cbz	r0, 8009e8c <_vfiprintf_r+0x5c>
 8009e6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e70:	07dc      	lsls	r4, r3, #31
 8009e72:	d504      	bpl.n	8009e7e <_vfiprintf_r+0x4e>
 8009e74:	f04f 30ff 	mov.w	r0, #4294967295
 8009e78:	b01d      	add	sp, #116	; 0x74
 8009e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7e:	89ab      	ldrh	r3, [r5, #12]
 8009e80:	0598      	lsls	r0, r3, #22
 8009e82:	d4f7      	bmi.n	8009e74 <_vfiprintf_r+0x44>
 8009e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e86:	f7ff fea1 	bl	8009bcc <__retarget_lock_release_recursive>
 8009e8a:	e7f3      	b.n	8009e74 <_vfiprintf_r+0x44>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e90:	2320      	movs	r3, #32
 8009e92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e9a:	2330      	movs	r3, #48	; 0x30
 8009e9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a050 <_vfiprintf_r+0x220>
 8009ea0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ea4:	f04f 0901 	mov.w	r9, #1
 8009ea8:	4623      	mov	r3, r4
 8009eaa:	469a      	mov	sl, r3
 8009eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eb0:	b10a      	cbz	r2, 8009eb6 <_vfiprintf_r+0x86>
 8009eb2:	2a25      	cmp	r2, #37	; 0x25
 8009eb4:	d1f9      	bne.n	8009eaa <_vfiprintf_r+0x7a>
 8009eb6:	ebba 0b04 	subs.w	fp, sl, r4
 8009eba:	d00b      	beq.n	8009ed4 <_vfiprintf_r+0xa4>
 8009ebc:	465b      	mov	r3, fp
 8009ebe:	4622      	mov	r2, r4
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7ff ffa1 	bl	8009e0a <__sfputs_r>
 8009ec8:	3001      	adds	r0, #1
 8009eca:	f000 80a9 	beq.w	800a020 <_vfiprintf_r+0x1f0>
 8009ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ed0:	445a      	add	r2, fp
 8009ed2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f000 80a1 	beq.w	800a020 <_vfiprintf_r+0x1f0>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ee8:	f10a 0a01 	add.w	sl, sl, #1
 8009eec:	9304      	str	r3, [sp, #16]
 8009eee:	9307      	str	r3, [sp, #28]
 8009ef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ef4:	931a      	str	r3, [sp, #104]	; 0x68
 8009ef6:	4654      	mov	r4, sl
 8009ef8:	2205      	movs	r2, #5
 8009efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009efe:	4854      	ldr	r0, [pc, #336]	; (800a050 <_vfiprintf_r+0x220>)
 8009f00:	f7f6 f976 	bl	80001f0 <memchr>
 8009f04:	9a04      	ldr	r2, [sp, #16]
 8009f06:	b9d8      	cbnz	r0, 8009f40 <_vfiprintf_r+0x110>
 8009f08:	06d1      	lsls	r1, r2, #27
 8009f0a:	bf44      	itt	mi
 8009f0c:	2320      	movmi	r3, #32
 8009f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f12:	0713      	lsls	r3, r2, #28
 8009f14:	bf44      	itt	mi
 8009f16:	232b      	movmi	r3, #43	; 0x2b
 8009f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f20:	2b2a      	cmp	r3, #42	; 0x2a
 8009f22:	d015      	beq.n	8009f50 <_vfiprintf_r+0x120>
 8009f24:	9a07      	ldr	r2, [sp, #28]
 8009f26:	4654      	mov	r4, sl
 8009f28:	2000      	movs	r0, #0
 8009f2a:	f04f 0c0a 	mov.w	ip, #10
 8009f2e:	4621      	mov	r1, r4
 8009f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f34:	3b30      	subs	r3, #48	; 0x30
 8009f36:	2b09      	cmp	r3, #9
 8009f38:	d94d      	bls.n	8009fd6 <_vfiprintf_r+0x1a6>
 8009f3a:	b1b0      	cbz	r0, 8009f6a <_vfiprintf_r+0x13a>
 8009f3c:	9207      	str	r2, [sp, #28]
 8009f3e:	e014      	b.n	8009f6a <_vfiprintf_r+0x13a>
 8009f40:	eba0 0308 	sub.w	r3, r0, r8
 8009f44:	fa09 f303 	lsl.w	r3, r9, r3
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	9304      	str	r3, [sp, #16]
 8009f4c:	46a2      	mov	sl, r4
 8009f4e:	e7d2      	b.n	8009ef6 <_vfiprintf_r+0xc6>
 8009f50:	9b03      	ldr	r3, [sp, #12]
 8009f52:	1d19      	adds	r1, r3, #4
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	9103      	str	r1, [sp, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	bfbb      	ittet	lt
 8009f5c:	425b      	neglt	r3, r3
 8009f5e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f62:	9307      	strge	r3, [sp, #28]
 8009f64:	9307      	strlt	r3, [sp, #28]
 8009f66:	bfb8      	it	lt
 8009f68:	9204      	strlt	r2, [sp, #16]
 8009f6a:	7823      	ldrb	r3, [r4, #0]
 8009f6c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f6e:	d10c      	bne.n	8009f8a <_vfiprintf_r+0x15a>
 8009f70:	7863      	ldrb	r3, [r4, #1]
 8009f72:	2b2a      	cmp	r3, #42	; 0x2a
 8009f74:	d134      	bne.n	8009fe0 <_vfiprintf_r+0x1b0>
 8009f76:	9b03      	ldr	r3, [sp, #12]
 8009f78:	1d1a      	adds	r2, r3, #4
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	9203      	str	r2, [sp, #12]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	bfb8      	it	lt
 8009f82:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f86:	3402      	adds	r4, #2
 8009f88:	9305      	str	r3, [sp, #20]
 8009f8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a060 <_vfiprintf_r+0x230>
 8009f8e:	7821      	ldrb	r1, [r4, #0]
 8009f90:	2203      	movs	r2, #3
 8009f92:	4650      	mov	r0, sl
 8009f94:	f7f6 f92c 	bl	80001f0 <memchr>
 8009f98:	b138      	cbz	r0, 8009faa <_vfiprintf_r+0x17a>
 8009f9a:	9b04      	ldr	r3, [sp, #16]
 8009f9c:	eba0 000a 	sub.w	r0, r0, sl
 8009fa0:	2240      	movs	r2, #64	; 0x40
 8009fa2:	4082      	lsls	r2, r0
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	3401      	adds	r4, #1
 8009fa8:	9304      	str	r3, [sp, #16]
 8009faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fae:	4829      	ldr	r0, [pc, #164]	; (800a054 <_vfiprintf_r+0x224>)
 8009fb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fb4:	2206      	movs	r2, #6
 8009fb6:	f7f6 f91b 	bl	80001f0 <memchr>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d03f      	beq.n	800a03e <_vfiprintf_r+0x20e>
 8009fbe:	4b26      	ldr	r3, [pc, #152]	; (800a058 <_vfiprintf_r+0x228>)
 8009fc0:	bb1b      	cbnz	r3, 800a00a <_vfiprintf_r+0x1da>
 8009fc2:	9b03      	ldr	r3, [sp, #12]
 8009fc4:	3307      	adds	r3, #7
 8009fc6:	f023 0307 	bic.w	r3, r3, #7
 8009fca:	3308      	adds	r3, #8
 8009fcc:	9303      	str	r3, [sp, #12]
 8009fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd0:	443b      	add	r3, r7
 8009fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8009fd4:	e768      	b.n	8009ea8 <_vfiprintf_r+0x78>
 8009fd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fda:	460c      	mov	r4, r1
 8009fdc:	2001      	movs	r0, #1
 8009fde:	e7a6      	b.n	8009f2e <_vfiprintf_r+0xfe>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	3401      	adds	r4, #1
 8009fe4:	9305      	str	r3, [sp, #20]
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	f04f 0c0a 	mov.w	ip, #10
 8009fec:	4620      	mov	r0, r4
 8009fee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ff2:	3a30      	subs	r2, #48	; 0x30
 8009ff4:	2a09      	cmp	r2, #9
 8009ff6:	d903      	bls.n	800a000 <_vfiprintf_r+0x1d0>
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d0c6      	beq.n	8009f8a <_vfiprintf_r+0x15a>
 8009ffc:	9105      	str	r1, [sp, #20]
 8009ffe:	e7c4      	b.n	8009f8a <_vfiprintf_r+0x15a>
 800a000:	fb0c 2101 	mla	r1, ip, r1, r2
 800a004:	4604      	mov	r4, r0
 800a006:	2301      	movs	r3, #1
 800a008:	e7f0      	b.n	8009fec <_vfiprintf_r+0x1bc>
 800a00a:	ab03      	add	r3, sp, #12
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	462a      	mov	r2, r5
 800a010:	4b12      	ldr	r3, [pc, #72]	; (800a05c <_vfiprintf_r+0x22c>)
 800a012:	a904      	add	r1, sp, #16
 800a014:	4630      	mov	r0, r6
 800a016:	f3af 8000 	nop.w
 800a01a:	4607      	mov	r7, r0
 800a01c:	1c78      	adds	r0, r7, #1
 800a01e:	d1d6      	bne.n	8009fce <_vfiprintf_r+0x19e>
 800a020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a022:	07d9      	lsls	r1, r3, #31
 800a024:	d405      	bmi.n	800a032 <_vfiprintf_r+0x202>
 800a026:	89ab      	ldrh	r3, [r5, #12]
 800a028:	059a      	lsls	r2, r3, #22
 800a02a:	d402      	bmi.n	800a032 <_vfiprintf_r+0x202>
 800a02c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a02e:	f7ff fdcd 	bl	8009bcc <__retarget_lock_release_recursive>
 800a032:	89ab      	ldrh	r3, [r5, #12]
 800a034:	065b      	lsls	r3, r3, #25
 800a036:	f53f af1d 	bmi.w	8009e74 <_vfiprintf_r+0x44>
 800a03a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a03c:	e71c      	b.n	8009e78 <_vfiprintf_r+0x48>
 800a03e:	ab03      	add	r3, sp, #12
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	462a      	mov	r2, r5
 800a044:	4b05      	ldr	r3, [pc, #20]	; (800a05c <_vfiprintf_r+0x22c>)
 800a046:	a904      	add	r1, sp, #16
 800a048:	4630      	mov	r0, r6
 800a04a:	f000 f879 	bl	800a140 <_printf_i>
 800a04e:	e7e4      	b.n	800a01a <_vfiprintf_r+0x1ea>
 800a050:	0800a7bc 	.word	0x0800a7bc
 800a054:	0800a7c6 	.word	0x0800a7c6
 800a058:	00000000 	.word	0x00000000
 800a05c:	08009e0b 	.word	0x08009e0b
 800a060:	0800a7c2 	.word	0x0800a7c2

0800a064 <_printf_common>:
 800a064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a068:	4616      	mov	r6, r2
 800a06a:	4699      	mov	r9, r3
 800a06c:	688a      	ldr	r2, [r1, #8]
 800a06e:	690b      	ldr	r3, [r1, #16]
 800a070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a074:	4293      	cmp	r3, r2
 800a076:	bfb8      	it	lt
 800a078:	4613      	movlt	r3, r2
 800a07a:	6033      	str	r3, [r6, #0]
 800a07c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a080:	4607      	mov	r7, r0
 800a082:	460c      	mov	r4, r1
 800a084:	b10a      	cbz	r2, 800a08a <_printf_common+0x26>
 800a086:	3301      	adds	r3, #1
 800a088:	6033      	str	r3, [r6, #0]
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	0699      	lsls	r1, r3, #26
 800a08e:	bf42      	ittt	mi
 800a090:	6833      	ldrmi	r3, [r6, #0]
 800a092:	3302      	addmi	r3, #2
 800a094:	6033      	strmi	r3, [r6, #0]
 800a096:	6825      	ldr	r5, [r4, #0]
 800a098:	f015 0506 	ands.w	r5, r5, #6
 800a09c:	d106      	bne.n	800a0ac <_printf_common+0x48>
 800a09e:	f104 0a19 	add.w	sl, r4, #25
 800a0a2:	68e3      	ldr	r3, [r4, #12]
 800a0a4:	6832      	ldr	r2, [r6, #0]
 800a0a6:	1a9b      	subs	r3, r3, r2
 800a0a8:	42ab      	cmp	r3, r5
 800a0aa:	dc26      	bgt.n	800a0fa <_printf_common+0x96>
 800a0ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0b0:	1e13      	subs	r3, r2, #0
 800a0b2:	6822      	ldr	r2, [r4, #0]
 800a0b4:	bf18      	it	ne
 800a0b6:	2301      	movne	r3, #1
 800a0b8:	0692      	lsls	r2, r2, #26
 800a0ba:	d42b      	bmi.n	800a114 <_printf_common+0xb0>
 800a0bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	4638      	mov	r0, r7
 800a0c4:	47c0      	blx	r8
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	d01e      	beq.n	800a108 <_printf_common+0xa4>
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	6922      	ldr	r2, [r4, #16]
 800a0ce:	f003 0306 	and.w	r3, r3, #6
 800a0d2:	2b04      	cmp	r3, #4
 800a0d4:	bf02      	ittt	eq
 800a0d6:	68e5      	ldreq	r5, [r4, #12]
 800a0d8:	6833      	ldreq	r3, [r6, #0]
 800a0da:	1aed      	subeq	r5, r5, r3
 800a0dc:	68a3      	ldr	r3, [r4, #8]
 800a0de:	bf0c      	ite	eq
 800a0e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0e4:	2500      	movne	r5, #0
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	bfc4      	itt	gt
 800a0ea:	1a9b      	subgt	r3, r3, r2
 800a0ec:	18ed      	addgt	r5, r5, r3
 800a0ee:	2600      	movs	r6, #0
 800a0f0:	341a      	adds	r4, #26
 800a0f2:	42b5      	cmp	r5, r6
 800a0f4:	d11a      	bne.n	800a12c <_printf_common+0xc8>
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	e008      	b.n	800a10c <_printf_common+0xa8>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	4652      	mov	r2, sl
 800a0fe:	4649      	mov	r1, r9
 800a100:	4638      	mov	r0, r7
 800a102:	47c0      	blx	r8
 800a104:	3001      	adds	r0, #1
 800a106:	d103      	bne.n	800a110 <_printf_common+0xac>
 800a108:	f04f 30ff 	mov.w	r0, #4294967295
 800a10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a110:	3501      	adds	r5, #1
 800a112:	e7c6      	b.n	800a0a2 <_printf_common+0x3e>
 800a114:	18e1      	adds	r1, r4, r3
 800a116:	1c5a      	adds	r2, r3, #1
 800a118:	2030      	movs	r0, #48	; 0x30
 800a11a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a11e:	4422      	add	r2, r4
 800a120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a124:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a128:	3302      	adds	r3, #2
 800a12a:	e7c7      	b.n	800a0bc <_printf_common+0x58>
 800a12c:	2301      	movs	r3, #1
 800a12e:	4622      	mov	r2, r4
 800a130:	4649      	mov	r1, r9
 800a132:	4638      	mov	r0, r7
 800a134:	47c0      	blx	r8
 800a136:	3001      	adds	r0, #1
 800a138:	d0e6      	beq.n	800a108 <_printf_common+0xa4>
 800a13a:	3601      	adds	r6, #1
 800a13c:	e7d9      	b.n	800a0f2 <_printf_common+0x8e>
	...

0800a140 <_printf_i>:
 800a140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a144:	7e0f      	ldrb	r7, [r1, #24]
 800a146:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a148:	2f78      	cmp	r7, #120	; 0x78
 800a14a:	4691      	mov	r9, r2
 800a14c:	4680      	mov	r8, r0
 800a14e:	460c      	mov	r4, r1
 800a150:	469a      	mov	sl, r3
 800a152:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a156:	d807      	bhi.n	800a168 <_printf_i+0x28>
 800a158:	2f62      	cmp	r7, #98	; 0x62
 800a15a:	d80a      	bhi.n	800a172 <_printf_i+0x32>
 800a15c:	2f00      	cmp	r7, #0
 800a15e:	f000 80d4 	beq.w	800a30a <_printf_i+0x1ca>
 800a162:	2f58      	cmp	r7, #88	; 0x58
 800a164:	f000 80c0 	beq.w	800a2e8 <_printf_i+0x1a8>
 800a168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a16c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a170:	e03a      	b.n	800a1e8 <_printf_i+0xa8>
 800a172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a176:	2b15      	cmp	r3, #21
 800a178:	d8f6      	bhi.n	800a168 <_printf_i+0x28>
 800a17a:	a101      	add	r1, pc, #4	; (adr r1, 800a180 <_printf_i+0x40>)
 800a17c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a180:	0800a1d9 	.word	0x0800a1d9
 800a184:	0800a1ed 	.word	0x0800a1ed
 800a188:	0800a169 	.word	0x0800a169
 800a18c:	0800a169 	.word	0x0800a169
 800a190:	0800a169 	.word	0x0800a169
 800a194:	0800a169 	.word	0x0800a169
 800a198:	0800a1ed 	.word	0x0800a1ed
 800a19c:	0800a169 	.word	0x0800a169
 800a1a0:	0800a169 	.word	0x0800a169
 800a1a4:	0800a169 	.word	0x0800a169
 800a1a8:	0800a169 	.word	0x0800a169
 800a1ac:	0800a2f1 	.word	0x0800a2f1
 800a1b0:	0800a219 	.word	0x0800a219
 800a1b4:	0800a2ab 	.word	0x0800a2ab
 800a1b8:	0800a169 	.word	0x0800a169
 800a1bc:	0800a169 	.word	0x0800a169
 800a1c0:	0800a313 	.word	0x0800a313
 800a1c4:	0800a169 	.word	0x0800a169
 800a1c8:	0800a219 	.word	0x0800a219
 800a1cc:	0800a169 	.word	0x0800a169
 800a1d0:	0800a169 	.word	0x0800a169
 800a1d4:	0800a2b3 	.word	0x0800a2b3
 800a1d8:	682b      	ldr	r3, [r5, #0]
 800a1da:	1d1a      	adds	r2, r3, #4
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	602a      	str	r2, [r5, #0]
 800a1e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e09f      	b.n	800a32c <_printf_i+0x1ec>
 800a1ec:	6820      	ldr	r0, [r4, #0]
 800a1ee:	682b      	ldr	r3, [r5, #0]
 800a1f0:	0607      	lsls	r7, r0, #24
 800a1f2:	f103 0104 	add.w	r1, r3, #4
 800a1f6:	6029      	str	r1, [r5, #0]
 800a1f8:	d501      	bpl.n	800a1fe <_printf_i+0xbe>
 800a1fa:	681e      	ldr	r6, [r3, #0]
 800a1fc:	e003      	b.n	800a206 <_printf_i+0xc6>
 800a1fe:	0646      	lsls	r6, r0, #25
 800a200:	d5fb      	bpl.n	800a1fa <_printf_i+0xba>
 800a202:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a206:	2e00      	cmp	r6, #0
 800a208:	da03      	bge.n	800a212 <_printf_i+0xd2>
 800a20a:	232d      	movs	r3, #45	; 0x2d
 800a20c:	4276      	negs	r6, r6
 800a20e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a212:	485a      	ldr	r0, [pc, #360]	; (800a37c <_printf_i+0x23c>)
 800a214:	230a      	movs	r3, #10
 800a216:	e012      	b.n	800a23e <_printf_i+0xfe>
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	6820      	ldr	r0, [r4, #0]
 800a21c:	1d19      	adds	r1, r3, #4
 800a21e:	6029      	str	r1, [r5, #0]
 800a220:	0605      	lsls	r5, r0, #24
 800a222:	d501      	bpl.n	800a228 <_printf_i+0xe8>
 800a224:	681e      	ldr	r6, [r3, #0]
 800a226:	e002      	b.n	800a22e <_printf_i+0xee>
 800a228:	0641      	lsls	r1, r0, #25
 800a22a:	d5fb      	bpl.n	800a224 <_printf_i+0xe4>
 800a22c:	881e      	ldrh	r6, [r3, #0]
 800a22e:	4853      	ldr	r0, [pc, #332]	; (800a37c <_printf_i+0x23c>)
 800a230:	2f6f      	cmp	r7, #111	; 0x6f
 800a232:	bf0c      	ite	eq
 800a234:	2308      	moveq	r3, #8
 800a236:	230a      	movne	r3, #10
 800a238:	2100      	movs	r1, #0
 800a23a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a23e:	6865      	ldr	r5, [r4, #4]
 800a240:	60a5      	str	r5, [r4, #8]
 800a242:	2d00      	cmp	r5, #0
 800a244:	bfa2      	ittt	ge
 800a246:	6821      	ldrge	r1, [r4, #0]
 800a248:	f021 0104 	bicge.w	r1, r1, #4
 800a24c:	6021      	strge	r1, [r4, #0]
 800a24e:	b90e      	cbnz	r6, 800a254 <_printf_i+0x114>
 800a250:	2d00      	cmp	r5, #0
 800a252:	d04b      	beq.n	800a2ec <_printf_i+0x1ac>
 800a254:	4615      	mov	r5, r2
 800a256:	fbb6 f1f3 	udiv	r1, r6, r3
 800a25a:	fb03 6711 	mls	r7, r3, r1, r6
 800a25e:	5dc7      	ldrb	r7, [r0, r7]
 800a260:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a264:	4637      	mov	r7, r6
 800a266:	42bb      	cmp	r3, r7
 800a268:	460e      	mov	r6, r1
 800a26a:	d9f4      	bls.n	800a256 <_printf_i+0x116>
 800a26c:	2b08      	cmp	r3, #8
 800a26e:	d10b      	bne.n	800a288 <_printf_i+0x148>
 800a270:	6823      	ldr	r3, [r4, #0]
 800a272:	07de      	lsls	r6, r3, #31
 800a274:	d508      	bpl.n	800a288 <_printf_i+0x148>
 800a276:	6923      	ldr	r3, [r4, #16]
 800a278:	6861      	ldr	r1, [r4, #4]
 800a27a:	4299      	cmp	r1, r3
 800a27c:	bfde      	ittt	le
 800a27e:	2330      	movle	r3, #48	; 0x30
 800a280:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a284:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a288:	1b52      	subs	r2, r2, r5
 800a28a:	6122      	str	r2, [r4, #16]
 800a28c:	f8cd a000 	str.w	sl, [sp]
 800a290:	464b      	mov	r3, r9
 800a292:	aa03      	add	r2, sp, #12
 800a294:	4621      	mov	r1, r4
 800a296:	4640      	mov	r0, r8
 800a298:	f7ff fee4 	bl	800a064 <_printf_common>
 800a29c:	3001      	adds	r0, #1
 800a29e:	d14a      	bne.n	800a336 <_printf_i+0x1f6>
 800a2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a4:	b004      	add	sp, #16
 800a2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	f043 0320 	orr.w	r3, r3, #32
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	4833      	ldr	r0, [pc, #204]	; (800a380 <_printf_i+0x240>)
 800a2b4:	2778      	movs	r7, #120	; 0x78
 800a2b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a2ba:	6823      	ldr	r3, [r4, #0]
 800a2bc:	6829      	ldr	r1, [r5, #0]
 800a2be:	061f      	lsls	r7, r3, #24
 800a2c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a2c4:	d402      	bmi.n	800a2cc <_printf_i+0x18c>
 800a2c6:	065f      	lsls	r7, r3, #25
 800a2c8:	bf48      	it	mi
 800a2ca:	b2b6      	uxthmi	r6, r6
 800a2cc:	07df      	lsls	r7, r3, #31
 800a2ce:	bf48      	it	mi
 800a2d0:	f043 0320 	orrmi.w	r3, r3, #32
 800a2d4:	6029      	str	r1, [r5, #0]
 800a2d6:	bf48      	it	mi
 800a2d8:	6023      	strmi	r3, [r4, #0]
 800a2da:	b91e      	cbnz	r6, 800a2e4 <_printf_i+0x1a4>
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	f023 0320 	bic.w	r3, r3, #32
 800a2e2:	6023      	str	r3, [r4, #0]
 800a2e4:	2310      	movs	r3, #16
 800a2e6:	e7a7      	b.n	800a238 <_printf_i+0xf8>
 800a2e8:	4824      	ldr	r0, [pc, #144]	; (800a37c <_printf_i+0x23c>)
 800a2ea:	e7e4      	b.n	800a2b6 <_printf_i+0x176>
 800a2ec:	4615      	mov	r5, r2
 800a2ee:	e7bd      	b.n	800a26c <_printf_i+0x12c>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	6826      	ldr	r6, [r4, #0]
 800a2f4:	6961      	ldr	r1, [r4, #20]
 800a2f6:	1d18      	adds	r0, r3, #4
 800a2f8:	6028      	str	r0, [r5, #0]
 800a2fa:	0635      	lsls	r5, r6, #24
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	d501      	bpl.n	800a304 <_printf_i+0x1c4>
 800a300:	6019      	str	r1, [r3, #0]
 800a302:	e002      	b.n	800a30a <_printf_i+0x1ca>
 800a304:	0670      	lsls	r0, r6, #25
 800a306:	d5fb      	bpl.n	800a300 <_printf_i+0x1c0>
 800a308:	8019      	strh	r1, [r3, #0]
 800a30a:	2300      	movs	r3, #0
 800a30c:	6123      	str	r3, [r4, #16]
 800a30e:	4615      	mov	r5, r2
 800a310:	e7bc      	b.n	800a28c <_printf_i+0x14c>
 800a312:	682b      	ldr	r3, [r5, #0]
 800a314:	1d1a      	adds	r2, r3, #4
 800a316:	602a      	str	r2, [r5, #0]
 800a318:	681d      	ldr	r5, [r3, #0]
 800a31a:	6862      	ldr	r2, [r4, #4]
 800a31c:	2100      	movs	r1, #0
 800a31e:	4628      	mov	r0, r5
 800a320:	f7f5 ff66 	bl	80001f0 <memchr>
 800a324:	b108      	cbz	r0, 800a32a <_printf_i+0x1ea>
 800a326:	1b40      	subs	r0, r0, r5
 800a328:	6060      	str	r0, [r4, #4]
 800a32a:	6863      	ldr	r3, [r4, #4]
 800a32c:	6123      	str	r3, [r4, #16]
 800a32e:	2300      	movs	r3, #0
 800a330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a334:	e7aa      	b.n	800a28c <_printf_i+0x14c>
 800a336:	6923      	ldr	r3, [r4, #16]
 800a338:	462a      	mov	r2, r5
 800a33a:	4649      	mov	r1, r9
 800a33c:	4640      	mov	r0, r8
 800a33e:	47d0      	blx	sl
 800a340:	3001      	adds	r0, #1
 800a342:	d0ad      	beq.n	800a2a0 <_printf_i+0x160>
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	079b      	lsls	r3, r3, #30
 800a348:	d413      	bmi.n	800a372 <_printf_i+0x232>
 800a34a:	68e0      	ldr	r0, [r4, #12]
 800a34c:	9b03      	ldr	r3, [sp, #12]
 800a34e:	4298      	cmp	r0, r3
 800a350:	bfb8      	it	lt
 800a352:	4618      	movlt	r0, r3
 800a354:	e7a6      	b.n	800a2a4 <_printf_i+0x164>
 800a356:	2301      	movs	r3, #1
 800a358:	4632      	mov	r2, r6
 800a35a:	4649      	mov	r1, r9
 800a35c:	4640      	mov	r0, r8
 800a35e:	47d0      	blx	sl
 800a360:	3001      	adds	r0, #1
 800a362:	d09d      	beq.n	800a2a0 <_printf_i+0x160>
 800a364:	3501      	adds	r5, #1
 800a366:	68e3      	ldr	r3, [r4, #12]
 800a368:	9903      	ldr	r1, [sp, #12]
 800a36a:	1a5b      	subs	r3, r3, r1
 800a36c:	42ab      	cmp	r3, r5
 800a36e:	dcf2      	bgt.n	800a356 <_printf_i+0x216>
 800a370:	e7eb      	b.n	800a34a <_printf_i+0x20a>
 800a372:	2500      	movs	r5, #0
 800a374:	f104 0619 	add.w	r6, r4, #25
 800a378:	e7f5      	b.n	800a366 <_printf_i+0x226>
 800a37a:	bf00      	nop
 800a37c:	0800a7cd 	.word	0x0800a7cd
 800a380:	0800a7de 	.word	0x0800a7de

0800a384 <__sflush_r>:
 800a384:	898a      	ldrh	r2, [r1, #12]
 800a386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a38a:	4605      	mov	r5, r0
 800a38c:	0710      	lsls	r0, r2, #28
 800a38e:	460c      	mov	r4, r1
 800a390:	d458      	bmi.n	800a444 <__sflush_r+0xc0>
 800a392:	684b      	ldr	r3, [r1, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	dc05      	bgt.n	800a3a4 <__sflush_r+0x20>
 800a398:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	dc02      	bgt.n	800a3a4 <__sflush_r+0x20>
 800a39e:	2000      	movs	r0, #0
 800a3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3a6:	2e00      	cmp	r6, #0
 800a3a8:	d0f9      	beq.n	800a39e <__sflush_r+0x1a>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3b0:	682f      	ldr	r7, [r5, #0]
 800a3b2:	6a21      	ldr	r1, [r4, #32]
 800a3b4:	602b      	str	r3, [r5, #0]
 800a3b6:	d032      	beq.n	800a41e <__sflush_r+0x9a>
 800a3b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	075a      	lsls	r2, r3, #29
 800a3be:	d505      	bpl.n	800a3cc <__sflush_r+0x48>
 800a3c0:	6863      	ldr	r3, [r4, #4]
 800a3c2:	1ac0      	subs	r0, r0, r3
 800a3c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3c6:	b10b      	cbz	r3, 800a3cc <__sflush_r+0x48>
 800a3c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3ca:	1ac0      	subs	r0, r0, r3
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3d2:	6a21      	ldr	r1, [r4, #32]
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	47b0      	blx	r6
 800a3d8:	1c43      	adds	r3, r0, #1
 800a3da:	89a3      	ldrh	r3, [r4, #12]
 800a3dc:	d106      	bne.n	800a3ec <__sflush_r+0x68>
 800a3de:	6829      	ldr	r1, [r5, #0]
 800a3e0:	291d      	cmp	r1, #29
 800a3e2:	d82b      	bhi.n	800a43c <__sflush_r+0xb8>
 800a3e4:	4a29      	ldr	r2, [pc, #164]	; (800a48c <__sflush_r+0x108>)
 800a3e6:	410a      	asrs	r2, r1
 800a3e8:	07d6      	lsls	r6, r2, #31
 800a3ea:	d427      	bmi.n	800a43c <__sflush_r+0xb8>
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	6062      	str	r2, [r4, #4]
 800a3f0:	04d9      	lsls	r1, r3, #19
 800a3f2:	6922      	ldr	r2, [r4, #16]
 800a3f4:	6022      	str	r2, [r4, #0]
 800a3f6:	d504      	bpl.n	800a402 <__sflush_r+0x7e>
 800a3f8:	1c42      	adds	r2, r0, #1
 800a3fa:	d101      	bne.n	800a400 <__sflush_r+0x7c>
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	b903      	cbnz	r3, 800a402 <__sflush_r+0x7e>
 800a400:	6560      	str	r0, [r4, #84]	; 0x54
 800a402:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a404:	602f      	str	r7, [r5, #0]
 800a406:	2900      	cmp	r1, #0
 800a408:	d0c9      	beq.n	800a39e <__sflush_r+0x1a>
 800a40a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a40e:	4299      	cmp	r1, r3
 800a410:	d002      	beq.n	800a418 <__sflush_r+0x94>
 800a412:	4628      	mov	r0, r5
 800a414:	f7ff fbea 	bl	8009bec <_free_r>
 800a418:	2000      	movs	r0, #0
 800a41a:	6360      	str	r0, [r4, #52]	; 0x34
 800a41c:	e7c0      	b.n	800a3a0 <__sflush_r+0x1c>
 800a41e:	2301      	movs	r3, #1
 800a420:	4628      	mov	r0, r5
 800a422:	47b0      	blx	r6
 800a424:	1c41      	adds	r1, r0, #1
 800a426:	d1c8      	bne.n	800a3ba <__sflush_r+0x36>
 800a428:	682b      	ldr	r3, [r5, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d0c5      	beq.n	800a3ba <__sflush_r+0x36>
 800a42e:	2b1d      	cmp	r3, #29
 800a430:	d001      	beq.n	800a436 <__sflush_r+0xb2>
 800a432:	2b16      	cmp	r3, #22
 800a434:	d101      	bne.n	800a43a <__sflush_r+0xb6>
 800a436:	602f      	str	r7, [r5, #0]
 800a438:	e7b1      	b.n	800a39e <__sflush_r+0x1a>
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a440:	81a3      	strh	r3, [r4, #12]
 800a442:	e7ad      	b.n	800a3a0 <__sflush_r+0x1c>
 800a444:	690f      	ldr	r7, [r1, #16]
 800a446:	2f00      	cmp	r7, #0
 800a448:	d0a9      	beq.n	800a39e <__sflush_r+0x1a>
 800a44a:	0793      	lsls	r3, r2, #30
 800a44c:	680e      	ldr	r6, [r1, #0]
 800a44e:	bf08      	it	eq
 800a450:	694b      	ldreq	r3, [r1, #20]
 800a452:	600f      	str	r7, [r1, #0]
 800a454:	bf18      	it	ne
 800a456:	2300      	movne	r3, #0
 800a458:	eba6 0807 	sub.w	r8, r6, r7
 800a45c:	608b      	str	r3, [r1, #8]
 800a45e:	f1b8 0f00 	cmp.w	r8, #0
 800a462:	dd9c      	ble.n	800a39e <__sflush_r+0x1a>
 800a464:	6a21      	ldr	r1, [r4, #32]
 800a466:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a468:	4643      	mov	r3, r8
 800a46a:	463a      	mov	r2, r7
 800a46c:	4628      	mov	r0, r5
 800a46e:	47b0      	blx	r6
 800a470:	2800      	cmp	r0, #0
 800a472:	dc06      	bgt.n	800a482 <__sflush_r+0xfe>
 800a474:	89a3      	ldrh	r3, [r4, #12]
 800a476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a47a:	81a3      	strh	r3, [r4, #12]
 800a47c:	f04f 30ff 	mov.w	r0, #4294967295
 800a480:	e78e      	b.n	800a3a0 <__sflush_r+0x1c>
 800a482:	4407      	add	r7, r0
 800a484:	eba8 0800 	sub.w	r8, r8, r0
 800a488:	e7e9      	b.n	800a45e <__sflush_r+0xda>
 800a48a:	bf00      	nop
 800a48c:	dfbffffe 	.word	0xdfbffffe

0800a490 <_fflush_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	690b      	ldr	r3, [r1, #16]
 800a494:	4605      	mov	r5, r0
 800a496:	460c      	mov	r4, r1
 800a498:	b913      	cbnz	r3, 800a4a0 <_fflush_r+0x10>
 800a49a:	2500      	movs	r5, #0
 800a49c:	4628      	mov	r0, r5
 800a49e:	bd38      	pop	{r3, r4, r5, pc}
 800a4a0:	b118      	cbz	r0, 800a4aa <_fflush_r+0x1a>
 800a4a2:	6a03      	ldr	r3, [r0, #32]
 800a4a4:	b90b      	cbnz	r3, 800a4aa <_fflush_r+0x1a>
 800a4a6:	f7ff f945 	bl	8009734 <__sinit>
 800a4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d0f3      	beq.n	800a49a <_fflush_r+0xa>
 800a4b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4b4:	07d0      	lsls	r0, r2, #31
 800a4b6:	d404      	bmi.n	800a4c2 <_fflush_r+0x32>
 800a4b8:	0599      	lsls	r1, r3, #22
 800a4ba:	d402      	bmi.n	800a4c2 <_fflush_r+0x32>
 800a4bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4be:	f7ff fb84 	bl	8009bca <__retarget_lock_acquire_recursive>
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	f7ff ff5d 	bl	800a384 <__sflush_r>
 800a4ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4cc:	07da      	lsls	r2, r3, #31
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	d4e4      	bmi.n	800a49c <_fflush_r+0xc>
 800a4d2:	89a3      	ldrh	r3, [r4, #12]
 800a4d4:	059b      	lsls	r3, r3, #22
 800a4d6:	d4e1      	bmi.n	800a49c <_fflush_r+0xc>
 800a4d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4da:	f7ff fb77 	bl	8009bcc <__retarget_lock_release_recursive>
 800a4de:	e7dd      	b.n	800a49c <_fflush_r+0xc>

0800a4e0 <__swhatbuf_r>:
 800a4e0:	b570      	push	{r4, r5, r6, lr}
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e8:	2900      	cmp	r1, #0
 800a4ea:	b096      	sub	sp, #88	; 0x58
 800a4ec:	4615      	mov	r5, r2
 800a4ee:	461e      	mov	r6, r3
 800a4f0:	da0d      	bge.n	800a50e <__swhatbuf_r+0x2e>
 800a4f2:	89a3      	ldrh	r3, [r4, #12]
 800a4f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a4f8:	f04f 0100 	mov.w	r1, #0
 800a4fc:	bf0c      	ite	eq
 800a4fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a502:	2340      	movne	r3, #64	; 0x40
 800a504:	2000      	movs	r0, #0
 800a506:	6031      	str	r1, [r6, #0]
 800a508:	602b      	str	r3, [r5, #0]
 800a50a:	b016      	add	sp, #88	; 0x58
 800a50c:	bd70      	pop	{r4, r5, r6, pc}
 800a50e:	466a      	mov	r2, sp
 800a510:	f000 f848 	bl	800a5a4 <_fstat_r>
 800a514:	2800      	cmp	r0, #0
 800a516:	dbec      	blt.n	800a4f2 <__swhatbuf_r+0x12>
 800a518:	9901      	ldr	r1, [sp, #4]
 800a51a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a51e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a522:	4259      	negs	r1, r3
 800a524:	4159      	adcs	r1, r3
 800a526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a52a:	e7eb      	b.n	800a504 <__swhatbuf_r+0x24>

0800a52c <__smakebuf_r>:
 800a52c:	898b      	ldrh	r3, [r1, #12]
 800a52e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a530:	079d      	lsls	r5, r3, #30
 800a532:	4606      	mov	r6, r0
 800a534:	460c      	mov	r4, r1
 800a536:	d507      	bpl.n	800a548 <__smakebuf_r+0x1c>
 800a538:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a53c:	6023      	str	r3, [r4, #0]
 800a53e:	6123      	str	r3, [r4, #16]
 800a540:	2301      	movs	r3, #1
 800a542:	6163      	str	r3, [r4, #20]
 800a544:	b002      	add	sp, #8
 800a546:	bd70      	pop	{r4, r5, r6, pc}
 800a548:	ab01      	add	r3, sp, #4
 800a54a:	466a      	mov	r2, sp
 800a54c:	f7ff ffc8 	bl	800a4e0 <__swhatbuf_r>
 800a550:	9900      	ldr	r1, [sp, #0]
 800a552:	4605      	mov	r5, r0
 800a554:	4630      	mov	r0, r6
 800a556:	f7ff fbb5 	bl	8009cc4 <_malloc_r>
 800a55a:	b948      	cbnz	r0, 800a570 <__smakebuf_r+0x44>
 800a55c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a560:	059a      	lsls	r2, r3, #22
 800a562:	d4ef      	bmi.n	800a544 <__smakebuf_r+0x18>
 800a564:	f023 0303 	bic.w	r3, r3, #3
 800a568:	f043 0302 	orr.w	r3, r3, #2
 800a56c:	81a3      	strh	r3, [r4, #12]
 800a56e:	e7e3      	b.n	800a538 <__smakebuf_r+0xc>
 800a570:	89a3      	ldrh	r3, [r4, #12]
 800a572:	6020      	str	r0, [r4, #0]
 800a574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a578:	81a3      	strh	r3, [r4, #12]
 800a57a:	9b00      	ldr	r3, [sp, #0]
 800a57c:	6163      	str	r3, [r4, #20]
 800a57e:	9b01      	ldr	r3, [sp, #4]
 800a580:	6120      	str	r0, [r4, #16]
 800a582:	b15b      	cbz	r3, 800a59c <__smakebuf_r+0x70>
 800a584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a588:	4630      	mov	r0, r6
 800a58a:	f000 f81d 	bl	800a5c8 <_isatty_r>
 800a58e:	b128      	cbz	r0, 800a59c <__smakebuf_r+0x70>
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	f023 0303 	bic.w	r3, r3, #3
 800a596:	f043 0301 	orr.w	r3, r3, #1
 800a59a:	81a3      	strh	r3, [r4, #12]
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	431d      	orrs	r5, r3
 800a5a0:	81a5      	strh	r5, [r4, #12]
 800a5a2:	e7cf      	b.n	800a544 <__smakebuf_r+0x18>

0800a5a4 <_fstat_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4d07      	ldr	r5, [pc, #28]	; (800a5c4 <_fstat_r+0x20>)
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	4608      	mov	r0, r1
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	602b      	str	r3, [r5, #0]
 800a5b2:	f7f6 fe04 	bl	80011be <_fstat>
 800a5b6:	1c43      	adds	r3, r0, #1
 800a5b8:	d102      	bne.n	800a5c0 <_fstat_r+0x1c>
 800a5ba:	682b      	ldr	r3, [r5, #0]
 800a5bc:	b103      	cbz	r3, 800a5c0 <_fstat_r+0x1c>
 800a5be:	6023      	str	r3, [r4, #0]
 800a5c0:	bd38      	pop	{r3, r4, r5, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20004ddc 	.word	0x20004ddc

0800a5c8 <_isatty_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d06      	ldr	r5, [pc, #24]	; (800a5e4 <_isatty_r+0x1c>)
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	4608      	mov	r0, r1
 800a5d2:	602b      	str	r3, [r5, #0]
 800a5d4:	f7f6 fe03 	bl	80011de <_isatty>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	d102      	bne.n	800a5e2 <_isatty_r+0x1a>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	b103      	cbz	r3, 800a5e2 <_isatty_r+0x1a>
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	bd38      	pop	{r3, r4, r5, pc}
 800a5e4:	20004ddc 	.word	0x20004ddc

0800a5e8 <_sbrk_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4d06      	ldr	r5, [pc, #24]	; (800a604 <_sbrk_r+0x1c>)
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	4608      	mov	r0, r1
 800a5f2:	602b      	str	r3, [r5, #0]
 800a5f4:	f7f6 fe0c 	bl	8001210 <_sbrk>
 800a5f8:	1c43      	adds	r3, r0, #1
 800a5fa:	d102      	bne.n	800a602 <_sbrk_r+0x1a>
 800a5fc:	682b      	ldr	r3, [r5, #0]
 800a5fe:	b103      	cbz	r3, 800a602 <_sbrk_r+0x1a>
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	bd38      	pop	{r3, r4, r5, pc}
 800a604:	20004ddc 	.word	0x20004ddc

0800a608 <_init>:
 800a608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60a:	bf00      	nop
 800a60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a60e:	bc08      	pop	{r3}
 800a610:	469e      	mov	lr, r3
 800a612:	4770      	bx	lr

0800a614 <_fini>:
 800a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a616:	bf00      	nop
 800a618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a61a:	bc08      	pop	{r3}
 800a61c:	469e      	mov	lr, r3
 800a61e:	4770      	bx	lr
