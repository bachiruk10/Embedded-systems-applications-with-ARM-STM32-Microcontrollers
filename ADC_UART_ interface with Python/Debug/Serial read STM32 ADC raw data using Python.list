
Serial read STM32 ADC raw data using Python.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045a0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800474c  0800474c  0001474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800476c  0800476c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800476c  0800476c  0001476c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004774  08004774  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004778  08004778  00014778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800477c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001bc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f4db  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000022bd  00000000  00000000  0002f55a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e28  00000000  00000000  00031818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b1a  00000000  00000000  00032640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024d11  00000000  00000000  0003315a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010e82  00000000  00000000  00057e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e696d  00000000  00000000  00068ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ba4  00000000  00000000  0014f65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008f  00000000  00000000  00153200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004734 	.word	0x08004734

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004734 	.word	0x08004734

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fbc6 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f826 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f986 	bl	8000804 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f8:	f000 f95c 	bl	80007b4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004fc:	f000 f930 	bl	8000760 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000500:	f000 f88e 	bl	8000620 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000504:	f000 f8de 	bl	80006c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  // Clear timer update flag in case it is set at start
  if (__HAL_TIM_GET_FLAG(&htim2 , TIM_FLAG_UPDATE) != RESET)
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <main+0x4c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	691b      	ldr	r3, [r3, #16]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	2b01      	cmp	r3, #1
 8000514:	d104      	bne.n	8000520 <main+0x38>
  __HAL_TIM_CLEAR_FLAG(&htim2 , TIM_FLAG_UPDATE);
 8000516:	4b07      	ldr	r3, [pc, #28]	; (8000534 <main+0x4c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f06f 0201 	mvn.w	r2, #1
 800051e:	611a      	str	r2, [r3, #16]
  // Start timer in interrupt mode
  HAL_TIM_Base_Start(&htim2);
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <main+0x4c>)
 8000522:	f002 fd85 	bl	8003030 <HAL_TIM_Base_Start>

  /*Start ADC with DMA*/
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) ADCdata, length);
 8000526:	2201      	movs	r2, #1
 8000528:	4903      	ldr	r1, [pc, #12]	; (8000538 <main+0x50>)
 800052a:	4804      	ldr	r0, [pc, #16]	; (800053c <main+0x54>)
 800052c:	f000 fd6c 	bl	8001008 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x48>
 8000532:	bf00      	nop
 8000534:	200000d0 	.word	0x200000d0
 8000538:	200001c0 	.word	0x200001c0
 800053c:	20000028 	.word	0x20000028

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f004 f8c4 	bl	80046dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b2b      	ldr	r3, [pc, #172]	; (8000618 <SystemClock_Config+0xd8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a2a      	ldr	r2, [pc, #168]	; (8000618 <SystemClock_Config+0xd8>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b28      	ldr	r3, [pc, #160]	; (8000618 <SystemClock_Config+0xd8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <SystemClock_Config+0xdc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a24      	ldr	r2, [pc, #144]	; (800061c <SystemClock_Config+0xdc>)
 800058a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <SystemClock_Config+0xdc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005b4:	23b4      	movs	r3, #180	; 0xb4
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005bc:	2307      	movs	r3, #7
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 f84b 	bl	8002660 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d0:	f000 f976 	bl	80008c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005d4:	f001 fff4 	bl	80025c0 <HAL_PWREx_EnableOverDrive>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005de:	f000 f96f 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2105      	movs	r1, #5
 8000600:	4618      	mov	r0, r3
 8000602:	f002 faa5 	bl	8002b50 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800060c:	f000 f958 	bl	80008c0 <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	; 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000626:	463b      	mov	r3, r7
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000632:	4b22      	ldr	r3, [pc, #136]	; (80006bc <MX_ADC1_Init+0x9c>)
 8000634:	4a22      	ldr	r2, [pc, #136]	; (80006c0 <MX_ADC1_Init+0xa0>)
 8000636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000638:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_ADC1_Init+0x9c>)
 800063a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800063e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000640:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <MX_ADC1_Init+0x9c>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000646:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_ADC1_Init+0x9c>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_ADC1_Init+0x9c>)
 800064e:	2201      	movs	r2, #1
 8000650:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <MX_ADC1_Init+0x9c>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_ADC1_Init+0x9c>)
 800065c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000660:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000662:	4b16      	ldr	r3, [pc, #88]	; (80006bc <MX_ADC1_Init+0x9c>)
 8000664:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000668:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <MX_ADC1_Init+0x9c>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_ADC1_Init+0x9c>)
 8000672:	2201      	movs	r2, #1
 8000674:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_ADC1_Init+0x9c>)
 8000678:	2201      	movs	r2, #1
 800067a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_ADC1_Init+0x9c>)
 8000680:	2201      	movs	r2, #1
 8000682:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <MX_ADC1_Init+0x9c>)
 8000686:	f000 fb6b 	bl	8000d60 <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000690:	f000 f916 	bl	80008c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000694:	2305      	movs	r3, #5
 8000696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800069c:	2304      	movs	r3, #4
 800069e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_ADC1_Init+0x9c>)
 80006a6:	f000 fddd 	bl	8001264 <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80006b0:	f000 f906 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000028 	.word	0x20000028
 80006c0:	40012000 	.word	0x40012000

080006c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	463b      	mov	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MX_TIM2_Init+0x98>)
 80006e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000-1;
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_TIM2_Init+0x98>)
 80006ea:	f242 3227 	movw	r2, #8999	; 0x2327
 80006ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	; (800075c <MX_TIM2_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_TIM2_Init+0x98>)
 80006f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80006fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_TIM2_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_TIM2_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800070a:	4814      	ldr	r0, [pc, #80]	; (800075c <MX_TIM2_Init+0x98>)
 800070c:	f002 fc40 	bl	8002f90 <HAL_TIM_Base_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000716:	f000 f8d3 	bl	80008c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	4619      	mov	r1, r3
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_TIM2_Init+0x98>)
 8000728:	f002 fcea 	bl	8003100 <HAL_TIM_ConfigClockSource>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000732:	f000 f8c5 	bl	80008c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000736:	2320      	movs	r3, #32
 8000738:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800073e:	463b      	mov	r3, r7
 8000740:	4619      	mov	r1, r3
 8000742:	4806      	ldr	r0, [pc, #24]	; (800075c <MX_TIM2_Init+0x98>)
 8000744:	f002 feea 	bl	800351c <HAL_TIMEx_MasterConfigSynchronization>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800074e:	f000 f8b7 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000d0 	.word	0x200000d0

08000760 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_USART1_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 800076c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000798:	f002 ff3c 	bl	8003614 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f88d 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000118 	.word	0x20000118
 80007b0:	40011000 	.word	0x40011000

080007b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_DMA_Init+0x4c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <MX_DMA_Init+0x4c>)
 80007c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_DMA_Init+0x4c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2101      	movs	r1, #1
 80007da:	2038      	movs	r0, #56	; 0x38
 80007dc:	f001 f8d7 	bl	800198e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007e0:	2038      	movs	r0, #56	; 0x38
 80007e2:	f001 f8f0 	bl	80019c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 1, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2101      	movs	r1, #1
 80007ea:	2046      	movs	r0, #70	; 0x46
 80007ec:	f001 f8cf 	bl	800198e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80007f0:	2046      	movs	r0, #70	; 0x46
 80007f2:	f001 f8e8 	bl	80019c6 <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_GPIO_Init+0x80>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a18      	ldr	r2, [pc, #96]	; (8000884 <MX_GPIO_Init+0x80>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_GPIO_Init+0x80>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_GPIO_Init+0x80>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a11      	ldr	r2, [pc, #68]	; (8000884 <MX_GPIO_Init+0x80>)
 8000840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_GPIO_Init+0x80>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <MX_GPIO_Init+0x84>)
 800085a:	f001 fe7d 	bl	8002558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800085e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4619      	mov	r1, r3
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_GPIO_Init+0x84>)
 8000878:	f001 fcc2 	bl	8002200 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40021800 	.word	0x40021800

0800088c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	// Digital value
  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000898:	4806      	ldr	r0, [pc, #24]	; (80008b4 <HAL_ADC_ConvCpltCallback+0x28>)
 800089a:	f001 fe76 	bl	800258a <HAL_GPIO_TogglePin>



  HAL_UART_Transmit_DMA(&huart1, (uint8_t *) ADCdata, length);
 800089e:	2201      	movs	r2, #1
 80008a0:	4905      	ldr	r1, [pc, #20]	; (80008b8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <HAL_ADC_ConvCpltCallback+0x30>)
 80008a4:	f002 ff06 	bl	80036b4 <HAL_UART_Transmit_DMA>


  __NOP();
 80008a8:	bf00      	nop

}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021800 	.word	0x40021800
 80008b8:	200001c0 	.word	0x200001c0
 80008bc:	20000118 	.word	0x20000118

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <HAL_MspInit+0x4c>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_MspInit+0x4c>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800090a:	2006      	movs	r0, #6
 800090c:	f001 f834 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a33      	ldr	r2, [pc, #204]	; (8000a08 <HAL_ADC_MspInit+0xec>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d15f      	bne.n	80009fe <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b32      	ldr	r3, [pc, #200]	; (8000a0c <HAL_ADC_MspInit+0xf0>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a31      	ldr	r2, [pc, #196]	; (8000a0c <HAL_ADC_MspInit+0xf0>)
 8000948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b2f      	ldr	r3, [pc, #188]	; (8000a0c <HAL_ADC_MspInit+0xf0>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <HAL_ADC_MspInit+0xf0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a2a      	ldr	r2, [pc, #168]	; (8000a0c <HAL_ADC_MspInit+0xf0>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <HAL_ADC_MspInit+0xf0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000976:	2320      	movs	r3, #32
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097a:	2303      	movs	r3, #3
 800097c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	4821      	ldr	r0, [pc, #132]	; (8000a10 <HAL_ADC_MspInit+0xf4>)
 800098a:	f001 fc39 	bl	8002200 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800098e:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <HAL_ADC_MspInit+0xf8>)
 8000990:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <HAL_ADC_MspInit+0xfc>)
 8000992:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <HAL_ADC_MspInit+0xf8>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <HAL_ADC_MspInit+0xf8>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <HAL_ADC_MspInit+0xf8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <HAL_ADC_MspInit+0xf8>)
 80009a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <HAL_ADC_MspInit+0xf8>)
 80009b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009b6:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_ADC_MspInit+0xf8>)
 80009b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_ADC_MspInit+0xf8>)
 80009c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <HAL_ADC_MspInit+0xf8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <HAL_ADC_MspInit+0xf8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009d2:	4810      	ldr	r0, [pc, #64]	; (8000a14 <HAL_ADC_MspInit+0xf8>)
 80009d4:	f001 f812 	bl	80019fc <HAL_DMA_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80009de:	f7ff ff6f 	bl	80008c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <HAL_ADC_MspInit+0xf8>)
 80009e6:	639a      	str	r2, [r3, #56]	; 0x38
 80009e8:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <HAL_ADC_MspInit+0xf8>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2101      	movs	r1, #1
 80009f2:	2012      	movs	r0, #18
 80009f4:	f000 ffcb 	bl	800198e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009f8:	2012      	movs	r0, #18
 80009fa:	f000 ffe4 	bl	80019c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40012000 	.word	0x40012000
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020000 	.word	0x40020000
 8000a14:	20000070 	.word	0x20000070
 8000a18:	40026410 	.word	0x40026410

08000a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a2c:	d10d      	bne.n	8000a4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_TIM_Base_MspInit+0x3c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_TIM_Base_MspInit+0x3c>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_TIM_Base_MspInit+0x3c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a34      	ldr	r2, [pc, #208]	; (8000b4c <HAL_UART_MspInit+0xf0>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d162      	bne.n	8000b44 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <HAL_UART_MspInit+0xf4>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a32      	ldr	r2, [pc, #200]	; (8000b50 <HAL_UART_MspInit+0xf4>)
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b30      	ldr	r3, [pc, #192]	; (8000b50 <HAL_UART_MspInit+0xf4>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <HAL_UART_MspInit+0xf4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a2b      	ldr	r2, [pc, #172]	; (8000b50 <HAL_UART_MspInit+0xf4>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <HAL_UART_MspInit+0xf4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ab6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ac8:	2307      	movs	r3, #7
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4820      	ldr	r0, [pc, #128]	; (8000b54 <HAL_UART_MspInit+0xf8>)
 8000ad4:	f001 fb94 	bl	8002200 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <HAL_UART_MspInit+0xfc>)
 8000ada:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <HAL_UART_MspInit+0x100>)
 8000adc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <HAL_UART_MspInit+0xfc>)
 8000ae0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ae4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_UART_MspInit+0xfc>)
 8000ae8:	2240      	movs	r2, #64	; 0x40
 8000aea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <HAL_UART_MspInit+0xfc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_UART_MspInit+0xfc>)
 8000af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000af8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <HAL_UART_MspInit+0xfc>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_UART_MspInit+0xfc>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <HAL_UART_MspInit+0xfc>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_UART_MspInit+0xfc>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_UART_MspInit+0xfc>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b18:	480f      	ldr	r0, [pc, #60]	; (8000b58 <HAL_UART_MspInit+0xfc>)
 8000b1a:	f000 ff6f 	bl	80019fc <HAL_DMA_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000b24:	f7ff fecc 	bl	80008c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <HAL_UART_MspInit+0xfc>)
 8000b2c:	639a      	str	r2, [r3, #56]	; 0x38
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_UART_MspInit+0xfc>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2101      	movs	r1, #1
 8000b38:	2025      	movs	r0, #37	; 0x25
 8000b3a:	f000 ff28 	bl	800198e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b3e:	2025      	movs	r0, #37	; 0x25
 8000b40:	f000 ff41 	bl	80019c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40011000 	.word	0x40011000
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000
 8000b58:	20000160 	.word	0x20000160
 8000b5c:	400264b8 	.word	0x400264b8

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 f8b8 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <ADC_IRQHandler+0x10>)
 8000bba:	f000 f914 	bl	8000de6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000028 	.word	0x20000028

08000bc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <USART1_IRQHandler+0x10>)
 8000bce:	f002 fde1 	bl	8003794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000118 	.word	0x20000118

08000bdc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <DMA2_Stream0_IRQHandler+0x10>)
 8000be2:	f001 f8a3 	bl	8001d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000070 	.word	0x20000070

08000bf0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <DMA2_Stream7_IRQHandler+0x10>)
 8000bf6:	f001 f899 	bl	8001d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000160 	.word	0x20000160

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c2c:	f7ff ffea 	bl	8000c04 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480c      	ldr	r0, [pc, #48]	; (8000c64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c32:	490d      	ldr	r1, [pc, #52]	; (8000c68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c34:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c48:	4c0a      	ldr	r4, [pc, #40]	; (8000c74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f003 fd49 	bl	80046ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fc45 	bl	80004e8 <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c60:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c6c:	0800477c 	.word	0x0800477c
  ldr r2, =_sbss
 8000c70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c74:	200001c8 	.word	0x200001c8

08000c78 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <CAN1_RX0_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 fe67 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 f808 	bl	8000cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fe0c 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x54>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x58>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 fe7f 	bl	80019e2 <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00e      	b.n	8000d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	d80a      	bhi.n	8000d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f000 fe47 	bl	800198e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d00:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <HAL_InitTick+0x5c>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000000 	.word	0x20000000
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000004 	.word	0x20000004

08000d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_IncTick+0x20>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x24>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <HAL_IncTick+0x24>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008
 8000d44:	200001c4 	.word	0x200001c4

08000d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_GetTick+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	200001c4 	.word	0x200001c4

08000d60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e033      	b.n	8000dde <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d109      	bne.n	8000d92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fdcc 	bl	800091c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d118      	bne.n	8000dd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000da6:	f023 0302 	bic.w	r3, r3, #2
 8000daa:	f043 0202 	orr.w	r2, r3, #2
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 fb88 	bl	80014c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f023 0303 	bic.w	r3, r3, #3
 8000dc6:	f043 0201 	orr.w	r2, r3, #1
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	641a      	str	r2, [r3, #64]	; 0x40
 8000dce:	e001      	b.n	8000dd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	f003 0320 	and.w	r3, r3, #32
 8000e14:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d049      	beq.n	8000eb0 <HAL_ADC_IRQHandler+0xca>
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d046      	beq.n	8000eb0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f003 0310 	and.w	r3, r3, #16
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d105      	bne.n	8000e3a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d12b      	bne.n	8000ea0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d127      	bne.n	8000ea0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d006      	beq.n	8000e6c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d119      	bne.n	8000ea0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0220 	bic.w	r2, r2, #32
 8000e7a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d105      	bne.n	8000ea0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	f043 0201 	orr.w	r2, r3, #1
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff fcf3 	bl	800088c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f06f 0212 	mvn.w	r2, #18
 8000eae:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d057      	beq.n	8000f76 <HAL_ADC_IRQHandler+0x190>
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d054      	beq.n	8000f76 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 0310 	and.w	r3, r3, #16
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d139      	bne.n	8000f66 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d006      	beq.n	8000f0e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d12b      	bne.n	8000f66 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d124      	bne.n	8000f66 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d11d      	bne.n	8000f66 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d119      	bne.n	8000f66 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f40:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d105      	bne.n	8000f66 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f043 0201 	orr.w	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 fc2c 	bl	80017c4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f06f 020c 	mvn.w	r2, #12
 8000f74:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f84:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d017      	beq.n	8000fbc <HAL_ADC_IRQHandler+0x1d6>
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d014      	beq.n	8000fbc <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d10d      	bne.n	8000fbc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f945 	bl	800123c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f06f 0201 	mvn.w	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0320 	and.w	r3, r3, #32
 8000fc2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fca:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d015      	beq.n	8000ffe <HAL_ADC_IRQHandler+0x218>
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d012      	beq.n	8000ffe <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fdc:	f043 0202 	orr.w	r2, r3, #2
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f06f 0220 	mvn.w	r2, #32
 8000fec:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f92e 	bl	8001250 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f06f 0220 	mvn.w	r2, #32
 8000ffc:	601a      	str	r2, [r3, #0]
  }
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Start_DMA+0x1e>
 8001022:	2302      	movs	r3, #2
 8001024:	e0e9      	b.n	80011fa <HAL_ADC_Start_DMA+0x1f2>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	2b01      	cmp	r3, #1
 800103a:	d018      	beq.n	800106e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0201 	orr.w	r2, r2, #1
 800104a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800104c:	4b6d      	ldr	r3, [pc, #436]	; (8001204 <HAL_ADC_Start_DMA+0x1fc>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a6d      	ldr	r2, [pc, #436]	; (8001208 <HAL_ADC_Start_DMA+0x200>)
 8001052:	fba2 2303 	umull	r2, r3, r2, r3
 8001056:	0c9a      	lsrs	r2, r3, #18
 8001058:	4613      	mov	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	4413      	add	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001060:	e002      	b.n	8001068 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	3b01      	subs	r3, #1
 8001066:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f9      	bne.n	8001062 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800107c:	d107      	bne.n	800108e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800108c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b01      	cmp	r3, #1
 800109a:	f040 80a1 	bne.w	80011e0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010a6:	f023 0301 	bic.w	r3, r3, #1
 80010aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d007      	beq.n	80010d0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010dc:	d106      	bne.n	80010ec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f023 0206 	bic.w	r2, r3, #6
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	645a      	str	r2, [r3, #68]	; 0x44
 80010ea:	e002      	b.n	80010f2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010fa:	4b44      	ldr	r3, [pc, #272]	; (800120c <HAL_ADC_Start_DMA+0x204>)
 80010fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001102:	4a43      	ldr	r2, [pc, #268]	; (8001210 <HAL_ADC_Start_DMA+0x208>)
 8001104:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800110a:	4a42      	ldr	r2, [pc, #264]	; (8001214 <HAL_ADC_Start_DMA+0x20c>)
 800110c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001112:	4a41      	ldr	r2, [pc, #260]	; (8001218 <HAL_ADC_Start_DMA+0x210>)
 8001114:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800111e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800112e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800113e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	334c      	adds	r3, #76	; 0x4c
 800114a:	4619      	mov	r1, r3
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f000 fd02 	bl	8001b58 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 031f 	and.w	r3, r3, #31
 800115c:	2b00      	cmp	r3, #0
 800115e:	d12a      	bne.n	80011b6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a2d      	ldr	r2, [pc, #180]	; (800121c <HAL_ADC_Start_DMA+0x214>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d015      	beq.n	8001196 <HAL_ADC_Start_DMA+0x18e>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a2c      	ldr	r2, [pc, #176]	; (8001220 <HAL_ADC_Start_DMA+0x218>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d105      	bne.n	8001180 <HAL_ADC_Start_DMA+0x178>
 8001174:	4b25      	ldr	r3, [pc, #148]	; (800120c <HAL_ADC_Start_DMA+0x204>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 031f 	and.w	r3, r3, #31
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00a      	beq.n	8001196 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a27      	ldr	r2, [pc, #156]	; (8001224 <HAL_ADC_Start_DMA+0x21c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d136      	bne.n	80011f8 <HAL_ADC_Start_DMA+0x1f0>
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_ADC_Start_DMA+0x204>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	2b00      	cmp	r3, #0
 8001194:	d130      	bne.n	80011f8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d129      	bne.n	80011f8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	e020      	b.n	80011f8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a18      	ldr	r2, [pc, #96]	; (800121c <HAL_ADC_Start_DMA+0x214>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d11b      	bne.n	80011f8 <HAL_ADC_Start_DMA+0x1f0>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d114      	bne.n	80011f8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	e00b      	b.n	80011f8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f043 0210 	orr.w	r2, r3, #16
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f0:	f043 0201 	orr.w	r2, r3, #1
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000000 	.word	0x20000000
 8001208:	431bde83 	.word	0x431bde83
 800120c:	40012300 	.word	0x40012300
 8001210:	080016c1 	.word	0x080016c1
 8001214:	0800177b 	.word	0x0800177b
 8001218:	08001797 	.word	0x08001797
 800121c:	40012000 	.word	0x40012000
 8001220:	40012100 	.word	0x40012100
 8001224:	40012200 	.word	0x40012200

08001228 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1c>
 800127c:	2302      	movs	r3, #2
 800127e:	e113      	b.n	80014a8 <HAL_ADC_ConfigChannel+0x244>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b09      	cmp	r3, #9
 800128e:	d925      	bls.n	80012dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68d9      	ldr	r1, [r3, #12]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	3b1e      	subs	r3, #30
 80012a6:	2207      	movs	r2, #7
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43da      	mvns	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	400a      	ands	r2, r1
 80012b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68d9      	ldr	r1, [r3, #12]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	4603      	mov	r3, r0
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4403      	add	r3, r0
 80012ce:	3b1e      	subs	r3, #30
 80012d0:	409a      	lsls	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	e022      	b.n	8001322 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6919      	ldr	r1, [r3, #16]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	2207      	movs	r2, #7
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	400a      	ands	r2, r1
 80012fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6919      	ldr	r1, [r3, #16]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	b29b      	uxth	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	4603      	mov	r3, r0
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4403      	add	r3, r0
 8001318:	409a      	lsls	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b06      	cmp	r3, #6
 8001328:	d824      	bhi.n	8001374 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	3b05      	subs	r3, #5
 800133c:	221f      	movs	r2, #31
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	400a      	ands	r2, r1
 800134a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	3b05      	subs	r3, #5
 8001366:	fa00 f203 	lsl.w	r2, r0, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
 8001372:	e04c      	b.n	800140e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b0c      	cmp	r3, #12
 800137a:	d824      	bhi.n	80013c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	3b23      	subs	r3, #35	; 0x23
 800138e:	221f      	movs	r2, #31
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43da      	mvns	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	400a      	ands	r2, r1
 800139c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	3b23      	subs	r3, #35	; 0x23
 80013b8:	fa00 f203 	lsl.w	r2, r0, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
 80013c4:	e023      	b.n	800140e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	3b41      	subs	r3, #65	; 0x41
 80013d8:	221f      	movs	r2, #31
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	400a      	ands	r2, r1
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	3b41      	subs	r3, #65	; 0x41
 8001402:	fa00 f203 	lsl.w	r2, r0, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800140e:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <HAL_ADC_ConfigChannel+0x250>)
 8001410:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <HAL_ADC_ConfigChannel+0x254>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d10f      	bne.n	800143c <HAL_ADC_ConfigChannel+0x1d8>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b12      	cmp	r3, #18
 8001422:	d10b      	bne.n	800143c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_ADC_ConfigChannel+0x254>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d12b      	bne.n	800149e <HAL_ADC_ConfigChannel+0x23a>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <HAL_ADC_ConfigChannel+0x258>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d003      	beq.n	8001458 <HAL_ADC_ConfigChannel+0x1f4>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b11      	cmp	r3, #17
 8001456:	d122      	bne.n	800149e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_ADC_ConfigChannel+0x258>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d111      	bne.n	800149e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_ADC_ConfigChannel+0x25c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <HAL_ADC_ConfigChannel+0x260>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	0c9a      	lsrs	r2, r3, #18
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001490:	e002      	b.n	8001498 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3b01      	subs	r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f9      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	40012300 	.word	0x40012300
 80014b8:	40012000 	.word	0x40012000
 80014bc:	10000012 	.word	0x10000012
 80014c0:	20000000 	.word	0x20000000
 80014c4:	431bde83 	.word	0x431bde83

080014c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d0:	4b79      	ldr	r3, [pc, #484]	; (80016b8 <ADC_Init+0x1f0>)
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6859      	ldr	r1, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	021a      	lsls	r2, r3, #8
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001520:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001542:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6899      	ldr	r1, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	4a58      	ldr	r2, [pc, #352]	; (80016bc <ADC_Init+0x1f4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d022      	beq.n	80015a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800156e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6899      	ldr	r1, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001590:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6899      	ldr	r1, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	e00f      	b.n	80015c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0202 	bic.w	r2, r2, #2
 80015d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6899      	ldr	r1, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7e1b      	ldrb	r3, [r3, #24]
 80015e0:	005a      	lsls	r2, r3, #1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01b      	beq.n	800162c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001602:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001612:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6859      	ldr	r1, [r3, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	3b01      	subs	r3, #1
 8001620:	035a      	lsls	r2, r3, #13
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	e007      	b.n	800163c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800163a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	3b01      	subs	r3, #1
 8001658:	051a      	lsls	r2, r3, #20
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6899      	ldr	r1, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800167e:	025a      	lsls	r2, r3, #9
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6899      	ldr	r1, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	029a      	lsls	r2, r3, #10
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	609a      	str	r2, [r3, #8]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	40012300 	.word	0x40012300
 80016bc:	0f000001 	.word	0x0f000001

080016c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d13c      	bne.n	8001754 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d12b      	bne.n	800174c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d127      	bne.n	800174c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001706:	2b00      	cmp	r3, #0
 8001708:	d006      	beq.n	8001718 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001714:	2b00      	cmp	r3, #0
 8001716:	d119      	bne.n	800174c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0220 	bic.w	r2, r2, #32
 8001726:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d105      	bne.n	800174c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f043 0201 	orr.w	r2, r3, #1
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7ff f89d 	bl	800088c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001752:	e00e      	b.n	8001772 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff fd75 	bl	8001250 <HAL_ADC_ErrorCallback>
}
 8001766:	e004      	b.n	8001772 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	4798      	blx	r3
}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001786:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f7ff fd4d 	bl	8001228 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b084      	sub	sp, #16
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2240      	movs	r2, #64	; 0x40
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f043 0204 	orr.w	r2, r3, #4
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f7ff fd4a 	bl	8001250 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <__NVIC_SetPriorityGrouping+0x44>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f4:	4013      	ands	r3, r2
 80017f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180a:	4a04      	ldr	r2, [pc, #16]	; (800181c <__NVIC_SetPriorityGrouping+0x44>)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	60d3      	str	r3, [r2, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <__NVIC_GetPriorityGrouping+0x18>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	f003 0307 	and.w	r3, r3, #7
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	2b00      	cmp	r3, #0
 800184c:	db0b      	blt.n	8001866 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	f003 021f 	and.w	r2, r3, #31
 8001854:	4907      	ldr	r1, [pc, #28]	; (8001874 <__NVIC_EnableIRQ+0x38>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	2001      	movs	r0, #1
 800185e:	fa00 f202 	lsl.w	r2, r0, r2
 8001862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000e100 	.word	0xe000e100

08001878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	6039      	str	r1, [r7, #0]
 8001882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	db0a      	blt.n	80018a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	490c      	ldr	r1, [pc, #48]	; (80018c4 <__NVIC_SetPriority+0x4c>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	0112      	lsls	r2, r2, #4
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	440b      	add	r3, r1
 800189c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a0:	e00a      	b.n	80018b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4908      	ldr	r1, [pc, #32]	; (80018c8 <__NVIC_SetPriority+0x50>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	3b04      	subs	r3, #4
 80018b0:	0112      	lsls	r2, r2, #4
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	440b      	add	r3, r1
 80018b6:	761a      	strb	r2, [r3, #24]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000e100 	.word	0xe000e100
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b089      	sub	sp, #36	; 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f1c3 0307 	rsb	r3, r3, #7
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	bf28      	it	cs
 80018ea:	2304      	movcs	r3, #4
 80018ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3304      	adds	r3, #4
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	d902      	bls.n	80018fc <NVIC_EncodePriority+0x30>
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3b03      	subs	r3, #3
 80018fa:	e000      	b.n	80018fe <NVIC_EncodePriority+0x32>
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	f04f 32ff 	mov.w	r2, #4294967295
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	401a      	ands	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001914:	f04f 31ff 	mov.w	r1, #4294967295
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	43d9      	mvns	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	4313      	orrs	r3, r2
         );
}
 8001926:	4618      	mov	r0, r3
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001944:	d301      	bcc.n	800194a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001946:	2301      	movs	r3, #1
 8001948:	e00f      	b.n	800196a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <SysTick_Config+0x40>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001952:	210f      	movs	r1, #15
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f7ff ff8e 	bl	8001878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <SysTick_Config+0x40>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001962:	4b04      	ldr	r3, [pc, #16]	; (8001974 <SysTick_Config+0x40>)
 8001964:	2207      	movs	r2, #7
 8001966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	e000e010 	.word	0xe000e010

08001978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff29 	bl	80017d8 <__NVIC_SetPriorityGrouping>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a0:	f7ff ff3e 	bl	8001820 <__NVIC_GetPriorityGrouping>
 80019a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	f7ff ff8e 	bl	80018cc <NVIC_EncodePriority>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff5d 	bl	8001878 <__NVIC_SetPriority>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff31 	bl	800183c <__NVIC_EnableIRQ>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ffa2 	bl	8001934 <SysTick_Config>
 80019f0:	4603      	mov	r3, r0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff f99e 	bl	8000d48 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e099      	b.n	8001b4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0201 	bic.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a38:	e00f      	b.n	8001a5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a3a:	f7ff f985 	bl	8000d48 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b05      	cmp	r3, #5
 8001a46:	d908      	bls.n	8001a5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2203      	movs	r2, #3
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e078      	b.n	8001b4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1e8      	bne.n	8001a3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	4b38      	ldr	r3, [pc, #224]	; (8001b54 <HAL_DMA_Init+0x158>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d107      	bne.n	8001ac4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	4313      	orrs	r3, r2
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f023 0307 	bic.w	r3, r3, #7
 8001ada:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d117      	bne.n	8001b1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00e      	beq.n	8001b1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fb01 	bl	8002108 <DMA_CheckFifoParam>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2240      	movs	r2, #64	; 0x40
 8001b10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e016      	b.n	8001b4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 fab8 	bl	800209c <DMA_CalcBaseAndBitshift>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b34:	223f      	movs	r2, #63	; 0x3f
 8001b36:	409a      	lsls	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	f010803f 	.word	0xf010803f

08001b58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <HAL_DMA_Start_IT+0x26>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e040      	b.n	8001c00 <HAL_DMA_Start_IT+0xa8>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d12f      	bne.n	8001bf2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2202      	movs	r2, #2
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 fa4a 	bl	8002040 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb0:	223f      	movs	r2, #63	; 0x3f
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0216 	orr.w	r2, r2, #22
 8001bc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d007      	beq.n	8001be0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0208 	orr.w	r2, r2, #8
 8001bde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0201 	orr.w	r2, r2, #1
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e005      	b.n	8001bfe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c16:	f7ff f897 	bl	8000d48 <HAL_GetTick>
 8001c1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d008      	beq.n	8001c3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e052      	b.n	8001ce0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0216 	bic.w	r2, r2, #22
 8001c48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d103      	bne.n	8001c6a <HAL_DMA_Abort+0x62>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d007      	beq.n	8001c7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0208 	bic.w	r2, r2, #8
 8001c78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0201 	bic.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c8a:	e013      	b.n	8001cb4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c8c:	f7ff f85c 	bl	8000d48 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b05      	cmp	r3, #5
 8001c98:	d90c      	bls.n	8001cb4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e015      	b.n	8001ce0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1e4      	bne.n	8001c8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	223f      	movs	r2, #63	; 0x3f
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d004      	beq.n	8001d06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00c      	b.n	8001d20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2205      	movs	r2, #5
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0201 	bic.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d38:	4b8e      	ldr	r3, [pc, #568]	; (8001f74 <HAL_DMA_IRQHandler+0x248>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a8e      	ldr	r2, [pc, #568]	; (8001f78 <HAL_DMA_IRQHandler+0x24c>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	0a9b      	lsrs	r3, r3, #10
 8001d44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d56:	2208      	movs	r2, #8
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d01a      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d013      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0204 	bic.w	r2, r2, #4
 8001d7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d84:	2208      	movs	r2, #8
 8001d86:	409a      	lsls	r2, r3
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d90:	f043 0201 	orr.w	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d012      	beq.n	8001dce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dba:	2201      	movs	r2, #1
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc6:	f043 0202 	orr.w	r2, r3, #2
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d012      	beq.n	8001e04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00b      	beq.n	8001e04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	2204      	movs	r2, #4
 8001df2:	409a      	lsls	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	f043 0204 	orr.w	r2, r3, #4
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e08:	2210      	movs	r2, #16
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d043      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d03c      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	2210      	movs	r2, #16
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d018      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d108      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d024      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	4798      	blx	r3
 8001e5a:	e01f      	b.n	8001e9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01b      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
 8001e6c:	e016      	b.n	8001e9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d107      	bne.n	8001e8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0208 	bic.w	r2, r2, #8
 8001e8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 808f 	beq.w	8001fcc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8087 	beq.w	8001fcc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b05      	cmp	r3, #5
 8001ed4:	d136      	bne.n	8001f44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0216 	bic.w	r2, r2, #22
 8001ee4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ef4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d103      	bne.n	8001f06 <HAL_DMA_IRQHandler+0x1da>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d007      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0208 	bic.w	r2, r2, #8
 8001f14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1a:	223f      	movs	r2, #63	; 0x3f
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d07e      	beq.n	8002038 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	4798      	blx	r3
        }
        return;
 8001f42:	e079      	b.n	8002038 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01d      	beq.n	8001f8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10d      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d031      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	4798      	blx	r3
 8001f70:	e02c      	b.n	8001fcc <HAL_DMA_IRQHandler+0x2a0>
 8001f72:	bf00      	nop
 8001f74:	20000000 	.word	0x20000000
 8001f78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d023      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	4798      	blx	r3
 8001f8c:	e01e      	b.n	8001fcc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10f      	bne.n	8001fbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0210 	bic.w	r2, r2, #16
 8001faa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d032      	beq.n	800203a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d022      	beq.n	8002026 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2205      	movs	r2, #5
 8001fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	429a      	cmp	r2, r3
 8002002:	d307      	bcc.n	8002014 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f2      	bne.n	8001ff8 <HAL_DMA_IRQHandler+0x2cc>
 8002012:	e000      	b.n	8002016 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002014:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
 8002036:	e000      	b.n	800203a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002038:	bf00      	nop
    }
  }
}
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800205c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b40      	cmp	r3, #64	; 0x40
 800206c:	d108      	bne.n	8002080 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800207e:	e007      	b.n	8002090 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	60da      	str	r2, [r3, #12]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	3b10      	subs	r3, #16
 80020ac:	4a14      	ldr	r2, [pc, #80]	; (8002100 <DMA_CalcBaseAndBitshift+0x64>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020b6:	4a13      	ldr	r2, [pc, #76]	; (8002104 <DMA_CalcBaseAndBitshift+0x68>)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4413      	add	r3, r2
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d909      	bls.n	80020de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020d2:	f023 0303 	bic.w	r3, r3, #3
 80020d6:	1d1a      	adds	r2, r3, #4
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	659a      	str	r2, [r3, #88]	; 0x58
 80020dc:	e007      	b.n	80020ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020e6:	f023 0303 	bic.w	r3, r3, #3
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	aaaaaaab 	.word	0xaaaaaaab
 8002104:	08004764 	.word	0x08004764

08002108 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d11f      	bne.n	8002162 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d856      	bhi.n	80021d6 <DMA_CheckFifoParam+0xce>
 8002128:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <DMA_CheckFifoParam+0x28>)
 800212a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212e:	bf00      	nop
 8002130:	08002141 	.word	0x08002141
 8002134:	08002153 	.word	0x08002153
 8002138:	08002141 	.word	0x08002141
 800213c:	080021d7 	.word	0x080021d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d046      	beq.n	80021da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002150:	e043      	b.n	80021da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800215a:	d140      	bne.n	80021de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002160:	e03d      	b.n	80021de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800216a:	d121      	bne.n	80021b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d837      	bhi.n	80021e2 <DMA_CheckFifoParam+0xda>
 8002172:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <DMA_CheckFifoParam+0x70>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	08002189 	.word	0x08002189
 800217c:	0800218f 	.word	0x0800218f
 8002180:	08002189 	.word	0x08002189
 8002184:	080021a1 	.word	0x080021a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
      break;
 800218c:	e030      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d025      	beq.n	80021e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800219e:	e022      	b.n	80021e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021a8:	d11f      	bne.n	80021ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021ae:	e01c      	b.n	80021ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d903      	bls.n	80021be <DMA_CheckFifoParam+0xb6>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d003      	beq.n	80021c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021bc:	e018      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]
      break;
 80021c2:	e015      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00e      	beq.n	80021ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
      break;
 80021d4:	e00b      	b.n	80021ee <DMA_CheckFifoParam+0xe6>
      break;
 80021d6:	bf00      	nop
 80021d8:	e00a      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
      break;
 80021da:	bf00      	nop
 80021dc:	e008      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
      break;
 80021de:	bf00      	nop
 80021e0:	e006      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
      break;
 80021e2:	bf00      	nop
 80021e4:	e004      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
      break;
 80021e6:	bf00      	nop
 80021e8:	e002      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80021ea:	bf00      	nop
 80021ec:	e000      	b.n	80021f0 <DMA_CheckFifoParam+0xe8>
      break;
 80021ee:	bf00      	nop
    }
  } 
  
  return status; 
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop

08002200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
 800221a:	e177      	b.n	800250c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800221c:	2201      	movs	r2, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4013      	ands	r3, r2
 800222e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	429a      	cmp	r2, r3
 8002236:	f040 8166 	bne.w	8002506 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	2b01      	cmp	r3, #1
 8002244:	d005      	beq.n	8002252 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224e:	2b02      	cmp	r3, #2
 8002250:	d130      	bne.n	80022b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	2203      	movs	r2, #3
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002288:	2201      	movs	r2, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 0201 	and.w	r2, r3, #1
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d017      	beq.n	80022f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	2203      	movs	r2, #3
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d123      	bne.n	8002344 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	08da      	lsrs	r2, r3, #3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3208      	adds	r2, #8
 8002304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	220f      	movs	r2, #15
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	08da      	lsrs	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3208      	adds	r2, #8
 800233e:	69b9      	ldr	r1, [r7, #24]
 8002340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	2203      	movs	r2, #3
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0203 	and.w	r2, r3, #3
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80c0 	beq.w	8002506 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b66      	ldr	r3, [pc, #408]	; (8002524 <HAL_GPIO_Init+0x324>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	4a65      	ldr	r2, [pc, #404]	; (8002524 <HAL_GPIO_Init+0x324>)
 8002390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002394:	6453      	str	r3, [r2, #68]	; 0x44
 8002396:	4b63      	ldr	r3, [pc, #396]	; (8002524 <HAL_GPIO_Init+0x324>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a2:	4a61      	ldr	r2, [pc, #388]	; (8002528 <HAL_GPIO_Init+0x328>)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	3302      	adds	r3, #2
 80023aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	220f      	movs	r2, #15
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_GPIO_Init+0x32c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d037      	beq.n	800243e <HAL_GPIO_Init+0x23e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a57      	ldr	r2, [pc, #348]	; (8002530 <HAL_GPIO_Init+0x330>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d031      	beq.n	800243a <HAL_GPIO_Init+0x23a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a56      	ldr	r2, [pc, #344]	; (8002534 <HAL_GPIO_Init+0x334>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d02b      	beq.n	8002436 <HAL_GPIO_Init+0x236>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a55      	ldr	r2, [pc, #340]	; (8002538 <HAL_GPIO_Init+0x338>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d025      	beq.n	8002432 <HAL_GPIO_Init+0x232>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a54      	ldr	r2, [pc, #336]	; (800253c <HAL_GPIO_Init+0x33c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d01f      	beq.n	800242e <HAL_GPIO_Init+0x22e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a53      	ldr	r2, [pc, #332]	; (8002540 <HAL_GPIO_Init+0x340>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d019      	beq.n	800242a <HAL_GPIO_Init+0x22a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_GPIO_Init+0x344>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_GPIO_Init+0x226>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a51      	ldr	r2, [pc, #324]	; (8002548 <HAL_GPIO_Init+0x348>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00d      	beq.n	8002422 <HAL_GPIO_Init+0x222>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a50      	ldr	r2, [pc, #320]	; (800254c <HAL_GPIO_Init+0x34c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d007      	beq.n	800241e <HAL_GPIO_Init+0x21e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4f      	ldr	r2, [pc, #316]	; (8002550 <HAL_GPIO_Init+0x350>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_GPIO_Init+0x21a>
 8002416:	2309      	movs	r3, #9
 8002418:	e012      	b.n	8002440 <HAL_GPIO_Init+0x240>
 800241a:	230a      	movs	r3, #10
 800241c:	e010      	b.n	8002440 <HAL_GPIO_Init+0x240>
 800241e:	2308      	movs	r3, #8
 8002420:	e00e      	b.n	8002440 <HAL_GPIO_Init+0x240>
 8002422:	2307      	movs	r3, #7
 8002424:	e00c      	b.n	8002440 <HAL_GPIO_Init+0x240>
 8002426:	2306      	movs	r3, #6
 8002428:	e00a      	b.n	8002440 <HAL_GPIO_Init+0x240>
 800242a:	2305      	movs	r3, #5
 800242c:	e008      	b.n	8002440 <HAL_GPIO_Init+0x240>
 800242e:	2304      	movs	r3, #4
 8002430:	e006      	b.n	8002440 <HAL_GPIO_Init+0x240>
 8002432:	2303      	movs	r3, #3
 8002434:	e004      	b.n	8002440 <HAL_GPIO_Init+0x240>
 8002436:	2302      	movs	r3, #2
 8002438:	e002      	b.n	8002440 <HAL_GPIO_Init+0x240>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_GPIO_Init+0x240>
 800243e:	2300      	movs	r3, #0
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	f002 0203 	and.w	r2, r2, #3
 8002446:	0092      	lsls	r2, r2, #2
 8002448:	4093      	lsls	r3, r2
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002450:	4935      	ldr	r1, [pc, #212]	; (8002528 <HAL_GPIO_Init+0x328>)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245e:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <HAL_GPIO_Init+0x354>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002482:	4a34      	ldr	r2, [pc, #208]	; (8002554 <HAL_GPIO_Init+0x354>)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002488:	4b32      	ldr	r3, [pc, #200]	; (8002554 <HAL_GPIO_Init+0x354>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024ac:	4a29      	ldr	r2, [pc, #164]	; (8002554 <HAL_GPIO_Init+0x354>)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024b2:	4b28      	ldr	r3, [pc, #160]	; (8002554 <HAL_GPIO_Init+0x354>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024d6:	4a1f      	ldr	r2, [pc, #124]	; (8002554 <HAL_GPIO_Init+0x354>)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_GPIO_Init+0x354>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002500:	4a14      	ldr	r2, [pc, #80]	; (8002554 <HAL_GPIO_Init+0x354>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3301      	adds	r3, #1
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	2b0f      	cmp	r3, #15
 8002510:	f67f ae84 	bls.w	800221c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop
 8002518:	3724      	adds	r7, #36	; 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	40013800 	.word	0x40013800
 800252c:	40020000 	.word	0x40020000
 8002530:	40020400 	.word	0x40020400
 8002534:	40020800 	.word	0x40020800
 8002538:	40020c00 	.word	0x40020c00
 800253c:	40021000 	.word	0x40021000
 8002540:	40021400 	.word	0x40021400
 8002544:	40021800 	.word	0x40021800
 8002548:	40021c00 	.word	0x40021c00
 800254c:	40022000 	.word	0x40022000
 8002550:	40022400 	.word	0x40022400
 8002554:	40013c00 	.word	0x40013c00

08002558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	807b      	strh	r3, [r7, #2]
 8002564:	4613      	mov	r3, r2
 8002566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002568:	787b      	ldrb	r3, [r7, #1]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256e:	887a      	ldrh	r2, [r7, #2]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002574:	e003      	b.n	800257e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002576:	887b      	ldrh	r3, [r7, #2]
 8002578:	041a      	lsls	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	619a      	str	r2, [r3, #24]
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800258a:	b480      	push	{r7}
 800258c:	b085      	sub	sp, #20
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800259c:	887a      	ldrh	r2, [r7, #2]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4013      	ands	r3, r2
 80025a2:	041a      	lsls	r2, r3, #16
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	43d9      	mvns	r1, r3
 80025a8:	887b      	ldrh	r3, [r7, #2]
 80025aa:	400b      	ands	r3, r1
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	619a      	str	r2, [r3, #24]
}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	4b20      	ldr	r3, [pc, #128]	; (8002650 <HAL_PWREx_EnableOverDrive+0x90>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a1f      	ldr	r2, [pc, #124]	; (8002650 <HAL_PWREx_EnableOverDrive+0x90>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_PWREx_EnableOverDrive+0x90>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025e6:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_PWREx_EnableOverDrive+0x94>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025ec:	f7fe fbac 	bl	8000d48 <HAL_GetTick>
 80025f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025f2:	e009      	b.n	8002608 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025f4:	f7fe fba8 	bl	8000d48 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002602:	d901      	bls.n	8002608 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e01f      	b.n	8002648 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002608:	4b13      	ldr	r3, [pc, #76]	; (8002658 <HAL_PWREx_EnableOverDrive+0x98>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002614:	d1ee      	bne.n	80025f4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002618:	2201      	movs	r2, #1
 800261a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800261c:	f7fe fb94 	bl	8000d48 <HAL_GetTick>
 8002620:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002622:	e009      	b.n	8002638 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002624:	f7fe fb90 	bl	8000d48 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002632:	d901      	bls.n	8002638 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e007      	b.n	8002648 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002638:	4b07      	ldr	r3, [pc, #28]	; (8002658 <HAL_PWREx_EnableOverDrive+0x98>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002644:	d1ee      	bne.n	8002624 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800
 8002654:	420e0040 	.word	0x420e0040
 8002658:	40007000 	.word	0x40007000
 800265c:	420e0044 	.word	0x420e0044

08002660 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e267      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d075      	beq.n	800276a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800267e:	4b88      	ldr	r3, [pc, #544]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b04      	cmp	r3, #4
 8002688:	d00c      	beq.n	80026a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800268a:	4b85      	ldr	r3, [pc, #532]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002692:	2b08      	cmp	r3, #8
 8002694:	d112      	bne.n	80026bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002696:	4b82      	ldr	r3, [pc, #520]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026a2:	d10b      	bne.n	80026bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	4b7e      	ldr	r3, [pc, #504]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d05b      	beq.n	8002768 <HAL_RCC_OscConfig+0x108>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d157      	bne.n	8002768 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e242      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c4:	d106      	bne.n	80026d4 <HAL_RCC_OscConfig+0x74>
 80026c6:	4b76      	ldr	r3, [pc, #472]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a75      	ldr	r2, [pc, #468]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e01d      	b.n	8002710 <HAL_RCC_OscConfig+0xb0>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x98>
 80026de:	4b70      	ldr	r3, [pc, #448]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a6f      	ldr	r2, [pc, #444]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b6d      	ldr	r3, [pc, #436]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a6c      	ldr	r2, [pc, #432]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e00b      	b.n	8002710 <HAL_RCC_OscConfig+0xb0>
 80026f8:	4b69      	ldr	r3, [pc, #420]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a68      	ldr	r2, [pc, #416]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80026fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	4b66      	ldr	r3, [pc, #408]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a65      	ldr	r2, [pc, #404]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 800270a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d013      	beq.n	8002740 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002718:	f7fe fb16 	bl	8000d48 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002720:	f7fe fb12 	bl	8000d48 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	; 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e207      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	4b5b      	ldr	r3, [pc, #364]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0xc0>
 800273e:	e014      	b.n	800276a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002740:	f7fe fb02 	bl	8000d48 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002748:	f7fe fafe 	bl	8000d48 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e1f3      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275a:	4b51      	ldr	r3, [pc, #324]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0xe8>
 8002766:	e000      	b.n	800276a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d063      	beq.n	800283e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002776:	4b4a      	ldr	r3, [pc, #296]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002782:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800278a:	2b08      	cmp	r3, #8
 800278c:	d11c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278e:	4b44      	ldr	r3, [pc, #272]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d116      	bne.n	80027c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279a:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_RCC_OscConfig+0x152>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e1c7      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b2:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4937      	ldr	r1, [pc, #220]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c6:	e03a      	b.n	800283e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d0:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <HAL_RCC_OscConfig+0x244>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fab7 	bl	8000d48 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027de:	f7fe fab3 	bl	8000d48 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e1a8      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f0:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fc:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4925      	ldr	r1, [pc, #148]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 800280c:	4313      	orrs	r3, r2
 800280e:	600b      	str	r3, [r1, #0]
 8002810:	e015      	b.n	800283e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002812:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_RCC_OscConfig+0x244>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe fa96 	bl	8000d48 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002820:	f7fe fa92 	bl	8000d48 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e187      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002832:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d036      	beq.n	80028b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d016      	beq.n	8002880 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <HAL_RCC_OscConfig+0x248>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7fe fa76 	bl	8000d48 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002860:	f7fe fa72 	bl	8000d48 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e167      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_OscConfig+0x240>)
 8002874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x200>
 800287e:	e01b      	b.n	80028b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_RCC_OscConfig+0x248>)
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002886:	f7fe fa5f 	bl	8000d48 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288c:	e00e      	b.n	80028ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288e:	f7fe fa5b 	bl	8000d48 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d907      	bls.n	80028ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e150      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
 80028a0:	40023800 	.word	0x40023800
 80028a4:	42470000 	.word	0x42470000
 80028a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ac:	4b88      	ldr	r3, [pc, #544]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1ea      	bne.n	800288e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8097 	beq.w	80029f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c6:	2300      	movs	r3, #0
 80028c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ca:	4b81      	ldr	r3, [pc, #516]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10f      	bne.n	80028f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	4b7d      	ldr	r3, [pc, #500]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	4a7c      	ldr	r2, [pc, #496]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e4:	6413      	str	r3, [r2, #64]	; 0x40
 80028e6:	4b7a      	ldr	r3, [pc, #488]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028f2:	2301      	movs	r3, #1
 80028f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f6:	4b77      	ldr	r3, [pc, #476]	; (8002ad4 <HAL_RCC_OscConfig+0x474>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d118      	bne.n	8002934 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002902:	4b74      	ldr	r3, [pc, #464]	; (8002ad4 <HAL_RCC_OscConfig+0x474>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a73      	ldr	r2, [pc, #460]	; (8002ad4 <HAL_RCC_OscConfig+0x474>)
 8002908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290e:	f7fe fa1b 	bl	8000d48 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002916:	f7fe fa17 	bl	8000d48 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e10c      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <HAL_RCC_OscConfig+0x474>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d106      	bne.n	800294a <HAL_RCC_OscConfig+0x2ea>
 800293c:	4b64      	ldr	r3, [pc, #400]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002940:	4a63      	ldr	r2, [pc, #396]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6713      	str	r3, [r2, #112]	; 0x70
 8002948:	e01c      	b.n	8002984 <HAL_RCC_OscConfig+0x324>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b05      	cmp	r3, #5
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x30c>
 8002952:	4b5f      	ldr	r3, [pc, #380]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002956:	4a5e      	ldr	r2, [pc, #376]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	6713      	str	r3, [r2, #112]	; 0x70
 800295e:	4b5c      	ldr	r3, [pc, #368]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002962:	4a5b      	ldr	r2, [pc, #364]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6713      	str	r3, [r2, #112]	; 0x70
 800296a:	e00b      	b.n	8002984 <HAL_RCC_OscConfig+0x324>
 800296c:	4b58      	ldr	r3, [pc, #352]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	4a57      	ldr	r2, [pc, #348]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	6713      	str	r3, [r2, #112]	; 0x70
 8002978:	4b55      	ldr	r3, [pc, #340]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	4a54      	ldr	r2, [pc, #336]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 800297e:	f023 0304 	bic.w	r3, r3, #4
 8002982:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d015      	beq.n	80029b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298c:	f7fe f9dc 	bl	8000d48 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002992:	e00a      	b.n	80029aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002994:	f7fe f9d8 	bl	8000d48 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e0cb      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029aa:	4b49      	ldr	r3, [pc, #292]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0ee      	beq.n	8002994 <HAL_RCC_OscConfig+0x334>
 80029b6:	e014      	b.n	80029e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b8:	f7fe f9c6 	bl	8000d48 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c0:	f7fe f9c2 	bl	8000d48 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0b5      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d6:	4b3e      	ldr	r3, [pc, #248]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1ee      	bne.n	80029c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d105      	bne.n	80029f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e8:	4b39      	ldr	r3, [pc, #228]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	4a38      	ldr	r2, [pc, #224]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 80029ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80a1 	beq.w	8002b40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029fe:	4b34      	ldr	r3, [pc, #208]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d05c      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d141      	bne.n	8002a96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a12:	4b31      	ldr	r3, [pc, #196]	; (8002ad8 <HAL_RCC_OscConfig+0x478>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a18:	f7fe f996 	bl	8000d48 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a20:	f7fe f992 	bl	8000d48 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e087      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	4b27      	ldr	r3, [pc, #156]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	019b      	lsls	r3, r3, #6
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	3b01      	subs	r3, #1
 8002a58:	041b      	lsls	r3, r3, #16
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	061b      	lsls	r3, r3, #24
 8002a62:	491b      	ldr	r1, [pc, #108]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a68:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <HAL_RCC_OscConfig+0x478>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe f96b 	bl	8000d48 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a76:	f7fe f967 	bl	8000d48 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e05c      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0f0      	beq.n	8002a76 <HAL_RCC_OscConfig+0x416>
 8002a94:	e054      	b.n	8002b40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <HAL_RCC_OscConfig+0x478>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7fe f954 	bl	8000d48 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7fe f950 	bl	8000d48 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e045      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x444>
 8002ac2:	e03d      	b.n	8002b40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e038      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002adc:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_RCC_OscConfig+0x4ec>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d028      	beq.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d121      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d11a      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d111      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	3b01      	subs	r3, #1
 8002b26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800

08002b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0cc      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b64:	4b68      	ldr	r3, [pc, #416]	; (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d90c      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b65      	ldr	r3, [pc, #404]	; (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0b8      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba4:	4b59      	ldr	r3, [pc, #356]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4a58      	ldr	r2, [pc, #352]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bbc:	4b53      	ldr	r3, [pc, #332]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4a52      	ldr	r2, [pc, #328]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc8:	4b50      	ldr	r3, [pc, #320]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	494d      	ldr	r1, [pc, #308]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d044      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d119      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e07f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d003      	beq.n	8002c0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	4b3f      	ldr	r3, [pc, #252]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e06f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1e:	4b3b      	ldr	r3, [pc, #236]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e067      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2e:	4b37      	ldr	r3, [pc, #220]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f023 0203 	bic.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4934      	ldr	r1, [pc, #208]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c40:	f7fe f882 	bl	8000d48 <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c46:	e00a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c48:	f7fe f87e 	bl	8000d48 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e04f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5e:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 020c 	and.w	r2, r3, #12
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d1eb      	bne.n	8002c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d20c      	bcs.n	8002c98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b22      	ldr	r3, [pc, #136]	; (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <HAL_RCC_ClockConfig+0x1b8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e032      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca4:	4b19      	ldr	r3, [pc, #100]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4916      	ldr	r1, [pc, #88]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	490e      	ldr	r1, [pc, #56]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cd6:	f000 f821 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	490a      	ldr	r1, [pc, #40]	; (8002d10 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	5ccb      	ldrb	r3, [r1, r3]
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	4a09      	ldr	r2, [pc, #36]	; (8002d14 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd ffe2 	bl	8000cc0 <HAL_InitTick>

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023c00 	.word	0x40023c00
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	0800474c 	.word	0x0800474c
 8002d14:	20000000 	.word	0x20000000
 8002d18:	20000004 	.word	0x20000004

08002d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d20:	b094      	sub	sp, #80	; 0x50
 8002d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	647b      	str	r3, [r7, #68]	; 0x44
 8002d28:	2300      	movs	r3, #0
 8002d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d34:	4b79      	ldr	r3, [pc, #484]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d00d      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0x40>
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	f200 80e1 	bhi.w	8002f08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x34>
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d4e:	e0db      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d50:	4b73      	ldr	r3, [pc, #460]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d54:	e0db      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d56:	4b73      	ldr	r3, [pc, #460]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d5a:	e0d8      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d5c:	4b6f      	ldr	r3, [pc, #444]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d66:	4b6d      	ldr	r3, [pc, #436]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d063      	beq.n	8002e3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d72:	4b6a      	ldr	r3, [pc, #424]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	099b      	lsrs	r3, r3, #6
 8002d78:	2200      	movs	r2, #0
 8002d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
 8002d86:	2300      	movs	r3, #0
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
 8002d8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d8e:	4622      	mov	r2, r4
 8002d90:	462b      	mov	r3, r5
 8002d92:	f04f 0000 	mov.w	r0, #0
 8002d96:	f04f 0100 	mov.w	r1, #0
 8002d9a:	0159      	lsls	r1, r3, #5
 8002d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002da0:	0150      	lsls	r0, r2, #5
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4621      	mov	r1, r4
 8002da8:	1a51      	subs	r1, r2, r1
 8002daa:	6139      	str	r1, [r7, #16]
 8002dac:	4629      	mov	r1, r5
 8002dae:	eb63 0301 	sbc.w	r3, r3, r1
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dc0:	4659      	mov	r1, fp
 8002dc2:	018b      	lsls	r3, r1, #6
 8002dc4:	4651      	mov	r1, sl
 8002dc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dca:	4651      	mov	r1, sl
 8002dcc:	018a      	lsls	r2, r1, #6
 8002dce:	4651      	mov	r1, sl
 8002dd0:	ebb2 0801 	subs.w	r8, r2, r1
 8002dd4:	4659      	mov	r1, fp
 8002dd6:	eb63 0901 	sbc.w	r9, r3, r1
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dee:	4690      	mov	r8, r2
 8002df0:	4699      	mov	r9, r3
 8002df2:	4623      	mov	r3, r4
 8002df4:	eb18 0303 	adds.w	r3, r8, r3
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	462b      	mov	r3, r5
 8002dfc:	eb49 0303 	adc.w	r3, r9, r3
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e0e:	4629      	mov	r1, r5
 8002e10:	024b      	lsls	r3, r1, #9
 8002e12:	4621      	mov	r1, r4
 8002e14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e18:	4621      	mov	r1, r4
 8002e1a:	024a      	lsls	r2, r1, #9
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e22:	2200      	movs	r2, #0
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e2c:	f7fd f9de 	bl	80001ec <__aeabi_uldivmod>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4613      	mov	r3, r2
 8002e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e38:	e058      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3a:	4b38      	ldr	r3, [pc, #224]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	099b      	lsrs	r3, r3, #6
 8002e40:	2200      	movs	r2, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	4611      	mov	r1, r2
 8002e46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e4a:	623b      	str	r3, [r7, #32]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e54:	4642      	mov	r2, r8
 8002e56:	464b      	mov	r3, r9
 8002e58:	f04f 0000 	mov.w	r0, #0
 8002e5c:	f04f 0100 	mov.w	r1, #0
 8002e60:	0159      	lsls	r1, r3, #5
 8002e62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e66:	0150      	lsls	r0, r2, #5
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4641      	mov	r1, r8
 8002e6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e72:	4649      	mov	r1, r9
 8002e74:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e8c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e90:	eb63 050b 	sbc.w	r5, r3, fp
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	00eb      	lsls	r3, r5, #3
 8002e9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ea2:	00e2      	lsls	r2, r4, #3
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	461d      	mov	r5, r3
 8002ea8:	4643      	mov	r3, r8
 8002eaa:	18e3      	adds	r3, r4, r3
 8002eac:	603b      	str	r3, [r7, #0]
 8002eae:	464b      	mov	r3, r9
 8002eb0:	eb45 0303 	adc.w	r3, r5, r3
 8002eb4:	607b      	str	r3, [r7, #4]
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	028b      	lsls	r3, r1, #10
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ecc:	4621      	mov	r1, r4
 8002ece:	028a      	lsls	r2, r1, #10
 8002ed0:	4610      	mov	r0, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	61fa      	str	r2, [r7, #28]
 8002edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ee0:	f7fd f984 	bl	80001ec <__aeabi_uldivmod>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4613      	mov	r3, r2
 8002eea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002efc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f06:	e002      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3750      	adds	r7, #80	; 0x50
 8002f14:	46bd      	mov	sp, r7
 8002f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	00f42400 	.word	0x00f42400
 8002f24:	007a1200 	.word	0x007a1200

08002f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000000 	.word	0x20000000

08002f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f44:	f7ff fff0 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	0a9b      	lsrs	r3, r3, #10
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4903      	ldr	r1, [pc, #12]	; (8002f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800
 8002f64:	0800475c 	.word	0x0800475c

08002f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f6c:	f7ff ffdc 	bl	8002f28 <HAL_RCC_GetHCLKFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	0b5b      	lsrs	r3, r3, #13
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4903      	ldr	r1, [pc, #12]	; (8002f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	0800475c 	.word	0x0800475c

08002f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e041      	b.n	8003026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fd fd30 	bl	8000a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	f000 f95e 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d001      	beq.n	8003048 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e046      	b.n	80030d6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <HAL_TIM_Base_Start+0xb4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d022      	beq.n	80030a0 <HAL_TIM_Base_Start+0x70>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003062:	d01d      	beq.n	80030a0 <HAL_TIM_Base_Start+0x70>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1f      	ldr	r2, [pc, #124]	; (80030e8 <HAL_TIM_Base_Start+0xb8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d018      	beq.n	80030a0 <HAL_TIM_Base_Start+0x70>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <HAL_TIM_Base_Start+0xbc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d013      	beq.n	80030a0 <HAL_TIM_Base_Start+0x70>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1c      	ldr	r2, [pc, #112]	; (80030f0 <HAL_TIM_Base_Start+0xc0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00e      	beq.n	80030a0 <HAL_TIM_Base_Start+0x70>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1b      	ldr	r2, [pc, #108]	; (80030f4 <HAL_TIM_Base_Start+0xc4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d009      	beq.n	80030a0 <HAL_TIM_Base_Start+0x70>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <HAL_TIM_Base_Start+0xc8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d004      	beq.n	80030a0 <HAL_TIM_Base_Start+0x70>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a18      	ldr	r2, [pc, #96]	; (80030fc <HAL_TIM_Base_Start+0xcc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d111      	bne.n	80030c4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b06      	cmp	r3, #6
 80030b0:	d010      	beq.n	80030d4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f042 0201 	orr.w	r2, r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c2:	e007      	b.n	80030d4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40010000 	.word	0x40010000
 80030e8:	40000400 	.word	0x40000400
 80030ec:	40000800 	.word	0x40000800
 80030f0:	40000c00 	.word	0x40000c00
 80030f4:	40010400 	.word	0x40010400
 80030f8:	40014000 	.word	0x40014000
 80030fc:	40001800 	.word	0x40001800

08003100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_TIM_ConfigClockSource+0x1c>
 8003118:	2302      	movs	r3, #2
 800311a:	e0b4      	b.n	8003286 <HAL_TIM_ConfigClockSource+0x186>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800313a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003154:	d03e      	beq.n	80031d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315a:	f200 8087 	bhi.w	800326c <HAL_TIM_ConfigClockSource+0x16c>
 800315e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003162:	f000 8086 	beq.w	8003272 <HAL_TIM_ConfigClockSource+0x172>
 8003166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316a:	d87f      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 800316c:	2b70      	cmp	r3, #112	; 0x70
 800316e:	d01a      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003170:	2b70      	cmp	r3, #112	; 0x70
 8003172:	d87b      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 8003174:	2b60      	cmp	r3, #96	; 0x60
 8003176:	d050      	beq.n	800321a <HAL_TIM_ConfigClockSource+0x11a>
 8003178:	2b60      	cmp	r3, #96	; 0x60
 800317a:	d877      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 800317c:	2b50      	cmp	r3, #80	; 0x50
 800317e:	d03c      	beq.n	80031fa <HAL_TIM_ConfigClockSource+0xfa>
 8003180:	2b50      	cmp	r3, #80	; 0x50
 8003182:	d873      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d058      	beq.n	800323a <HAL_TIM_ConfigClockSource+0x13a>
 8003188:	2b40      	cmp	r3, #64	; 0x40
 800318a:	d86f      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 800318c:	2b30      	cmp	r3, #48	; 0x30
 800318e:	d064      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x15a>
 8003190:	2b30      	cmp	r3, #48	; 0x30
 8003192:	d86b      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 8003194:	2b20      	cmp	r3, #32
 8003196:	d060      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x15a>
 8003198:	2b20      	cmp	r3, #32
 800319a:	d867      	bhi.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d05c      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x15a>
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	d05a      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x15a>
 80031a4:	e062      	b.n	800326c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031b6:	f000 f991 	bl	80034dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	609a      	str	r2, [r3, #8]
      break;
 80031d2:	e04f      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031e4:	f000 f97a 	bl	80034dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031f6:	609a      	str	r2, [r3, #8]
      break;
 80031f8:	e03c      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003206:	461a      	mov	r2, r3
 8003208:	f000 f8ee 	bl	80033e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2150      	movs	r1, #80	; 0x50
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f947 	bl	80034a6 <TIM_ITRx_SetConfig>
      break;
 8003218:	e02c      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003226:	461a      	mov	r2, r3
 8003228:	f000 f90d 	bl	8003446 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2160      	movs	r1, #96	; 0x60
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f937 	bl	80034a6 <TIM_ITRx_SetConfig>
      break;
 8003238:	e01c      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003246:	461a      	mov	r2, r3
 8003248:	f000 f8ce 	bl	80033e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2140      	movs	r1, #64	; 0x40
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f927 	bl	80034a6 <TIM_ITRx_SetConfig>
      break;
 8003258:	e00c      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4619      	mov	r1, r3
 8003264:	4610      	mov	r0, r2
 8003266:	f000 f91e 	bl	80034a6 <TIM_ITRx_SetConfig>
      break;
 800326a:	e003      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      break;
 8003270:	e000      	b.n	8003274 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003284:	7bfb      	ldrb	r3, [r7, #15]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a46      	ldr	r2, [pc, #280]	; (80033bc <TIM_Base_SetConfig+0x12c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d013      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ae:	d00f      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a43      	ldr	r2, [pc, #268]	; (80033c0 <TIM_Base_SetConfig+0x130>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00b      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a42      	ldr	r2, [pc, #264]	; (80033c4 <TIM_Base_SetConfig+0x134>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d007      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a41      	ldr	r2, [pc, #260]	; (80033c8 <TIM_Base_SetConfig+0x138>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a40      	ldr	r2, [pc, #256]	; (80033cc <TIM_Base_SetConfig+0x13c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d108      	bne.n	80032e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a35      	ldr	r2, [pc, #212]	; (80033bc <TIM_Base_SetConfig+0x12c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d02b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f0:	d027      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a32      	ldr	r2, [pc, #200]	; (80033c0 <TIM_Base_SetConfig+0x130>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d023      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a31      	ldr	r2, [pc, #196]	; (80033c4 <TIM_Base_SetConfig+0x134>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01f      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a30      	ldr	r2, [pc, #192]	; (80033c8 <TIM_Base_SetConfig+0x138>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a2f      	ldr	r2, [pc, #188]	; (80033cc <TIM_Base_SetConfig+0x13c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d017      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a2e      	ldr	r2, [pc, #184]	; (80033d0 <TIM_Base_SetConfig+0x140>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a2d      	ldr	r2, [pc, #180]	; (80033d4 <TIM_Base_SetConfig+0x144>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00f      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a2c      	ldr	r2, [pc, #176]	; (80033d8 <TIM_Base_SetConfig+0x148>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a2b      	ldr	r2, [pc, #172]	; (80033dc <TIM_Base_SetConfig+0x14c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d007      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a2a      	ldr	r2, [pc, #168]	; (80033e0 <TIM_Base_SetConfig+0x150>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d003      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a29      	ldr	r2, [pc, #164]	; (80033e4 <TIM_Base_SetConfig+0x154>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d108      	bne.n	8003354 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a10      	ldr	r2, [pc, #64]	; (80033bc <TIM_Base_SetConfig+0x12c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_Base_SetConfig+0xf8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a12      	ldr	r2, [pc, #72]	; (80033cc <TIM_Base_SetConfig+0x13c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d103      	bne.n	8003390 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d105      	bne.n	80033ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f023 0201 	bic.w	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	611a      	str	r2, [r3, #16]
  }
}
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40000800 	.word	0x40000800
 80033c8:	40000c00 	.word	0x40000c00
 80033cc:	40010400 	.word	0x40010400
 80033d0:	40014000 	.word	0x40014000
 80033d4:	40014400 	.word	0x40014400
 80033d8:	40014800 	.word	0x40014800
 80033dc:	40001800 	.word	0x40001800
 80033e0:	40001c00 	.word	0x40001c00
 80033e4:	40002000 	.word	0x40002000

080033e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	f023 0201 	bic.w	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f023 030a 	bic.w	r3, r3, #10
 8003424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	621a      	str	r2, [r3, #32]
}
 800343a:	bf00      	nop
 800343c:	371c      	adds	r7, #28
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003446:	b480      	push	{r7}
 8003448:	b087      	sub	sp, #28
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	60b9      	str	r1, [r7, #8]
 8003450:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	f023 0210 	bic.w	r2, r3, #16
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003470:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	031b      	lsls	r3, r3, #12
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003482:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b085      	sub	sp, #20
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f043 0307 	orr.w	r3, r3, #7
 80034c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	609a      	str	r2, [r3, #8]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	021a      	lsls	r2, r3, #8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	431a      	orrs	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4313      	orrs	r3, r2
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	609a      	str	r2, [r3, #8]
}
 8003510:	bf00      	nop
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003530:	2302      	movs	r3, #2
 8003532:	e05a      	b.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a21      	ldr	r2, [pc, #132]	; (80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d022      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003580:	d01d      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1d      	ldr	r2, [pc, #116]	; (80035fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d018      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1b      	ldr	r2, [pc, #108]	; (8003600 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1a      	ldr	r2, [pc, #104]	; (8003604 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00e      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a18      	ldr	r2, [pc, #96]	; (8003608 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d009      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a17      	ldr	r2, [pc, #92]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a15      	ldr	r2, [pc, #84]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10c      	bne.n	80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40010000 	.word	0x40010000
 80035fc:	40000400 	.word	0x40000400
 8003600:	40000800 	.word	0x40000800
 8003604:	40000c00 	.word	0x40000c00
 8003608:	40010400 	.word	0x40010400
 800360c:	40014000 	.word	0x40014000
 8003610:	40001800 	.word	0x40001800

08003614 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e042      	b.n	80036ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fd fa0e 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2224      	movs	r2, #36	; 0x24
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003656:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fdcb 	bl	80041f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800366c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800367c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800368c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08c      	sub	sp, #48	; 0x30
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	4613      	mov	r3, r2
 80036c0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d156      	bne.n	800377c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <HAL_UART_Transmit_DMA+0x26>
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e04f      	b.n	800377e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	88fa      	ldrh	r2, [r7, #6]
 80036e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	88fa      	ldrh	r2, [r7, #6]
 80036ee:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2221      	movs	r2, #33	; 0x21
 80036fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	4a21      	ldr	r2, [pc, #132]	; (8003788 <HAL_UART_Transmit_DMA+0xd4>)
 8003704:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	4a20      	ldr	r2, [pc, #128]	; (800378c <HAL_UART_Transmit_DMA+0xd8>)
 800370c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	4a1f      	ldr	r2, [pc, #124]	; (8003790 <HAL_UART_Transmit_DMA+0xdc>)
 8003714:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	2200      	movs	r2, #0
 800371c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800371e:	f107 0308 	add.w	r3, r7, #8
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372a:	6819      	ldr	r1, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3304      	adds	r3, #4
 8003732:	461a      	mov	r2, r3
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	f7fe fa0f 	bl	8001b58 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003742:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3314      	adds	r3, #20
 800374a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	e853 3f00 	ldrex	r3, [r3]
 8003752:	617b      	str	r3, [r7, #20]
   return(result);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3314      	adds	r3, #20
 8003762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003764:	627a      	str	r2, [r7, #36]	; 0x24
 8003766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003768:	6a39      	ldr	r1, [r7, #32]
 800376a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376c:	e841 2300 	strex	r3, r2, [r1]
 8003770:	61fb      	str	r3, [r7, #28]
   return(result);
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1e5      	bne.n	8003744 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	e000      	b.n	800377e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
  }
}
 800377e:	4618      	mov	r0, r3
 8003780:	3730      	adds	r7, #48	; 0x30
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	08003d21 	.word	0x08003d21
 800378c:	08003dbb 	.word	0x08003dbb
 8003790:	08003dd7 	.word	0x08003dd7

08003794 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b0ba      	sub	sp, #232	; 0xe8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80037d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d009      	beq.n	80037fa <HAL_UART_IRQHandler+0x66>
 80037e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fc40 	bl	8004078 <UART_Receive_IT>
      return;
 80037f8:	e25b      	b.n	8003cb2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80de 	beq.w	80039c0 <HAL_UART_IRQHandler+0x22c>
 8003804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d106      	bne.n	800381e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003814:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80d1 	beq.w	80039c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800381e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00b      	beq.n	8003842 <HAL_UART_IRQHandler+0xae>
 800382a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_UART_IRQHandler+0xd2>
 800384e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	f043 0202 	orr.w	r2, r3, #2
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <HAL_UART_IRQHandler+0xf6>
 8003872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	f043 0204 	orr.w	r2, r3, #4
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d011      	beq.n	80038ba <HAL_UART_IRQHandler+0x126>
 8003896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d105      	bne.n	80038ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	f043 0208 	orr.w	r2, r3, #8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 81f2 	beq.w	8003ca8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_UART_IRQHandler+0x14e>
 80038d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fbcb 	bl	8004078 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ec:	2b40      	cmp	r3, #64	; 0x40
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d103      	bne.n	800390e <HAL_UART_IRQHandler+0x17a>
 8003906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800390a:	2b00      	cmp	r3, #0
 800390c:	d04f      	beq.n	80039ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fad3 	bl	8003eba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	2b40      	cmp	r3, #64	; 0x40
 8003920:	d141      	bne.n	80039a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3314      	adds	r3, #20
 8003928:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003930:	e853 3f00 	ldrex	r3, [r3]
 8003934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003938:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800393c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003940:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3314      	adds	r3, #20
 800394a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800394e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003952:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800395a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800395e:	e841 2300 	strex	r3, r2, [r1]
 8003962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1d9      	bne.n	8003922 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	2b00      	cmp	r3, #0
 8003974:	d013      	beq.n	800399e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397a:	4a7e      	ldr	r2, [pc, #504]	; (8003b74 <HAL_UART_IRQHandler+0x3e0>)
 800397c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe f9b0 	bl	8001ce8 <HAL_DMA_Abort_IT>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d016      	beq.n	80039bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003998:	4610      	mov	r0, r2
 800399a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800399c:	e00e      	b.n	80039bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f9a8 	bl	8003cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a4:	e00a      	b.n	80039bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f9a4 	bl	8003cf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ac:	e006      	b.n	80039bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f9a0 	bl	8003cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80039ba:	e175      	b.n	8003ca8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039bc:	bf00      	nop
    return;
 80039be:	e173      	b.n	8003ca8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	f040 814f 	bne.w	8003c68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 8148 	beq.w	8003c68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8141 	beq.w	8003c68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039e6:	2300      	movs	r3, #0
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	f040 80b6 	bne.w	8003b78 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8145 	beq.w	8003cac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	f080 813e 	bcs.w	8003cac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a42:	f000 8088 	beq.w	8003b56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	330c      	adds	r3, #12
 8003a4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1d9      	bne.n	8003a46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3314      	adds	r3, #20
 8003a98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3314      	adds	r3, #20
 8003ab2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ab6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003aba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003abe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e1      	bne.n	8003a92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3314      	adds	r3, #20
 8003ad4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3314      	adds	r3, #20
 8003aee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003af2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003af4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003af8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e3      	bne.n	8003ace <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b26:	f023 0310 	bic.w	r3, r3, #16
 8003b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b38:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b40:	e841 2300 	strex	r3, r2, [r1]
 8003b44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e3      	bne.n	8003b14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe f859 	bl	8001c08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f8cb 	bl	8003d08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b72:	e09b      	b.n	8003cac <HAL_UART_IRQHandler+0x518>
 8003b74:	08003f81 	.word	0x08003f81
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 808e 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 8089 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003bc2:	647a      	str	r2, [r7, #68]	; 0x44
 8003bc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e3      	bne.n	8003b9e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3314      	adds	r3, #20
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	623b      	str	r3, [r7, #32]
   return(result);
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3314      	adds	r3, #20
 8003bf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003bfa:	633a      	str	r2, [r7, #48]	; 0x30
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e3      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	330c      	adds	r3, #12
 8003c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0310 	bic.w	r3, r3, #16
 8003c32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c40:	61fa      	str	r2, [r7, #28]
 8003c42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	69b9      	ldr	r1, [r7, #24]
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e3      	bne.n	8003c1c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c5e:	4619      	mov	r1, r3
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f851 	bl	8003d08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c66:	e023      	b.n	8003cb0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d009      	beq.n	8003c88 <HAL_UART_IRQHandler+0x4f4>
 8003c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f991 	bl	8003fa8 <UART_Transmit_IT>
    return;
 8003c86:	e014      	b.n	8003cb2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00e      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x51e>
 8003c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f9d1 	bl	8004048 <UART_EndTransmit_IT>
    return;
 8003ca6:	e004      	b.n	8003cb2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ca8:	bf00      	nop
 8003caa:	e002      	b.n	8003cb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cac:	bf00      	nop
 8003cae:	e000      	b.n	8003cb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cb0:	bf00      	nop
  }
}
 8003cb2:	37e8      	adds	r7, #232	; 0xe8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b090      	sub	sp, #64	; 0x40
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d137      	bne.n	8003dac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3e:	2200      	movs	r2, #0
 8003d40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3314      	adds	r3, #20
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	e853 3f00 	ldrex	r3, [r3]
 8003d50:	623b      	str	r3, [r7, #32]
   return(result);
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3314      	adds	r3, #20
 8003d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d62:	633a      	str	r2, [r7, #48]	; 0x30
 8003d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d6a:	e841 2300 	strex	r3, r2, [r1]
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1e5      	bne.n	8003d42 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d96:	61fa      	str	r2, [r7, #28]
 8003d98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	69b9      	ldr	r1, [r7, #24]
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	617b      	str	r3, [r7, #20]
   return(result);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e5      	bne.n	8003d76 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003daa:	e002      	b.n	8003db2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003dac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003dae:	f7ff ff83 	bl	8003cb8 <HAL_UART_TxCpltCallback>
}
 8003db2:	bf00      	nop
 8003db4:	3740      	adds	r7, #64	; 0x40
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f7ff ff7f 	bl	8003ccc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df2:	2b80      	cmp	r3, #128	; 0x80
 8003df4:	bf0c      	ite	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	2300      	movne	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b21      	cmp	r3, #33	; 0x21
 8003e08:	d108      	bne.n	8003e1c <UART_DMAError+0x46>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2200      	movs	r2, #0
 8003e14:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e16:	68b8      	ldr	r0, [r7, #8]
 8003e18:	f000 f827 	bl	8003e6a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e26:	2b40      	cmp	r3, #64	; 0x40
 8003e28:	bf0c      	ite	eq
 8003e2a:	2301      	moveq	r3, #1
 8003e2c:	2300      	movne	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b22      	cmp	r3, #34	; 0x22
 8003e3c:	d108      	bne.n	8003e50 <UART_DMAError+0x7a>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2200      	movs	r2, #0
 8003e48:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003e4a:	68b8      	ldr	r0, [r7, #8]
 8003e4c:	f000 f835 	bl	8003eba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e54:	f043 0210 	orr.w	r2, r3, #16
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e5c:	68b8      	ldr	r0, [r7, #8]
 8003e5e:	f7ff ff49 	bl	8003cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b089      	sub	sp, #36	; 0x24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	330c      	adds	r3, #12
 8003e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	330c      	adds	r3, #12
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	61ba      	str	r2, [r7, #24]
 8003e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	6979      	ldr	r1, [r7, #20]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e5      	bne.n	8003e72 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003eae:	bf00      	nop
 8003eb0:	3724      	adds	r7, #36	; 0x24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b095      	sub	sp, #84	; 0x54
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	330c      	adds	r3, #12
 8003ec8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	330c      	adds	r3, #12
 8003ee0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ee2:	643a      	str	r2, [r7, #64]	; 0x40
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ee8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e5      	bne.n	8003ec2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3314      	adds	r3, #20
 8003efc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3314      	adds	r3, #20
 8003f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e5      	bne.n	8003ef6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d119      	bne.n	8003f66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	330c      	adds	r3, #12
 8003f38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f023 0310 	bic.w	r3, r3, #16
 8003f48:	647b      	str	r3, [r7, #68]	; 0x44
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	330c      	adds	r3, #12
 8003f50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f52:	61ba      	str	r2, [r7, #24]
 8003f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6979      	ldr	r1, [r7, #20]
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e5      	bne.n	8003f32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f74:	bf00      	nop
 8003f76:	3754      	adds	r7, #84	; 0x54
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7ff feaa 	bl	8003cf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b21      	cmp	r3, #33	; 0x21
 8003fba:	d13e      	bne.n	800403a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc4:	d114      	bne.n	8003ff0 <UART_Transmit_IT+0x48>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d110      	bne.n	8003ff0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fe2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	1c9a      	adds	r2, r3, #2
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	621a      	str	r2, [r3, #32]
 8003fee:	e008      	b.n	8004002 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	1c59      	adds	r1, r3, #1
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6211      	str	r1, [r2, #32]
 8003ffa:	781a      	ldrb	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29b      	uxth	r3, r3
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	4619      	mov	r1, r3
 8004010:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10f      	bne.n	8004036 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004024:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004034:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	e000      	b.n	800403c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800403a:	2302      	movs	r3, #2
  }
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800405e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff fe25 	bl	8003cb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08c      	sub	sp, #48	; 0x30
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b22      	cmp	r3, #34	; 0x22
 800408a:	f040 80ae 	bne.w	80041ea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004096:	d117      	bne.n	80040c8 <UART_Receive_IT+0x50>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d113      	bne.n	80040c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	1c9a      	adds	r2, r3, #2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	629a      	str	r2, [r3, #40]	; 0x28
 80040c6:	e026      	b.n	8004116 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040da:	d007      	beq.n	80040ec <UART_Receive_IT+0x74>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <UART_Receive_IT+0x82>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d106      	bne.n	80040fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e008      	b.n	800410c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004106:	b2da      	uxtb	r2, r3
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29b      	uxth	r3, r3
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	4619      	mov	r1, r3
 8004124:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004126:	2b00      	cmp	r3, #0
 8004128:	d15d      	bne.n	80041e6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0220 	bic.w	r2, r2, #32
 8004138:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004148:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0201 	bic.w	r2, r2, #1
 8004158:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	2b01      	cmp	r3, #1
 800416e:	d135      	bne.n	80041dc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	613b      	str	r3, [r7, #16]
   return(result);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f023 0310 	bic.w	r3, r3, #16
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	330c      	adds	r3, #12
 8004194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004196:	623a      	str	r2, [r7, #32]
 8004198:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	69f9      	ldr	r1, [r7, #28]
 800419c:	6a3a      	ldr	r2, [r7, #32]
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e5      	bne.n	8004176 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b10      	cmp	r3, #16
 80041b6:	d10a      	bne.n	80041ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041d2:	4619      	mov	r1, r3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff fd97 	bl	8003d08 <HAL_UARTEx_RxEventCallback>
 80041da:	e002      	b.n	80041e2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff fd7f 	bl	8003ce0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	e002      	b.n	80041ec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e000      	b.n	80041ec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041ea:	2302      	movs	r3, #2
  }
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3730      	adds	r7, #48	; 0x30
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041f8:	b0c0      	sub	sp, #256	; 0x100
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004210:	68d9      	ldr	r1, [r3, #12]
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	ea40 0301 	orr.w	r3, r0, r1
 800421c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	431a      	orrs	r2, r3
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	431a      	orrs	r2, r3
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800424c:	f021 010c 	bic.w	r1, r1, #12
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800425a:	430b      	orrs	r3, r1
 800425c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800426a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426e:	6999      	ldr	r1, [r3, #24]
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	ea40 0301 	orr.w	r3, r0, r1
 800427a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	4b8f      	ldr	r3, [pc, #572]	; (80044c0 <UART_SetConfig+0x2cc>)
 8004284:	429a      	cmp	r2, r3
 8004286:	d005      	beq.n	8004294 <UART_SetConfig+0xa0>
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b8d      	ldr	r3, [pc, #564]	; (80044c4 <UART_SetConfig+0x2d0>)
 8004290:	429a      	cmp	r2, r3
 8004292:	d104      	bne.n	800429e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004294:	f7fe fe68 	bl	8002f68 <HAL_RCC_GetPCLK2Freq>
 8004298:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800429c:	e003      	b.n	80042a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800429e:	f7fe fe4f 	bl	8002f40 <HAL_RCC_GetPCLK1Freq>
 80042a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b0:	f040 810c 	bne.w	80044cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042c6:	4622      	mov	r2, r4
 80042c8:	462b      	mov	r3, r5
 80042ca:	1891      	adds	r1, r2, r2
 80042cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80042ce:	415b      	adcs	r3, r3
 80042d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042d6:	4621      	mov	r1, r4
 80042d8:	eb12 0801 	adds.w	r8, r2, r1
 80042dc:	4629      	mov	r1, r5
 80042de:	eb43 0901 	adc.w	r9, r3, r1
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042f6:	4690      	mov	r8, r2
 80042f8:	4699      	mov	r9, r3
 80042fa:	4623      	mov	r3, r4
 80042fc:	eb18 0303 	adds.w	r3, r8, r3
 8004300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004304:	462b      	mov	r3, r5
 8004306:	eb49 0303 	adc.w	r3, r9, r3
 800430a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800431a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800431e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004322:	460b      	mov	r3, r1
 8004324:	18db      	adds	r3, r3, r3
 8004326:	653b      	str	r3, [r7, #80]	; 0x50
 8004328:	4613      	mov	r3, r2
 800432a:	eb42 0303 	adc.w	r3, r2, r3
 800432e:	657b      	str	r3, [r7, #84]	; 0x54
 8004330:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004334:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004338:	f7fb ff58 	bl	80001ec <__aeabi_uldivmod>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4b61      	ldr	r3, [pc, #388]	; (80044c8 <UART_SetConfig+0x2d4>)
 8004342:	fba3 2302 	umull	r2, r3, r3, r2
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	011c      	lsls	r4, r3, #4
 800434a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800434e:	2200      	movs	r2, #0
 8004350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004354:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004358:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800435c:	4642      	mov	r2, r8
 800435e:	464b      	mov	r3, r9
 8004360:	1891      	adds	r1, r2, r2
 8004362:	64b9      	str	r1, [r7, #72]	; 0x48
 8004364:	415b      	adcs	r3, r3
 8004366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004368:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800436c:	4641      	mov	r1, r8
 800436e:	eb12 0a01 	adds.w	sl, r2, r1
 8004372:	4649      	mov	r1, r9
 8004374:	eb43 0b01 	adc.w	fp, r3, r1
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004384:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800438c:	4692      	mov	sl, r2
 800438e:	469b      	mov	fp, r3
 8004390:	4643      	mov	r3, r8
 8004392:	eb1a 0303 	adds.w	r3, sl, r3
 8004396:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800439a:	464b      	mov	r3, r9
 800439c:	eb4b 0303 	adc.w	r3, fp, r3
 80043a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043b8:	460b      	mov	r3, r1
 80043ba:	18db      	adds	r3, r3, r3
 80043bc:	643b      	str	r3, [r7, #64]	; 0x40
 80043be:	4613      	mov	r3, r2
 80043c0:	eb42 0303 	adc.w	r3, r2, r3
 80043c4:	647b      	str	r3, [r7, #68]	; 0x44
 80043c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043ce:	f7fb ff0d 	bl	80001ec <__aeabi_uldivmod>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4611      	mov	r1, r2
 80043d8:	4b3b      	ldr	r3, [pc, #236]	; (80044c8 <UART_SetConfig+0x2d4>)
 80043da:	fba3 2301 	umull	r2, r3, r3, r1
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	2264      	movs	r2, #100	; 0x64
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	1acb      	subs	r3, r1, r3
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043ee:	4b36      	ldr	r3, [pc, #216]	; (80044c8 <UART_SetConfig+0x2d4>)
 80043f0:	fba3 2302 	umull	r2, r3, r3, r2
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043fc:	441c      	add	r4, r3
 80043fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004402:	2200      	movs	r2, #0
 8004404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004408:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800440c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004410:	4642      	mov	r2, r8
 8004412:	464b      	mov	r3, r9
 8004414:	1891      	adds	r1, r2, r2
 8004416:	63b9      	str	r1, [r7, #56]	; 0x38
 8004418:	415b      	adcs	r3, r3
 800441a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800441c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004420:	4641      	mov	r1, r8
 8004422:	1851      	adds	r1, r2, r1
 8004424:	6339      	str	r1, [r7, #48]	; 0x30
 8004426:	4649      	mov	r1, r9
 8004428:	414b      	adcs	r3, r1
 800442a:	637b      	str	r3, [r7, #52]	; 0x34
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004438:	4659      	mov	r1, fp
 800443a:	00cb      	lsls	r3, r1, #3
 800443c:	4651      	mov	r1, sl
 800443e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004442:	4651      	mov	r1, sl
 8004444:	00ca      	lsls	r2, r1, #3
 8004446:	4610      	mov	r0, r2
 8004448:	4619      	mov	r1, r3
 800444a:	4603      	mov	r3, r0
 800444c:	4642      	mov	r2, r8
 800444e:	189b      	adds	r3, r3, r2
 8004450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004454:	464b      	mov	r3, r9
 8004456:	460a      	mov	r2, r1
 8004458:	eb42 0303 	adc.w	r3, r2, r3
 800445c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800446c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004474:	460b      	mov	r3, r1
 8004476:	18db      	adds	r3, r3, r3
 8004478:	62bb      	str	r3, [r7, #40]	; 0x28
 800447a:	4613      	mov	r3, r2
 800447c:	eb42 0303 	adc.w	r3, r2, r3
 8004480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004486:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800448a:	f7fb feaf 	bl	80001ec <__aeabi_uldivmod>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <UART_SetConfig+0x2d4>)
 8004494:	fba3 1302 	umull	r1, r3, r3, r2
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	2164      	movs	r1, #100	; 0x64
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	3332      	adds	r3, #50	; 0x32
 80044a6:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <UART_SetConfig+0x2d4>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	f003 0207 	and.w	r2, r3, #7
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4422      	add	r2, r4
 80044ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044bc:	e106      	b.n	80046cc <UART_SetConfig+0x4d8>
 80044be:	bf00      	nop
 80044c0:	40011000 	.word	0x40011000
 80044c4:	40011400 	.word	0x40011400
 80044c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044d0:	2200      	movs	r2, #0
 80044d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044de:	4642      	mov	r2, r8
 80044e0:	464b      	mov	r3, r9
 80044e2:	1891      	adds	r1, r2, r2
 80044e4:	6239      	str	r1, [r7, #32]
 80044e6:	415b      	adcs	r3, r3
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044ee:	4641      	mov	r1, r8
 80044f0:	1854      	adds	r4, r2, r1
 80044f2:	4649      	mov	r1, r9
 80044f4:	eb43 0501 	adc.w	r5, r3, r1
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	00eb      	lsls	r3, r5, #3
 8004502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004506:	00e2      	lsls	r2, r4, #3
 8004508:	4614      	mov	r4, r2
 800450a:	461d      	mov	r5, r3
 800450c:	4643      	mov	r3, r8
 800450e:	18e3      	adds	r3, r4, r3
 8004510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004514:	464b      	mov	r3, r9
 8004516:	eb45 0303 	adc.w	r3, r5, r3
 800451a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800452a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800453a:	4629      	mov	r1, r5
 800453c:	008b      	lsls	r3, r1, #2
 800453e:	4621      	mov	r1, r4
 8004540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004544:	4621      	mov	r1, r4
 8004546:	008a      	lsls	r2, r1, #2
 8004548:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800454c:	f7fb fe4e 	bl	80001ec <__aeabi_uldivmod>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4b60      	ldr	r3, [pc, #384]	; (80046d8 <UART_SetConfig+0x4e4>)
 8004556:	fba3 2302 	umull	r2, r3, r3, r2
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	011c      	lsls	r4, r3, #4
 800455e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004562:	2200      	movs	r2, #0
 8004564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004568:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800456c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004570:	4642      	mov	r2, r8
 8004572:	464b      	mov	r3, r9
 8004574:	1891      	adds	r1, r2, r2
 8004576:	61b9      	str	r1, [r7, #24]
 8004578:	415b      	adcs	r3, r3
 800457a:	61fb      	str	r3, [r7, #28]
 800457c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004580:	4641      	mov	r1, r8
 8004582:	1851      	adds	r1, r2, r1
 8004584:	6139      	str	r1, [r7, #16]
 8004586:	4649      	mov	r1, r9
 8004588:	414b      	adcs	r3, r1
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004598:	4659      	mov	r1, fp
 800459a:	00cb      	lsls	r3, r1, #3
 800459c:	4651      	mov	r1, sl
 800459e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045a2:	4651      	mov	r1, sl
 80045a4:	00ca      	lsls	r2, r1, #3
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	4603      	mov	r3, r0
 80045ac:	4642      	mov	r2, r8
 80045ae:	189b      	adds	r3, r3, r2
 80045b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045b4:	464b      	mov	r3, r9
 80045b6:	460a      	mov	r2, r1
 80045b8:	eb42 0303 	adc.w	r3, r2, r3
 80045bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80045ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045d8:	4649      	mov	r1, r9
 80045da:	008b      	lsls	r3, r1, #2
 80045dc:	4641      	mov	r1, r8
 80045de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e2:	4641      	mov	r1, r8
 80045e4:	008a      	lsls	r2, r1, #2
 80045e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045ea:	f7fb fdff 	bl	80001ec <__aeabi_uldivmod>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4611      	mov	r1, r2
 80045f4:	4b38      	ldr	r3, [pc, #224]	; (80046d8 <UART_SetConfig+0x4e4>)
 80045f6:	fba3 2301 	umull	r2, r3, r3, r1
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	2264      	movs	r2, #100	; 0x64
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	1acb      	subs	r3, r1, r3
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	3332      	adds	r3, #50	; 0x32
 8004608:	4a33      	ldr	r2, [pc, #204]	; (80046d8 <UART_SetConfig+0x4e4>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004614:	441c      	add	r4, r3
 8004616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800461a:	2200      	movs	r2, #0
 800461c:	673b      	str	r3, [r7, #112]	; 0x70
 800461e:	677a      	str	r2, [r7, #116]	; 0x74
 8004620:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004624:	4642      	mov	r2, r8
 8004626:	464b      	mov	r3, r9
 8004628:	1891      	adds	r1, r2, r2
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	415b      	adcs	r3, r3
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004634:	4641      	mov	r1, r8
 8004636:	1851      	adds	r1, r2, r1
 8004638:	6039      	str	r1, [r7, #0]
 800463a:	4649      	mov	r1, r9
 800463c:	414b      	adcs	r3, r1
 800463e:	607b      	str	r3, [r7, #4]
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800464c:	4659      	mov	r1, fp
 800464e:	00cb      	lsls	r3, r1, #3
 8004650:	4651      	mov	r1, sl
 8004652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004656:	4651      	mov	r1, sl
 8004658:	00ca      	lsls	r2, r1, #3
 800465a:	4610      	mov	r0, r2
 800465c:	4619      	mov	r1, r3
 800465e:	4603      	mov	r3, r0
 8004660:	4642      	mov	r2, r8
 8004662:	189b      	adds	r3, r3, r2
 8004664:	66bb      	str	r3, [r7, #104]	; 0x68
 8004666:	464b      	mov	r3, r9
 8004668:	460a      	mov	r2, r1
 800466a:	eb42 0303 	adc.w	r3, r2, r3
 800466e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	663b      	str	r3, [r7, #96]	; 0x60
 800467a:	667a      	str	r2, [r7, #100]	; 0x64
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004688:	4649      	mov	r1, r9
 800468a:	008b      	lsls	r3, r1, #2
 800468c:	4641      	mov	r1, r8
 800468e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004692:	4641      	mov	r1, r8
 8004694:	008a      	lsls	r2, r1, #2
 8004696:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800469a:	f7fb fda7 	bl	80001ec <__aeabi_uldivmod>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <UART_SetConfig+0x4e4>)
 80046a4:	fba3 1302 	umull	r1, r3, r3, r2
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	2164      	movs	r1, #100	; 0x64
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	3332      	adds	r3, #50	; 0x32
 80046b6:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <UART_SetConfig+0x4e4>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	f003 020f 	and.w	r2, r3, #15
 80046c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4422      	add	r2, r4
 80046ca:	609a      	str	r2, [r3, #8]
}
 80046cc:	bf00      	nop
 80046ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046d2:	46bd      	mov	sp, r7
 80046d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046d8:	51eb851f 	.word	0x51eb851f

080046dc <memset>:
 80046dc:	4402      	add	r2, r0
 80046de:	4603      	mov	r3, r0
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d100      	bne.n	80046e6 <memset+0xa>
 80046e4:	4770      	bx	lr
 80046e6:	f803 1b01 	strb.w	r1, [r3], #1
 80046ea:	e7f9      	b.n	80046e0 <memset+0x4>

080046ec <__libc_init_array>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	4d0d      	ldr	r5, [pc, #52]	; (8004724 <__libc_init_array+0x38>)
 80046f0:	4c0d      	ldr	r4, [pc, #52]	; (8004728 <__libc_init_array+0x3c>)
 80046f2:	1b64      	subs	r4, r4, r5
 80046f4:	10a4      	asrs	r4, r4, #2
 80046f6:	2600      	movs	r6, #0
 80046f8:	42a6      	cmp	r6, r4
 80046fa:	d109      	bne.n	8004710 <__libc_init_array+0x24>
 80046fc:	4d0b      	ldr	r5, [pc, #44]	; (800472c <__libc_init_array+0x40>)
 80046fe:	4c0c      	ldr	r4, [pc, #48]	; (8004730 <__libc_init_array+0x44>)
 8004700:	f000 f818 	bl	8004734 <_init>
 8004704:	1b64      	subs	r4, r4, r5
 8004706:	10a4      	asrs	r4, r4, #2
 8004708:	2600      	movs	r6, #0
 800470a:	42a6      	cmp	r6, r4
 800470c:	d105      	bne.n	800471a <__libc_init_array+0x2e>
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	f855 3b04 	ldr.w	r3, [r5], #4
 8004714:	4798      	blx	r3
 8004716:	3601      	adds	r6, #1
 8004718:	e7ee      	b.n	80046f8 <__libc_init_array+0xc>
 800471a:	f855 3b04 	ldr.w	r3, [r5], #4
 800471e:	4798      	blx	r3
 8004720:	3601      	adds	r6, #1
 8004722:	e7f2      	b.n	800470a <__libc_init_array+0x1e>
 8004724:	08004774 	.word	0x08004774
 8004728:	08004774 	.word	0x08004774
 800472c:	08004774 	.word	0x08004774
 8004730:	08004778 	.word	0x08004778

08004734 <_init>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr

08004740 <_fini>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	bf00      	nop
 8004744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004746:	bc08      	pop	{r3}
 8004748:	469e      	mov	lr, r3
 800474a:	4770      	bx	lr
